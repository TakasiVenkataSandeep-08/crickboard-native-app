import React from 'react';
import type { IBreadcrumbProps } from './types';
declare const _default: React.MemoExoticComponent<React.ForwardRefExoticComponent<import("react-native").ViewProps & import("styled-system").ColorProps<Required<import("styled-system").Theme<React.ReactText>>, string | number | symbol> & import("styled-system").SpaceProps<Required<import("styled-system").Theme<React.ReactText>>, string | number | symbol> & import("styled-system").LayoutProps<Required<import("styled-system").Theme<React.ReactText>>> & import("styled-system").FlexboxProps<Required<import("styled-system").Theme<React.ReactText>>> & import("styled-system").TypographyProps<Required<import("styled-system").Theme<React.ReactText>>> & import("styled-system").PositionProps<Required<import("styled-system").Theme<React.ReactText>>> & import("../../../utils/customProps").customBorderProps & import("../../../utils/customProps").customPositionProps & import("../../../utils/customProps").customExtraProps & import("../../../utils/customProps").customOutlineProps & import("../../../utils/customProps").customShadowProps & import("../../../utils/customProps").customLayoutProps & import("../../../utils/customProps").customTypographyProps & import("../../../utils/customProps").customBackgroundProps & import("../../../utils/customProps").customTransformProps & import("../../../utils/customProps").customFlexboxProps & import("styled-system").BorderProps<Required<import("styled-system").Theme<React.ReactText>>, import("csstype").Property.Margin<React.ReactText>> & {
    style?: import("react-native").ViewStyle | undefined;
    children?: any;
    shadow?: number | undefined;
    _text?: import("../../primitives").ITextProps | undefined;
} & {
    direction?: "row" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "column" | "column-reverse" | "row-reverse" | undefined;
    align?: "center" | "normal" | "flex-start" | "flex-end" | "stretch" | "baseline" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (string & {}) | "end" | "self-end" | "self-start" | "start" | undefined;
    justify?: "center" | "normal" | "left" | "flex-start" | "space-between" | "flex-end" | "stretch" | "space-around" | "space-evenly" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (string & {}) | "right" | "end" | "start" | undefined;
    wrap?: "wrap" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "nowrap" | "wrap-reverse" | undefined;
    basis?: 0 | "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (string & {}) | "-moz-max-content" | "-moz-min-content" | "max-content" | "min-content" | "content" | "-webkit-auto" | undefined;
    grow?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (number & {}) | undefined;
    shrink?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (number & {}) | undefined;
} & import("styled-system").ColorProps<Required<import("styled-system").Theme<React.ReactText>>, string | number | symbol> & import("styled-system").SpaceProps<Required<import("styled-system").Theme<React.ReactText>>, string | number | symbol> & import("styled-system").PositionProps<Required<import("styled-system").Theme<React.ReactText>>> & import("styled-system").PositionProps<Required<import("styled-system").Theme<React.ReactText>>> & import("styled-system").TypographyProps<Required<import("styled-system").Theme<React.ReactText>>> & {
    children?: React.ReactNode;
    fontSize?: string | number | string[] | number[] | Record<string, string> | undefined;
    noOfLines?: number | undefined;
    style?: any;
    bold?: boolean | undefined;
    isTruncated?: boolean | undefined;
    italic?: boolean | undefined;
    underline?: boolean | undefined;
    strikeThrough?: boolean | undefined;
    sub?: boolean | undefined;
    highlight?: boolean | undefined;
} & {
    style?: import("react-native").ViewStyle | undefined;
    children?: any;
    spacing?: number | undefined;
    separator?: string | JSX.Element | JSX.Element[] | undefined;
} & React.RefAttributes<unknown>>>;
export default _default;
export type { IBreadcrumbProps };
