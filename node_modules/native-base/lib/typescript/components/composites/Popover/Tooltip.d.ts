import * as React from 'react';
declare type State = {
    isVisible: boolean;
    yOffset: number;
    xOffset: number;
    elementWidth: number;
    elementHeight: number;
};
export declare type Props = {
    children?: JSX.Element | JSX.Element[];
    withPointer?: boolean;
    popover?: JSX.Element;
    height?: number | string;
    width?: number | string;
    containerStyle?: any;
    pointerColor?: string;
    pointerStyle?: {};
    onClose?: () => void;
    onOpen?: () => void;
    withOverlay?: boolean;
    overlayColor?: string;
    backgroundColor?: string;
    highlightColor?: string;
    toggleWrapperProps?: {};
    closeOnPopoverPress?: boolean;
    closeOnBlur?: boolean;
    actionType?: 'press' | 'longPress' | 'none';
    borderColor?: string;
    borderWidth?: number;
};
declare class Tooltip extends React.PureComponent<Props, State> {
    state: {
        isVisible: boolean;
        yOffset: number;
        xOffset: number;
        elementWidth: number;
        elementHeight: number;
    };
    renderedElement: any;
    timeout: any;
    static defaultProps: {
        toggleWrapperProps: {};
        withOverlay: true;
        highlightColor: 'transparent';
        withPointer: true;
        actionType: 'press';
        height: 40;
        width: 150;
        containerStyle: {};
        pointerStyle: {};
        backgroundColor: '#617080';
        onClose: () => void;
        onOpen: () => void;
    };
    toggleTooltip: () => void;
    wrapWithAction: (actionType: any, children: {} | null | undefined) => {} | null | undefined;
    getTooltipStyle: () => any;
    renderPointer: (tooltipY: any) => JSX.Element;
    renderContent: (withTooltip: any) => {} | null | undefined;
    componentDidMount(): void;
    componentWillUnmount(): void;
    getElementPosition: () => void;
    render(): JSX.Element;
}
export default Tooltip;
