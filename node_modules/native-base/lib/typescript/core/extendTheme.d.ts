import { ITheme } from './../theme';
export declare function extendTheme<T extends ITheme | Record<string, any>>(overrides: T): {
    components: {
        Accordion: {
            baseStyle: (props: Record<string, any>) => {
                borderWidth: number;
                borderColor: any;
                borderRadius: string;
            };
        };
        AccordionItem: {};
        AccordionIcon: {};
        AccordionSummary: {
            baseStyle: (props: Record<string, any>) => {
                borderWidth: number;
                borderColor: string;
                borderTopColor: any;
                p: number;
                _hover: {
                    bg: any;
                };
                _expanded: {
                    bg: string;
                    borderBottomColor: any;
                    color: string;
                };
                _disabled: {
                    bg: any;
                };
            };
        };
        AccordionDetails: {
            baseStyle: {
                p: number;
            };
        };
        Actionsheet: {
            defaultProps: {
                size: string;
            };
        };
        ActionsheetContent: {
            baseStyle: {
                m: number;
                p: number;
                mb: number;
                borderRadius: string;
            };
        };
        ActionsheetHeader: {};
        ActionsheetFooter: {
            baseStyle: {
                m: number;
                p: number;
                mb: number;
                borderRadius: string;
            };
        };
        ActionsheetItem: {};
        Alert: {
            defaultProps: {
                status: string;
                variant: string;
                p: number;
                borderRadius: string;
            };
            variants: {
                subtle: (props: Record<string, any>) => {
                    bg: any;
                    iconColor: any;
                    textColor: any;
                };
                solid: (props: Record<string, any>) => {
                    borderWidth: number;
                    borderColor: string;
                    bg: any;
                    iconColor: any;
                    textColor: any;
                };
                'left-accent': (props: Record<string, any>) => {
                    borderWidth: number;
                    bg: any;
                    iconColor: any;
                    textColor: any;
                    borderColor: string;
                    borderLeftColor: any;
                };
                'top-accent': (props: Record<string, any>) => {
                    borderWidth: number;
                    borderColor: string;
                    borderTopColor: any;
                    bg: any;
                    iconColor: any;
                    textColor: any;
                };
                outline: (props: Record<string, any>) => {
                    borderWidth: number;
                    borderColor: any;
                    iconColor: any;
                    textColor: any;
                };
                'outline-light': (props: Record<string, any>) => {
                    borderWidth: number;
                    borderColor: string;
                    iconColor: any;
                    textColor: any;
                };
            };
        };
        AlertDescription: {
            defaultProps: {
                fontSize: string;
                fontWeight: string;
            };
        };
        AlertTitle: {
            defaultProps: {
                fontSize: string;
                fontWeight: string;
            };
        };
        Avatar: {
            baseStyle: (props: Record<string, any>) => {
                bg: string;
                borderColor: any;
                position: string;
                justifyContent: string;
                alignItems: string;
                borderRadius: string;
                _text: {
                    fontWeight: number;
                };
            };
            sizes: {
                '2xs': {
                    width: any;
                    height: any;
                    fontSize: string;
                };
                xs: {
                    width: any;
                    height: any;
                    fontSize: string;
                };
                sm: {
                    width: any;
                    height: any;
                    fontSize: string;
                };
                md: {
                    width: any;
                    height: any;
                    fontSize: string;
                };
                lg: {
                    width: any;
                    height: any;
                    fontSize: string;
                };
                xl: {
                    width: any;
                    height: any;
                    fontSize: string;
                };
                '2xl': {
                    width: any;
                    height: any;
                    fontSize: string;
                };
                full: {
                    width: any;
                    height: any;
                    fontSize: string;
                };
            };
            defaultProps: {
                size: string;
            };
        };
        AvatarBadge: {
            baseStyle: (props: Record<string, any>) => {
                borderRadius: string;
                borderWidth: number;
                borderColor: any;
                bg: any;
            };
        };
        Badge: {
            baseStyle: {
                px: number;
                py: number;
                _text: {
                    fontSize: string;
                    textTransform: string;
                    fontWeight: string;
                };
                borderRadius: string;
            };
            variants: {
                solid: (props: Record<string, any>) => {
                    bg: any;
                    borderWidth: number;
                    borderColor: string;
                };
                subtle: (props: Record<string, any>) => {
                    bg: any;
                    _text: {
                        color: any;
                    };
                    borderWidth: number;
                    borderColor: string;
                };
                outline: (props: Record<string, any>) => {
                    borderColor: any;
                    _text: {
                        color: any;
                    };
                    borderWidth: number;
                };
            };
            defaultProps: {
                variant: string;
                colorScheme: string;
            };
        };
        Breadcrumb: {
            baseStyle: {
                width: string;
                height: string;
                display: string;
                flexDirection: string;
            };
            defaultProps: {
                direction: string;
                wrap: string;
            };
        };
        Button: {
            baseStyle: {
                borderRadius: string;
                display: string;
                flexDirection: string;
                justifyContent: string;
                alignItems: string;
            };
            variants: {
                ghost: (props: Record<string, any>) => {
                    _text: {
                        color: any;
                    };
                    bg?: undefined;
                } | {
                    _text: {
                        color: any;
                    };
                    bg: string;
                };
                outline: (props: Record<string, any>) => {
                    _text: {
                        color: any;
                    };
                    bg?: undefined;
                    border: string;
                    borderColor: any;
                } | {
                    _text: {
                        color: any;
                    };
                    bg: string;
                    border: string;
                    borderColor: any;
                };
                solid: (props: Record<string, any>) => {
                    bg: any;
                };
                link: () => {
                    padding: number;
                    height: string;
                    _text: {
                        textDecorationLine: string;
                    };
                };
                unstyled: () => {
                    m: number;
                    p: number;
                };
            };
            sizes: {
                lg: {
                    minH: number;
                    minW: number;
                    _text: {
                        fontSize: string;
                    };
                    px: number;
                    py: number;
                };
                md: {
                    minH: number;
                    minW: number;
                    _text: {
                        fontSize: string;
                    };
                    px: number;
                    py: number;
                };
                sm: {
                    minH: number;
                    minW: number;
                    _text: {
                        fontSize: string;
                    };
                    px: number;
                    py: number;
                };
                xs: {
                    minH: number;
                    minW: number;
                    _text: {
                        fontSize: string;
                    };
                    px: number;
                };
            };
            defaultProps: {
                variant: string;
                size: string;
                colorScheme: string;
                _text: {
                    fontWeight: string;
                };
            };
        };
        Center: {
            sizes: {
                xs: {
                    height: number;
                    width: number;
                };
                sm: {
                    height: number;
                    width: number;
                };
                md: {
                    height: number;
                    width: number;
                };
                lg: {
                    height: number;
                    width: number;
                };
                xl: {
                    height: number;
                    width: number;
                };
                '2xl': {
                    height: number;
                    width: number;
                };
            };
        };
        Checkbox: {
            baseStyle: (props: Record<string, any>) => {
                activeColor: any;
                borderColor: any;
                iconColor: any;
            };
            sizes: {
                lg: {
                    size: number;
                };
                md: {
                    size: number;
                };
                sm: {
                    size: number;
                };
            };
            defaultProps: {
                defaultIsChecked: boolean;
                size: string;
                colorScheme: string;
            };
        };
        CircularProgress: {
            sizes: {
                xs: {
                    height: number;
                    width: number;
                };
                sm: {
                    height: number;
                    width: number;
                };
                md: {
                    height: number;
                    width: number;
                };
                lg: {
                    height: number;
                    width: number;
                };
                xl: {
                    height: number;
                    width: number;
                };
                '2xl': {
                    height: number;
                    width: number;
                };
            };
        };
        Code: {
            baseStyle: {
                _text: {
                    fontFamily: string;
                    fontSize: string;
                };
                borderRadius: string;
                px: number;
                py: number;
            };
            variants: {
                solid: (props: Record<string, any>) => {
                    bg: any;
                    borderWidth: number;
                    borderColor: string;
                };
                subtle: (props: Record<string, any>) => {
                    bg: any;
                    _text: {
                        color: any;
                    };
                    borderWidth: number;
                    borderColor: string;
                };
                outline: (props: Record<string, any>) => {
                    borderColor: any;
                    _text: {
                        color: any;
                    };
                    borderWidth: number;
                };
            };
            defaultProps: {
                variant: string;
                colorScheme: string;
            };
        };
        Container: {
            baseStyle: {
                maxWidth: string;
            };
        };
        Divider: {
            baseStyle: (props: Record<string, any>) => {
                borderWidth: number;
                bg: any;
            };
        };
        Fade: {
            defaultProps: {
                duration: number;
            };
        };
        Heading: {
            baseStyle: (props: Record<string, any>) => {
                color: any;
                fontWeight: string;
            };
            sizes: (props: Record<string, any>) => {
                fontSize: number;
                '2xl'?: undefined;
                xl?: undefined;
                lg?: undefined;
                md?: undefined;
                sm?: undefined;
                xs?: undefined;
            } | {
                fontSize: string;
                '2xl'?: undefined;
                xl?: undefined;
                lg?: undefined;
                md?: undefined;
                sm?: undefined;
                xs?: undefined;
            } | {
                '2xl': {
                    fontSize: string;
                };
                xl: {
                    fontSize: string;
                };
                lg: {
                    fontSize: string;
                };
                md: {
                    fontSize: string;
                };
                sm: {
                    fontSize: string;
                };
                xs: {
                    fontSize: string;
                };
                fontSize?: undefined;
            };
            defaultProps: {
                size: string;
            };
        };
        Icon: {
            baseStyle: (props: Record<string, any>) => {
                color: any;
            };
            sizes: Pick<{
                container: {
                    sm: string;
                    md: string;
                    lg: string;
                    xl: string;
                };
                '3xs': string;
                '2xs': string;
                xs: string;
                sm: string;
                md: string;
                lg: string;
                xl: string;
                '2xl': string;
                0: string;
                1: string;
                2: string;
                3: string;
                4: string;
                5: string;
                6: string;
                7: string;
                8: string;
                9: string;
                10: string;
                12: string;
                16: string;
                20: string;
                24: string;
                32: string;
                40: string;
                48: string;
                56: string;
                64: string;
                72: string;
                80: string;
                96: string;
            }, "0" | "2" | "sm" | "md" | "lg" | "xl" | "4" | "xs" | "6" | "8" | "12" | "16" | "24" | "2xl" | "32" | "3xs" | "2xs" | "1" | "3" | "5" | "7" | "9" | "10" | "20" | "40" | "48" | "56" | "64" | "72" | "80" | "96">;
            defaultProps: {
                size: number;
            };
        };
        IconButton: {
            baseStyle: {
                borderRadius: string;
                py: number;
                px: number;
            };
            defaultProps: {
                variant: string;
            };
        };
        Input: {
            baseStyle: (props: Record<string, any>) => {
                w: string;
                p: number;
                color: any;
                placeholderTextColor: any;
                _isDisabledProps: {
                    opacity: number;
                };
                borderColor: any;
                hoverBorderColor: string;
                focusBorderColor: any;
                errorBorderColor: any;
            };
            variants: {
                outline: () => {
                    borderWidth: number;
                };
                underlined: () => {
                    borderRadius: number;
                    borderWidth: number;
                    borderBottomWidth: number;
                };
                rounded: () => {
                    borderRadius: string;
                    borderWidth: number;
                };
                filled: (props: Record<string, any>) => {
                    bg: any;
                    borderWidth: number;
                    borderColor: any;
                };
                unstyled: () => {
                    borderWidth: number;
                };
                default: () => {
                    borderWidth: number;
                };
            };
            sizes: {
                '2xl': {
                    fontSize: string;
                };
                xl: {
                    fontSize: string;
                };
                lg: {
                    fontSize: string;
                };
                md: {
                    fontSize: string;
                };
                sm: {
                    fontSize: string;
                };
                xs: {
                    fontSize: string;
                };
            };
            defaultProps: {
                size: string;
                variant: string;
                borderRadius: string;
            };
        };
        Kbd: {
            baseStyle: (props: Record<string, any>) => {
                bg: any;
                borderColor: any;
                borderWidth: number;
                borderBottomWidth: number;
                borderRadius: string;
                px: number;
                _text: {
                    fontSize: string;
                    fontWeight: string;
                };
            };
            defaultProps: {
                shadow: number;
            };
        };
        Link: {
            baseStyle: {
                width: string;
                height: string;
            };
        };
        List: {
            baseStyle: {
                borderWidth: number;
                borderColor: string;
                borderRadius: string;
            };
        };
        ListItem: {
            baseStyle: {
                borderTopWidth: number;
                borderColor: string;
            };
            defaultProps: {
                start: number;
            };
        };
        ListIcon: {};
        Menu: {
            defaultProps: {
                shadow: number;
            };
            baseStyle: (props: Record<string, any>) => {
                bg: any;
                borderRadius: string;
                borderWidth: string;
                borderColor: string;
            };
        };
        MenuGroup: {
            baseStyle: {
                _title: {
                    fontSize: number;
                    fontWeight: string;
                };
                p: number;
            };
        };
        MenuItem: {
            baseStyle: {
                _text: {
                    fontSize: number;
                    fontWeight: string;
                    textAlign: string;
                };
                py: number;
                px: number;
                maxWidth: number;
                minWidth: number;
            };
            defaultProps: {
                isDisabled: boolean;
                disabledTextColor: string;
                underlayColor: string;
                _disabled: {
                    bg: string;
                    underlayColor: string;
                };
            };
        };
        Modal: {
            baseStyle: {
                width: string;
                height: string;
            };
            sizes: {
                xs: {
                    contentSize: {
                        width: string;
                    };
                };
                sm: {
                    contentSize: {
                        width: string;
                    };
                };
                md: {
                    contentSize: {
                        width: string;
                    };
                };
                lg: {
                    contentSize: {
                        width: string;
                    };
                };
                xl: {
                    contentSize: {
                        width: string;
                    };
                };
                full: {
                    contentSize: {
                        width: string;
                    };
                };
            };
            defaultProps: {
                size: string;
                closeOnOverlayClick: boolean;
            };
        };
        ModalContent: {
            baseStyle: (props: Record<string, any>) => {
                bg: any;
                p: number;
                rounded: string;
            };
        };
        ModalHeader: {
            baseStyle: {
                pb: number;
            };
        };
        ModalBody: {
            baseStyle: {
                mb: number;
                fontSize: string;
            };
        };
        ModalFooter: {
            baseStyle: {
                flexDirection: string;
                justifyContent: string;
                flexWrap: string;
            };
        };
        ModalOverlay: {
            baseStyle: {
                position: string;
                left: number;
                top: number;
                opacity: number;
                right: number;
                bottom: number;
            };
        };
        ModalCloseButton: {
            baseStyle: {
                position: string;
                right: number;
                top: number;
                zIndex: number;
            };
            defaultProps: {
                size: number;
            };
        };
        NumberInput: {
            defaultProps: {
                size: string;
                step: number;
                min: number;
                max: number;
                defaultValue: string;
                keepWithinRange: boolean;
                clampValueOnBlur: boolean;
                focusInputOnChange: boolean;
                getAriaValueText: boolean;
            };
        };
        NumberInputStepper: {
            baseStyle: (props: Record<string, any>) => {
                bg: any;
                iconColor: any;
                _active: {};
                _disabled: {
                    opacity: number;
                };
            };
        };
        PinInput: {
            sizes: {
                '2xl': {
                    fontSize: string;
                    p: number;
                    width: string;
                    height: string;
                    textAlign: string;
                    borderRadius: string;
                };
                xl: {
                    fontSize: string;
                    p: number;
                    width: string;
                    height: string;
                    textAlign: string;
                    borderRadius: string;
                };
                lg: {
                    fontSize: string;
                    p: number;
                    width: string;
                    height: string;
                    textAlign: string;
                    borderRadius: string;
                };
                md: {
                    fontSize: string;
                    p: number;
                    width: string;
                    height: string;
                    textAlign: string;
                    borderRadius: string;
                };
                sm: {
                    fontSize: string;
                    p: number;
                    width: string;
                    height: string;
                    textAlign: string;
                    borderRadius: string;
                };
                xs: {
                    fontSize: string;
                    p: number;
                    width: string;
                    height: string;
                    textAlign: string;
                    borderRadius: string;
                };
            };
            defaultProps: {
                placeholder: string;
                size: string;
                manageFocus: boolean;
                space: number;
            };
        };
        Popover: {
            baseStyle: (props: Record<string, any>) => {
                popoverCloseButtonStyle: {
                    position: string;
                    right: number;
                    top: number;
                    zIndex: number;
                };
                popoverCloseButtonProps: {
                    size: string;
                    p: number;
                };
                popoverProps: {
                    backgroundColor: any;
                    borderColor: any;
                    borderWidth: number;
                };
                popoverBodyProps: {
                    mb: number;
                    pt: number;
                    px: number;
                    borderTopWidth: number;
                };
                popoverContentProps: {
                    height: string;
                    size: string;
                };
                popoverHeaderProps: {
                    pt: number;
                    pb: number;
                    px: number;
                };
                popoverFooterProps: {
                    px: number;
                    pb: number;
                    pt: number;
                    borderTopWidth: number;
                    flexDirection: string;
                    flexWrap: string;
                };
            };
            sizes: {
                xs: {
                    _width: string;
                };
                sm: {
                    _width: string;
                };
                md: {
                    _width: string;
                };
                lg: {
                    _width: string;
                };
                xl: {
                    _width: string;
                };
                full: {
                    _width: string;
                };
            };
        };
        Progress: {
            baseStyle: (props: Record<string, any>) => {
                innerBg: any;
                bg: any;
            };
            defaultProps: {
                colorScheme: string;
                size: string;
                rounded: number;
            };
            sizes: {
                xs: {
                    height: number;
                };
                sm: {
                    height: number;
                };
                md: {
                    height: number;
                };
                lg: {
                    height: number;
                };
                xl: {
                    height: number;
                };
                '2xl': {
                    height: number;
                };
            };
        };
        Radio: {
            baseStyle: (props: Record<string, any>) => {
                activeColor: any;
                borderColor: any;
            };
            sizes: {
                lg: {
                    size: number;
                };
                md: {
                    size: number;
                };
                sm: {
                    size: number;
                };
            };
            defaultProps: {
                defaultIsChecked: boolean;
                size: string;
                colorScheme: string;
            };
        };
        ScaleFade: {
            defaultProps: {
                duration: number;
                initialScale: number;
            };
        };
        Select: {
            variants: {
                styled: (props: Record<string, any>) => {
                    variant: string;
                    pl: number;
                    pr: number;
                    border: number;
                    borderColor: any;
                    _isDisabled: {
                        opacity: number;
                    };
                    _isInvalid: {
                        borderColor: any;
                    };
                    _hover: {
                        borderColor: string;
                    };
                };
                native: (props: Record<string, any>) => {
                    variant: string;
                    androidIconColor: any;
                    color: any;
                    _android: {
                        p: number;
                    };
                    _ios: {};
                    _web: {
                        bg: string;
                        borderRadius: string;
                        borderColor: string;
                        p: number;
                    };
                    _hover: {
                        borderColor: string;
                    };
                };
            };
            defaultProps: {
                variant: string;
            };
        };
        SelectItem: {
            baseStyle: {
                p: number;
                px: number;
                borderRadius: number;
                minH: number;
            };
        };
        Skeleton: {
            baseStyle: (props: Record<string, any>) => {
                skeletonColor: any;
                baseColor: any;
            };
            defaultProps: {
                variant: string;
            };
        };
        Slide: {
            defaultProps: {
                duration: number;
                placement: string;
            };
        };
        SlideFade: {
            defaultProps: {
                duration: number;
                offsetX: number;
                offsetY: number;
            };
        };
        Slider: {
            baseStyle: (props: Record<string, any>) => {
                activeColor: any;
                trackColor: any;
            };
            sizes: {
                lg: {
                    thumbSize: number;
                    sliderSize: number;
                };
                md: {
                    thumbSize: number;
                    sliderSize: number;
                };
                sm: {
                    thumbSize: number;
                    sliderSize: number;
                };
            };
            defaultProps: {
                colorScheme: string;
                size: string;
                min: number;
                max: number;
                step: number;
            };
        };
        SliderThumb: {
            defaultProps: {
                shadow: number;
            };
        };
        Spinner: {
            baseStyle: {
                color: string;
            };
            sizes: {
                sm: string;
                lg: string;
            };
            defaultProps: {
                size: string;
            };
        };
        Stat: {
            defaultProps: {
                _statLabel: {
                    fontSize: string;
                };
                _statNumber: {
                    fontSize: string;
                    fontWeight: string;
                    my: number;
                };
                _statHelpText: {
                    _text: {
                        color: string;
                        fontSize: string;
                    };
                    flexDirection: string;
                    alignItems: string;
                };
                _statGroup: {
                    flexWrap: string;
                    space: number;
                    justifyContent: string;
                };
            };
        };
        Switch: {
            baseStyle: (props: Record<string, any>) => {
                offTrackColor: any;
                onTrackColor: any;
                onThumbColor: any;
                offThumbColor: any;
            };
            sizes: {
                sm: {
                    transform: {
                        scale: number;
                    }[];
                };
                md: {};
                lg: {
                    transform: {
                        scale: number;
                    }[];
                    margin: number;
                };
            };
            defaultProps: {
                size: string;
            };
        };
        Tabs: {
            baseStyle: {
                activeTabStyle: {
                    marginBottom: string;
                };
                inactiveTabStyle: {
                    marginBottom: string;
                };
            };
            variants: {
                line: (props: Record<string, any>) => {
                    activeTabStyle: {
                        borderColor: any;
                        borderBottomWidth: number;
                    };
                    inactiveTabStyle: {
                        borderColor: string;
                        borderBottomWidth: number;
                    };
                    tabBarStyle: {
                        borderBottomWidth: number;
                        borderColor: string;
                    };
                };
                enclosed: (props: Record<string, any>) => {
                    activeTabStyle: {
                        borderTopWidth: number;
                        borderLeftWidth: number;
                        borderRightWidth: number;
                        borderColor: any;
                    };
                    inactiveTabStyle: {
                        borderColor: string;
                        borderBottomWidth: number;
                    };
                    tabBarStyle: {};
                };
                'enclosed-colored': (props: Record<string, any>) => {
                    activeTabStyle: {
                        borderTopWidth: number;
                        borderLeftWidth: number;
                        borderRightWidth: number;
                        borderColor: string;
                        color: any;
                    };
                    inactiveTabStyle: {
                        bg: string;
                        borderColor: string;
                        borderBottomWidth: number;
                    };
                    tabBarStyle: {};
                };
                'soft-rounded': (props: Record<string, any>) => {
                    activeTabStyle: {
                        borderRadius: string;
                        bg: string;
                        color: string;
                    };
                    inactiveTabStyle: {};
                    tabBarStyle: {};
                };
                'solid-rounded': (props: Record<string, any>) => {
                    activeTabStyle: {
                        borderRadius: string;
                        bg: any;
                        color: string;
                    };
                    inactiveTabStyle: {};
                    tabBarStyle: {};
                };
                'solid-box': (props: Record<string, any>) => {
                    activeTabStyle: {
                        bg: any;
                        color: string;
                    };
                    inactiveTabStyle: {};
                    tabBarStyle: {};
                };
            };
            sizes: {
                sm: {
                    activeTabStyle: {
                        fontSize: string;
                        p: number;
                    };
                    inactiveTabStyle: {
                        fontSize: string;
                        p: number;
                    };
                };
                md: {
                    activeTabStyle: {
                        fontSize: string;
                        p: number;
                    };
                    inactiveTabStyle: {
                        fontSize: string;
                        p: number;
                    };
                };
                lg: {
                    activeTabStyle: {
                        fontSize: string;
                        p: number;
                    };
                    inactiveTabStyle: {
                        fontSize: string;
                        p: number;
                    };
                };
            };
            defaultProps: {
                size: string;
                variant: string;
                colorScheme: string;
            };
        };
        Tag: {
            variants: {
                solid: (props: Record<string, any>) => {
                    bg: any;
                    borderWidth: number;
                    borderColor: string;
                };
                subtle: (props: Record<string, any>) => {
                    bg: any;
                    _text: {
                        color: any;
                    };
                    borderWidth: number;
                    borderColor: string;
                };
                outline: (props: Record<string, any>) => {
                    borderColor: any;
                    _text: {
                        color: any;
                    };
                    borderWidth: number;
                };
            };
            baseStyle: {
                _text: {
                    fontWeight: string;
                };
                alignItems: string;
                justifyContent: string;
                flexDirection: string;
                display: string;
            };
            sizes: {
                sm: {
                    minH: number;
                    minW: number;
                    _text: {
                        fontSize: string;
                    };
                    p: number;
                    borderRadius: string;
                };
                md: {
                    minH: number;
                    minW: number;
                    _text: {
                        fontSize: string;
                    };
                    borderRadius: string;
                    p: number;
                };
                lg: {
                    minH: number;
                    minW: number;
                    _text: {
                        fontSize: string;
                    };
                    borderRadius: string;
                    p: number;
                };
            };
            defaultProps: {
                size: string;
                variant: string;
                colorScheme: string;
            };
        };
        Text: {
            baseStyle: (props: Record<string, any>) => {
                color: any;
            };
            defaultProps: {
                fontWeight: number;
            };
        };
        AppBar: {
            baseStyle: (props: Record<string, any>) => {
                bg: any;
                px: number;
                height: string;
            };
            defaultProps: {};
        };
        TextArea: {
            defaultProps: {
                rounded: number;
                multiline: boolean;
                numberOfLines: number;
                px: number;
                py: number;
            };
        };
        Toast: {
            baseStyle: (props: Record<string, any>) => {
                opacity: number;
                backgroundColor: any;
            };
            defaultProps: {
                p: number;
                borderRadius: string;
                _title: {
                    fontSize: string;
                    color: string;
                };
            };
        };
    };
    config: import("./color-mode").ColorModeOptions;
    sizes: {
        container: {
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
        '3xs': string;
        '2xs': string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        '2xl': string;
        0: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        12: string;
        16: string;
        20: string;
        24: string;
        32: string;
        40: string;
        48: string;
        56: string;
        64: string;
        72: string;
        80: string;
        96: string;
    };
    space: {
        0: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        12: string;
        16: string;
        20: string;
        24: string;
        32: string;
        40: string;
        48: string;
        56: string;
        64: string;
        72: string;
        80: string;
        96: string;
    };
    shadows: (props: any) => {
        0: {
            shadowColor: string;
            shadowOffset: {
                width: number;
                height: number;
            };
            shadowOpacity: number;
            shadowRadius: number;
            elevation: number;
        };
        1: {
            shadowColor: string;
            shadowOffset: {
                width: number;
                height: number;
            };
            shadowOpacity: number;
            shadowRadius: number;
            elevation: number;
        };
        2: {
            shadowColor: string;
            shadowOffset: {
                width: number;
                height: number;
            };
            shadowOpacity: number;
            shadowRadius: number;
            elevation: number;
        };
        3: {
            shadowColor: string;
            shadowOffset: {
                width: number;
                height: number;
            };
            shadowOpacity: number;
            shadowRadius: number;
            elevation: number;
        };
        4: {
            shadowColor: string;
            shadowOffset: {
                width: number;
                height: number;
            };
            shadowOpacity: number;
            shadowRadius: number;
            elevation: number;
        };
        5: {
            shadowColor: string;
            shadowOffset: {
                width: number;
                height: number;
            };
            shadowOpacity: number;
            shadowRadius: number;
            elevation: number;
        };
        6: {
            shadowColor: string;
            shadowOffset: {
                width: number;
                height: number;
            };
            shadowOpacity: number;
            shadowRadius: number;
            elevation: number;
        };
        7: {
            shadowColor: string;
            shadowOffset: {
                width: number;
                height: number;
            };
            shadowOpacity: number;
            shadowRadius: number;
            elevation: number;
        };
        8: {
            shadowColor: string;
            shadowOffset: {
                width: number;
                height: number;
            };
            shadowOpacity: number;
            shadowRadius: number;
            elevation: number;
        };
        9: {
            shadowColor: string;
            shadowOffset: {
                width: number;
                height: number;
            };
            shadowOpacity: number;
            shadowRadius: number;
            elevation: number;
        };
    };
    letterSpacings: {
        tighter: string;
        tight: string;
        normal: string;
        wide: string;
        wider: string;
        widest: string;
    };
    lineHeights: {
        none: number;
        shorter: number;
        short: number;
        base: number;
        tall: number;
        taller: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        hairline: number;
        thin: number;
        light: number;
        normal: number;
        medium: number;
        semibold: number;
        bold: number;
        extrabold: number;
        black: number;
    };
    fonts: {
        heading: string;
        body: string;
        mono: string;
    };
    fontSizes: {
        xs: number;
        sm: number;
        md: number;
        lg: number;
        xl: number;
        '2xl': number;
        '3xl': number;
        '4xl': number;
        '5xl': number;
        '6xl': number;
    };
    borders: {
        none: number;
        '1px': string;
        '2px': string;
        '4px': string;
    };
    breakpoints: {
        base: number;
        sm: number;
        md: number;
        lg: number;
        xl: number;
    };
    colors: {
        contrastThreshold: number;
        white: string;
        black: string;
        lightText: string;
        darkText: string;
        rose: {
            50: string;
            100: string;
            200: string;
            300: string;
            400: string;
            500: string;
            600: string;
            700: string;
            800: string;
            900: string;
        };
        pink: {
            50: string;
            100: string;
            200: string;
            300: string;
            400: string;
            500: string;
            600: string;
            700: string;
            800: string;
            900: string;
        };
        fuchsia: {
            50: string;
            100: string;
            200: string;
            300: string;
            400: string;
            500: string;
            600: string;
            700: string;
            800: string;
            900: string;
        };
        purple: {
            50: string;
            100: string;
            200: string;
            300: string;
            400: string;
            500: string;
            600: string;
            700: string;
            800: string;
            900: string;
        };
        violet: {
            50: string;
            100: string;
            200: string;
            300: string;
            400: string;
            500: string;
            600: string;
            700: string;
            800: string;
            900: string;
        };
        indigo: {
            50: string;
            100: string;
            200: string;
            300: string;
            400: string;
            500: string;
            600: string;
            700: string;
            800: string;
            900: string;
        };
        blue: {
            50: string;
            100: string;
            200: string;
            300: string;
            400: string;
            500: string;
            600: string;
            700: string;
            800: string;
            900: string;
        };
        lightBlue: {
            50: string;
            100: string;
            200: string;
            300: string;
            400: string;
            500: string;
            600: string;
            700: string;
            800: string;
            900: string;
        };
        cyan: {
            50: string;
            100: string;
            200: string;
            300: string;
            400: string;
            500: string;
            600: string;
            700: string;
            800: string;
            900: string;
        };
        teal: {
            50: string;
            100: string;
            200: string;
            300: string;
            400: string;
            500: string;
            600: string;
            700: string;
            800: string;
            900: string;
        };
        emerald: {
            50: string;
            100: string;
            200: string;
            300: string;
            400: string;
            500: string;
            600: string;
            700: string;
            800: string;
            900: string;
        };
        green: {
            50: string;
            100: string;
            200: string;
            300: string;
            400: string;
            500: string;
            600: string;
            700: string;
            800: string;
            900: string;
        };
        lime: {
            50: string;
            100: string;
            200: string;
            300: string;
            400: string;
            500: string;
            600: string;
            700: string;
            800: string;
            900: string;
        };
        yellow: {
            50: string;
            100: string;
            200: string;
            300: string;
            400: string;
            500: string;
            600: string;
            700: string;
            800: string;
            900: string;
        };
        amber: {
            50: string;
            100: string;
            200: string;
            300: string;
            400: string;
            500: string;
            600: string;
            700: string;
            800: string;
            900: string;
        };
        orange: {
            50: string;
            100: string;
            200: string;
            300: string;
            400: string;
            500: string;
            600: string;
            700: string;
            800: string;
            900: string;
        };
        red: {
            50: string;
            100: string;
            200: string;
            300: string;
            400: string;
            500: string;
            600: string;
            700: string;
            800: string;
            900: string;
        };
        warmGray: {
            50: string;
            100: string;
            200: string;
            300: string;
            400: string;
            500: string;
            600: string;
            700: string;
            800: string;
            900: string;
        };
        trueGray: {
            50: string;
            100: string;
            200: string;
            300: string;
            400: string;
            500: string;
            600: string;
            700: string;
            800: string;
            900: string;
        };
        gray: {
            50: string;
            100: string;
            200: string;
            300: string;
            400: string;
            500: string;
            600: string;
            700: string;
            800: string;
            900: string;
        };
        dark: {
            50: string;
            100: string;
            200: string;
            300: string;
            400: string;
            500: string;
            600: string;
            700: string;
            800: string;
            900: string;
        };
        coolGray: {
            50: string;
            100: string;
            200: string;
            300: string;
            400: string;
            500: string;
            600: string;
            700: string;
            800: string;
            900: string;
        };
        blueGray: {
            50: string;
            100: string;
            200: string;
            300: string;
            400: string;
            500: string;
            600: string;
            700: string;
            800: string;
            900: string;
        };
        danger: {};
        error: {};
        success: {};
        warning: {};
        muted: {};
        default: {};
        info: {};
        secondary: {};
        light: {};
    };
    radii: {
        none: number;
        sm: number;
        md: number;
        lg: number;
        xl: number;
        pill: number;
        full: number;
    };
} & T;
