"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _Context = require("./Context");

var _Wrapper = _interopRequireDefault(require("../Overlay/Wrapper"));

var _Wrapper2 = _interopRequireDefault(require("../Popover/Wrapper"));

var _hooks = require("./../color-mode/hooks");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const HybridProvider = ({
  children,
  options: {
    initialColorMode = 'light'
  },
  colorModeManager
}) => {
  // Popover content
  const [popoverItem, setPopoverItem] = _react.default.useState(null);

  const [popoverConfig, setPopoverConfig] = _react.default.useState({
    triggerRef: null,
    placeOverTriggerElement: undefined,
    onClose: null,
    animationDuration: 200
  }); // Overlay content


  const [overlayItem, setOverlayItem] = _react.default.useState(null);

  const [overlayConfig, setOverlayConfig] = _react.default.useState({
    disableOverlay: undefined,
    position: 'center',
    backgroundColor: '#161616',
    animationDuration: 400,
    closeOnPress: false,
    onClose: _a => {}
  }); // Color-mode content


  const {
    colorMode,
    setColorMode
  } = (0, _hooks.useModeManager)(initialColorMode, colorModeManager);

  const toggleColorMode = _react.default.useCallback(() => {
    setColorMode(colorMode === 'light' ? 'dark' : 'light');
  }, [colorMode, setColorMode]);

  return /*#__PURE__*/_react.default.createElement(_Context.HybridContext.Provider, {
    value: {
      popover: {
        setPopoverItem,
        defaultConfig: popoverConfig,
        setConfig: setPopoverConfig,
        parentComponentConfig: popoverConfig.parentComponentConfig
      },
      overlay: {
        setOverlayItem,
        defaultConfig: overlayConfig,
        setConfig: setOverlayConfig
      },
      colorMode: {
        colorMode,
        toggleColorMode,
        setColorMode
      }
    }
  }, children, /*#__PURE__*/_react.default.createElement(_Wrapper.default, {
    overlayItem: overlayItem,
    overlayConfig: overlayConfig,
    setOverlayItem: setOverlayItem
  }), /*#__PURE__*/_react.default.createElement(_Wrapper2.default, {
    popoverItem: popoverItem,
    popoverConfig: popoverConfig,
    setPopoverItem: setPopoverItem
  }));
};

var _default = HybridProvider;
exports.default = _default;
//# sourceMappingURL=HybridProvider.js.map