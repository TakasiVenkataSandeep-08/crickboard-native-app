{"version":3,"sources":["utils.ts"],"names":["getCoordinates","elementTop","elementLeft","elementWidth","elementHeight","triggerWidth","triggerHeight","placeOverTriggerElement","top","left","isRTL","I18nManager","dimensions","Dimensions","get","width","windowWidth","windowHeight","height","StatusBar","currentHeight","triggerIndent","Math","min","elementContainerStyle","right"],"mappings":";;;;;;;AAAA;;AAEO,SAASA,cAAT,CACLC,UADK,EAELC,WAFK,EAGLC,YAHK,EAILC,aAJK,EAKLC,YALK,EAMLC,aANK,EAOLC,uBAAgC,GAAG,IAP9B,EAQL;AACA,MAAIC,GAAG,GAAGP,UAAV;AACA,MAAIQ,IAAI,GAAGP,WAAX;AACA,QAAM;AAAEQ,IAAAA;AAAF,MAAYC,wBAAlB;;AACA,QAAMC,UAAU,GAAGC,wBAAWC,GAAX,CAAe,QAAf,CAAnB;;AACA,QAAM;AAAEC,IAAAA,KAAK,EAAEC;AAAT,MAAyBJ,UAA/B;AACA,QAAMK,YAAY,GAAGL,UAAU,CAACM,MAAX,IAAqBC,uBAAUC,aAAV,IAA2B,CAAhD,CAArB;AACA,QAAMC,aAAa,GAAG,CAACd,uBAAD,GAA2BD,aAA3B,GAA2C,CAAjE;;AACA,MACGI,KAAK,IAAID,IAAI,GAAGJ,YAAP,GAAsBF,YAAhC,IACC,CAACO,KAAD,IAAUD,IAAI,GAAGN,YAAP,GAAsBa,WAFnC,EAGE;AACAP,IAAAA,IAAI,GAAGa,IAAI,CAACC,GAAL,CAASP,WAAW,GAAGb,YAAvB,EAAqCM,IAAI,GAAGJ,YAA5C,CAAP;AACD,GAbD,CAcA;;;AACA,MAAIG,GAAG,GAAGS,YAAY,GAAGb,aAAzB,EAAwC;AACtCI,IAAAA,GAAG,GAAGc,IAAI,CAACC,GAAL,CACJN,YAAY,GAAGb,aAAf,GAA+BE,aAA/B,GAA+Ce,aAD3C,EAEJb,GAAG,GAAGa,aAFF,CAAN;AAID,GALD,MAKO;AACLb,IAAAA,GAAG,IAAIa,aAAP;AACD;;AACD,QAAMG,qBAAqB,GAAG;AAC5BhB,IAAAA,GAD4B;AAE5B;AACA,QAAIE,KAAK,GAAG;AAAEe,MAAAA,KAAK,EAAEhB;AAAT,KAAH,GAAqB;AAAEA,MAAAA;AAAF,KAA9B;AAH4B,GAA9B;AAKA,SAAOe,qBAAP;AACD","sourcesContent":["import { Dimensions, I18nManager, StatusBar } from 'react-native';\n\nexport function getCoordinates(\n  elementTop: any,\n  elementLeft: any,\n  elementWidth: any,\n  elementHeight: any,\n  triggerWidth: any,\n  triggerHeight: any,\n  placeOverTriggerElement: boolean = true\n) {\n  let top = elementTop;\n  let left = elementLeft;\n  const { isRTL } = I18nManager;\n  const dimensions = Dimensions.get('window');\n  const { width: windowWidth } = dimensions;\n  const windowHeight = dimensions.height - (StatusBar.currentHeight || 0);\n  const triggerIndent = !placeOverTriggerElement ? triggerHeight : 0;\n  if (\n    (isRTL && left + triggerWidth > elementWidth) ||\n    (!isRTL && left + elementWidth > windowWidth)\n  ) {\n    left = Math.min(windowWidth - elementWidth, left + triggerWidth);\n  }\n  // Flip by Y axis if element hits bottom screen border\n  if (top > windowHeight - elementHeight) {\n    top = Math.min(\n      windowHeight - elementHeight - triggerHeight - triggerIndent,\n      top + triggerIndent\n    );\n  } else {\n    top += triggerIndent;\n  }\n  const elementContainerStyle = {\n    top,\n    // Switch left to right for rtl devices\n    ...(isRTL ? { right: left } : { left }),\n  };\n  return elementContainerStyle;\n}\n"]}