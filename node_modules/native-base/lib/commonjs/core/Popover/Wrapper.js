"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _utils = require("./../Popover/utils");

var _useFadeTransition = require("../../components/composites/Transitions/useFadeTransition");

var _isEqual = _interopRequireDefault(require("lodash/isEqual"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function areEqual(prevProps, nextProps) {
  if ((0, _isEqual.default)(prevProps.popoverItem, nextProps.popoverItem) && (0, _isEqual.default)(prevProps.popoverConfig, nextProps.popoverConfig)) return true;
  return false;
}

const providerStyle = _reactNative.StyleSheet.create({
  wrapper: {
    position: 'absolute',
    top: 0,
    bottom: 0,
    right: 0,
    left: 0,
    zIndex: 999
  }
});

function Wrapper({
  popoverItem,
  popoverConfig,
  setPopoverItem
}) {
  const [state, setState] = _react.default.useState({
    elementWidth: 0,
    elementHeight: 0
  });

  const {
    fadeValue,
    fadeIn,
    fadeOut
  } = (0, _useFadeTransition.useFadeTransition)(popoverConfig.animationDuration);
  popoverItem ? fadeIn() : fadeOut();

  const [triggerElementDims, setTriggerElementDims] = _react.default.useState({
    x: 0,
    y: 0,
    width: 0,
    height: 0
  });

  const getElementDims = ({
    nativeEvent
  }) => {
    if (nativeEvent && nativeEvent.layout) {
      setState({
        elementWidth: nativeEvent.layout.width,
        elementHeight: nativeEvent.layout.height
      });
    }
  };

  _react.default.useEffect(() => {
    if (popoverConfig.triggerRef && popoverConfig.triggerRef.current) {
      popoverConfig.triggerRef.current.measureInWindow((x, y, width, height) => {
        setTriggerElementDims({
          x,
          y,
          width,
          height
        });
      });
    }
  }, [popoverConfig.triggerRef]);

  let positions = (0, _utils.getCoordinates)(triggerElementDims.y, triggerElementDims.x, state.elementWidth, state.elementHeight, triggerElementDims.width, triggerElementDims.height, popoverConfig.placeOverTriggerElement);
  return /*#__PURE__*/_react.default.createElement(_reactNative.Animated.View, {
    style: [providerStyle.wrapper, {
      opacity: fadeValue
    }],
    pointerEvents: popoverItem ? 'auto' : 'none'
  }, /*#__PURE__*/_react.default.createElement(_reactNative.TouchableWithoutFeedback, {
    onPress: () => {
      setPopoverItem(null);
      popoverConfig.onClose && popoverConfig.onClose();
    }
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: providerStyle.wrapper
  })), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: {
      position: 'absolute',
      zIndex: 99999,
      ...positions
    },
    onLayout: getElementDims
  }, popoverItem));
}

var _default = /*#__PURE__*/_react.default.memo(Wrapper, areEqual);

exports.default = _default;
//# sourceMappingURL=Wrapper.js.map