"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _useFadeTransition = require("../../components/composites/Transitions/useFadeTransition");

var _Box = _interopRequireDefault(require("../../components/primitives/Box"));

var _isEqual = _interopRequireDefault(require("lodash/isEqual"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function areEqual(prevProps, nextProps) {
  if ((0, _isEqual.default)(prevProps.overlayItem, nextProps.overlayItem) && (0, _isEqual.default)(prevProps.overlayConfig, nextProps.overlayConfig)) return true;
  return false;
}

function Wrapper({
  overlayItem,
  overlayConfig,
  setOverlayItem
}) {
  var _overlayConfig$backgr;

  const {
    fadeValue,
    fadeIn,
    fadeOut
  } = (0, _useFadeTransition.useFadeTransition)(overlayConfig.animationDuration);
  const backgroundColor = overlayConfig.disableOverlay ? 'transparent' : (_overlayConfig$backgr = overlayConfig.backgroundColor) !== null && _overlayConfig$backgr !== void 0 ? _overlayConfig$backgr : '#161616cc';
  const isSlideAnimation = overlayConfig.motionPreset === 'slide';

  const overlayStyle = _reactNative.StyleSheet.create({
    wrapper: {
      position: 'absolute',
      top: 0,
      bottom: 0,
      right: 0,
      left: 0,
      zIndex: 999
    },
    background: {
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      zIndex: 999,
      opacity: 0.5,
      backgroundColor
    },
    itemBackground: {
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      alignItems: 'center',
      justifyContent: overlayConfig.position === 'top' ? 'flex-start' : overlayConfig.position === 'bottom' ? 'flex-end' : 'center',
      zIndex: 9999
    }
  });

  const [overlayItemHeight, setOverlayItemHeight] = _react.default.useState(0);

  const [overlayItemPosition, setOverlayItemposition] = _react.default.useState(0);

  const [windowSize, setWindowSize] = _react.default.useState(0);

  const [readyToAnimate, setReadyToAnimate] = _react.default.useState(false);

  const provideSize = layoutSize => {
    setOverlayItemHeight(layoutSize.height);
  };

  const provideWindowSize = layoutSize => {
    setWindowSize(layoutSize.height);
  };

  (0, _react.useEffect)(() => {
    if (isSlideAnimation) {
      if (overlayItem && overlayItemHeight) {
        setTimeout(() => {
          setReadyToAnimate(true);
        }, 100);
      } else if (!overlayItem) {
        setReadyToAnimate(false);
      }
    }
  }, [isSlideAnimation, overlayItem, overlayItemHeight, setReadyToAnimate]);
  (0, _react.useEffect)(() => {
    if (isSlideAnimation) {
      switch (overlayConfig.position) {
        case 'top':
          setOverlayItemposition(windowSize);
          break;

        case 'bottom':
          setOverlayItemposition(overlayItemHeight);
          break;

        default:
          // as center is default position
          setOverlayItemposition(windowSize / 2 - overlayItemHeight / 2);
          break;
      }
    }
  }, [isSlideAnimation, overlayConfig.position, windowSize, overlayItemHeight, setOverlayItemposition]);

  const placeOverlayItem = () => {
    if (readyToAnimate && overlayItem) {
      const webStyle = {
        transition: "top ".concat(overlayConfig.animationDuration, "ms"),
        top: 0
      };
      return /*#__PURE__*/_react.default.createElement(_Box.default, {
        width: "100%",
        style: { ...(_reactNative.Platform.OS === 'web' && webStyle)
        }
      }, overlayItem);
    } else {
      return /*#__PURE__*/_react.default.createElement(_Box.default, {
        style: {
          opacity: 0,
          top: overlayItemPosition
        },
        onLayout: e => provideSize(e.nativeEvent.layout)
      }, overlayItem);
    }
  };

  overlayItem ? fadeIn() : fadeOut();
  return /*#__PURE__*/_react.default.createElement(_reactNative.Animated.View, {
    style: [overlayStyle.wrapper, {
      opacity: fadeValue
    }],
    pointerEvents: overlayItem ? overlayConfig.disableOverlay ? 'box-none' : 'auto' : 'none'
  }, /*#__PURE__*/_react.default.createElement(_reactNative.TouchableWithoutFeedback, {
    onPress: () => {
      if (overlayConfig.closeOnPress) {
        setOverlayItem(null);
        overlayConfig.onClose ? overlayConfig.onClose(false) : null;
      }
    }
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: overlayStyle.background
  })), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    pointerEvents: "box-none",
    style: overlayStyle.itemBackground,
    onLayout: e => provideWindowSize(e.nativeEvent.layout)
  }, isSlideAnimation ? placeOverlayItem() : overlayItem));
}

var _default = /*#__PURE__*/_react.default.memo(Wrapper, areEqual);

exports.default = _default;
//# sourceMappingURL=Wrapper.js.map