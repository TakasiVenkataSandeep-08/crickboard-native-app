{"version":3,"sources":["index.tsx"],"names":["Typeahead","options","renderItem","onChangeText","toggleIcon","dropdownHeight","numberOfItems","onSelectedItemChange","inputValue","getOptionLabel","props","ref","inputItems","setInputItems","React","useState","layoutProps","newProps","layoutPropsList","colorMode","tempOptions","map","value","_ind","push","isOpen","getInputProps","getMenuItemProps","getMenuProps","getToggleButtonProps","items","itemToString","item","toString","onInputValueChange","filter","toLowerCase","includes","toggleIconSetter","dropdownTop","setDropDownTop","onLayout","event","height","nativeEvent","layout","length","slice","index","memo"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, forwardRef } from 'react';\nimport { ScrollView } from 'react-native';\nimport Box from '../../primitives/Box';\nimport Input from '../../primitives/Input';\nimport Button from '../../primitives/Button';\nimport Link from '../../primitives/Link';\nimport Text from '../../primitives/Text';\nimport { useColorMode } from './../../../core';\nimport { useTypeahead } from './useTypeahead';\nimport { extractInObject } from '../../../theme/tools';\nimport { ITypeaheadProps, layoutPropsList } from './types';\n\nconst Typeahead = (\n  {\n    options,\n    renderItem,\n    onChangeText,\n    toggleIcon,\n    dropdownHeight,\n    numberOfItems,\n    onSelectedItemChange,\n    inputValue,\n    getOptionLabel,\n    ...props\n  }: ITypeaheadProps,\n  ref: any\n) => {\n  const [inputItems, setInputItems] = React.useState(options);\n  const [layoutProps, newProps] = extractInObject(props, layoutPropsList);\n  const { colorMode } = useColorMode();\n  let tempOptions: any[] = [];\n  if (getOptionLabel) {\n    options.map((value: any, _ind: number) => {\n      tempOptions.push(getOptionLabel(value));\n    });\n    options = tempOptions;\n  }\n\n  const {\n    isOpen,\n    getInputProps,\n    getMenuItemProps,\n    getMenuProps,\n    getToggleButtonProps,\n  } = useTypeahead({\n    items: inputItems,\n    itemToString: (item) => item.toString(),\n    onInputValueChange: ({ inputValue }) => {\n      onChangeText && onChangeText(inputValue);\n      setInputItems(\n        options.filter((item: any) =>\n          item.toLowerCase().includes(inputValue.toLowerCase())\n        )\n      );\n    },\n    onSelectedItemChange,\n  });\n  const toggleIconSetter = () => {\n    if (typeof toggleIcon === 'function')\n      return toggleIcon({\n        isOpen: isOpen && getInputProps(inputValue, onChangeText).value !== '',\n      });\n    return toggleIcon;\n  };\n\n  // Causing App to crash , commenting this might have caused future bugs , might need a revisit\n  // React.useEffect(() => {\n  //   if (getInputProps(inputValue, onChangeText).value === '') {\n  //     // getToggleButtonProps().onPress();\n  //   }\n  // }, [inputValue, onChangeText, getInputProps, getToggleButtonProps]);\n\n  const [dropdownTop, setDropDownTop]: any = useState(55);\n\n  const onLayout = useCallback((event) => {\n    const { height } = event.nativeEvent.layout;\n    setDropDownTop(height % 2 === 0 ? height + 1 : height); //not to use theme values\n  }, []);\n  return (\n    <Box width=\"100%\" flexDirection=\"row\" onLayout={onLayout} {...layoutProps}>\n      <Box flex={1}>\n        <Input\n          {...newProps}\n          {...getInputProps(inputValue, onChangeText)}\n          InputRightElement={\n            <Button variant=\"unstyled\" m={0} p={0} {...getToggleButtonProps()}>\n              {toggleIconSetter()}\n            </Button>\n          }\n          ref={ref}\n        />\n      </Box>\n      <Box\n        position=\"absolute\"\n        top={dropdownTop}\n        width=\"100%\"\n        height={dropdownHeight ? dropdownHeight : 200}\n        {...getMenuProps()}\n      >\n        <ScrollView>\n          {isOpen &&\n            getInputProps(inputValue, onChangeText).value !== '' &&\n            (numberOfItems && numberOfItems < inputItems.length\n              ? inputItems.slice(0, numberOfItems)\n              : inputItems\n            ).map((item: any, index: number) => (\n              <Link\n                isUnderlined={false}\n                key={`${item}${index}`}\n                {...getMenuItemProps(item, index)}\n              >\n                {renderItem ? (\n                  renderItem(item)\n                ) : (\n                  <Box\n                    flex={1}\n                    bg={colorMode === 'light' ? 'gray.100' : 'gray.600'}\n                    p={4}\n                  >\n                    <Text>{item}</Text>\n                  </Box>\n                )}\n              </Link>\n            ))}\n        </ScrollView>\n      </Box>\n    </Box>\n  );\n};\n\nexport default React.memo(forwardRef(Typeahead));\nexport { useTypeahead };\n"]}