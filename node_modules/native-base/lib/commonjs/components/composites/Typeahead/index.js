"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "useTypeahead", {
  enumerable: true,
  get: function () {
    return _useTypeahead.useTypeahead;
  }
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _Box = _interopRequireDefault(require("../../primitives/Box"));

var _Input = _interopRequireDefault(require("../../primitives/Input"));

var _Button = _interopRequireDefault(require("../../primitives/Button"));

var _Link = _interopRequireDefault(require("../../primitives/Link"));

var _Text = _interopRequireDefault(require("../../primitives/Text"));

var _core = require("./../../../core");

var _useTypeahead = require("./useTypeahead");

var _tools = require("../../../theme/tools");

var _types = require("./types");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const Typeahead = ({
  options,
  renderItem,
  onChangeText,
  toggleIcon,
  dropdownHeight,
  numberOfItems,
  onSelectedItemChange,
  inputValue,
  getOptionLabel,
  ...props
}, ref) => {
  const [inputItems, setInputItems] = _react.default.useState(options);

  const [layoutProps, newProps] = (0, _tools.extractInObject)(props, _types.layoutPropsList);
  const {
    colorMode
  } = (0, _core.useColorMode)();
  let tempOptions = [];

  if (getOptionLabel) {
    options.map((value, _ind) => {
      tempOptions.push(getOptionLabel(value));
    });
    options = tempOptions;
  }

  const {
    isOpen,
    getInputProps,
    getMenuItemProps,
    getMenuProps,
    getToggleButtonProps
  } = (0, _useTypeahead.useTypeahead)({
    items: inputItems,
    itemToString: item => item.toString(),
    onInputValueChange: ({
      inputValue
    }) => {
      onChangeText && onChangeText(inputValue);
      setInputItems(options.filter(item => item.toLowerCase().includes(inputValue.toLowerCase())));
    },
    onSelectedItemChange
  });

  const toggleIconSetter = () => {
    if (typeof toggleIcon === 'function') return toggleIcon({
      isOpen: isOpen && getInputProps(inputValue, onChangeText).value !== ''
    });
    return toggleIcon;
  }; // Causing App to crash , commenting this might have caused future bugs , might need a revisit
  // React.useEffect(() => {
  //   if (getInputProps(inputValue, onChangeText).value === '') {
  //     // getToggleButtonProps().onPress();
  //   }
  // }, [inputValue, onChangeText, getInputProps, getToggleButtonProps]);


  const [dropdownTop, setDropDownTop] = (0, _react.useState)(55);
  const onLayout = (0, _react.useCallback)(event => {
    const {
      height
    } = event.nativeEvent.layout;
    setDropDownTop(height % 2 === 0 ? height + 1 : height); //not to use theme values
  }, []);
  return /*#__PURE__*/_react.default.createElement(_Box.default, _extends({
    width: "100%",
    flexDirection: "row",
    onLayout: onLayout
  }, layoutProps), /*#__PURE__*/_react.default.createElement(_Box.default, {
    flex: 1
  }, /*#__PURE__*/_react.default.createElement(_Input.default, _extends({}, newProps, getInputProps(inputValue, onChangeText), {
    InputRightElement: /*#__PURE__*/_react.default.createElement(_Button.default, _extends({
      variant: "unstyled",
      m: 0,
      p: 0
    }, getToggleButtonProps()), toggleIconSetter()),
    ref: ref
  }))), /*#__PURE__*/_react.default.createElement(_Box.default, _extends({
    position: "absolute",
    top: dropdownTop,
    width: "100%",
    height: dropdownHeight ? dropdownHeight : 200
  }, getMenuProps()), /*#__PURE__*/_react.default.createElement(_reactNative.ScrollView, null, isOpen && getInputProps(inputValue, onChangeText).value !== '' && (numberOfItems && numberOfItems < inputItems.length ? inputItems.slice(0, numberOfItems) : inputItems).map((item, index) => /*#__PURE__*/_react.default.createElement(_Link.default, _extends({
    isUnderlined: false,
    key: "".concat(item).concat(index)
  }, getMenuItemProps(item, index)), renderItem ? renderItem(item) : /*#__PURE__*/_react.default.createElement(_Box.default, {
    flex: 1,
    bg: colorMode === 'light' ? 'gray.100' : 'gray.600',
    p: 4
  }, /*#__PURE__*/_react.default.createElement(_Text.default, null, item)))))));
};

var _default = /*#__PURE__*/_react.default.memo( /*#__PURE__*/(0, _react.forwardRef)(Typeahead));

exports.default = _default;
//# sourceMappingURL=index.js.map