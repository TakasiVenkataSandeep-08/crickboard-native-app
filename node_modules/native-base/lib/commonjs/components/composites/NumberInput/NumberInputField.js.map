{"version":3,"sources":["NumberInputField.tsx"],"names":["NumberInputFiled","isDisabled","props","ref","handleChange","handleChangeWithoutCheck","numberInputStepper","numberInputValue","context","React","useContext","NumberInputContext","changeHandler","inputValue","minusIndex","indexOf","replace","value","parseInt","blurHandler","memo","forwardRef"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;;;;;AAEA,MAAMA,gBAAgB,GAAG,CACvB;AAAEC,EAAAA,UAAF;AAAc,KAAGC;AAAjB,CADuB,EAEvBC,GAFuB,KAGpB;AACH,QAAM;AACJC,IAAAA,YADI;AAEJC,IAAAA,wBAFI;AAGJC,IAAAA,kBAHI;AAIJC,IAAAA,gBAJI;AAKJ,OAAGC;AALC,MASFC,eAAMC,UAAN,CAAiBC,2BAAjB,CATJ;;AAUA,QAAMC,aAAa,GAAIC,UAAD,IAAqB;AACzC,QAAIC,UAAU,GAAGD,UAAU,CAACE,OAAX,CAAmB,GAAnB,CAAjB;;AACA,QAAID,UAAU,KAAK,CAAC,CAAhB,IAAqBA,UAAU,KAAK,CAAxC,EAA2C;AACzCD,MAAAA,UAAU,GAAGA,UAAU,CAACG,OAAX,CAAmB,GAAnB,EAAwB,EAAxB,CAAb;AACAH,MAAAA,UAAU,GAAG,MAAMA,UAAnB;AACD;;AACD,UAAMI,KAAK,GAAGC,QAAQ,CAACL,UAAD,EAAa,EAAb,CAAtB;AACA,QAAII,KAAJ,EAAWZ,wBAAwB,IAAIA,wBAAwB,CAACY,KAAD,CAApD,CAAX,KACKZ,wBAAwB,IAAIA,wBAAwB,CAAC,CAAD,CAApD;AACN,GATD;;AAUA,QAAMc,WAAW,GAAG,MAAM;AACxB,QAAIZ,gBAAJ,EAAsBH,YAAY,IAAIA,YAAY,CAACG,gBAAD,CAA5B;AACvB,GAFD;;AAGA,sBACE,6BAAC,cAAD;AACE,IAAA,CAAC,EAAE,CADL;AAEE,IAAA,EAAE,EAAE,CAFN,CAGE;AAHF;AAIE,IAAA,KAAK,EAAC;AAJR,KAKMC,OALN,EAMMN,KANN;AAOE,IAAA,MAAM,EAAE,MAAMiB,WAAW,EAP3B;AAQE,IAAA,UAAU,EAAElB,UAAU,IAAIO,OAAO,CAACP,UARpC;AASE,IAAA,YAAY,EAAGY,UAAD,IAAgBD,aAAa,CAACC,UAAD,CAT7C;AAUE,IAAA,YAAY,EAAC,SAVf;AAWE,IAAA,KAAK,YAAKN,gBAAL,CAXP;AAYE,IAAA,iBAAiB,EAAED,kBAZrB;AAaE,IAAA,GAAG,EAAEH;AAbP,KADF;AAiBD,CA5CD;;4BA8CeM,eAAMW,IAAN,eAAWX,eAAMY,UAAN,CAAiBrB,gBAAjB,CAAX,C","sourcesContent":["import React from 'react';\nimport Input from '../../primitives/Input';\nimport type { INumberInputContext, INumberInputFieldProps } from './types';\nimport { NumberInputContext } from './Context';\n\nconst NumberInputFiled = (\n  { isDisabled, ...props }: INumberInputFieldProps,\n  ref: any\n) => {\n  const {\n    handleChange,\n    handleChangeWithoutCheck,\n    numberInputStepper,\n    numberInputValue,\n    ...context\n  }: INumberInputContext & {\n    handleChange?: (value: string | number) => void;\n    numberInputStepper?: any;\n  } = React.useContext(NumberInputContext);\n  const changeHandler = (inputValue: any) => {\n    let minusIndex = inputValue.indexOf('-');\n    if (minusIndex !== -1 && minusIndex !== 0) {\n      inputValue = inputValue.replace('-', '');\n      inputValue = '-' + inputValue;\n    }\n    const value = parseInt(inputValue, 10);\n    if (value) handleChangeWithoutCheck && handleChangeWithoutCheck(value);\n    else handleChangeWithoutCheck && handleChangeWithoutCheck(0);\n  };\n  const blurHandler = () => {\n    if (numberInputValue) handleChange && handleChange(numberInputValue);\n  };\n  return (\n    <Input\n      p={0}\n      pl={2}\n      // TODO: shouldn't provide width like this.\n      width=\"70%\"\n      {...context}\n      {...props}\n      onBlur={() => blurHandler()}\n      isDisabled={isDisabled || context.isDisabled}\n      onChangeText={(inputValue) => changeHandler(inputValue)}\n      keyboardType=\"numeric\"\n      value={`${numberInputValue}`}\n      InputRightElement={numberInputStepper}\n      ref={ref}\n    />\n  );\n};\n\nexport default React.memo(React.forwardRef(NumberInputFiled));\n"]}