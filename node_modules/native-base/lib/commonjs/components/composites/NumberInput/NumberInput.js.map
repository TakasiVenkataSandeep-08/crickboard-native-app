{"version":3,"sources":["NumberInput.tsx"],"names":["NumberInput","children","props","defaultValue","keepWithinRange","value","min","max","onChange","newProps","formControlContext","React","useContext","FormControlContext","numberInputValue","setNumberInputValue","useState","parseInt","numberInputStepper","setNumberInputStepper","handleChange","newValue","temp","handleChangeWithoutCheck","memo"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;AAEA,MAAMA,WAAW,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAY,KAAGC;AAAf,CAAD,KAA+C;AACjE,QAAM;AACJC,IAAAA,YADI;AAEJC,IAAAA,eAFI;AAGJC,IAAAA,KAHI;AAIJC,IAAAA,GAJI;AAKJC,IAAAA,GALI;AAMJC,IAAAA,QANI;AAOJ,OAAGC;AAPC,MAQF,0BAAc,aAAd,EAA6BP,KAA7B,CARJ;;AASA,QAAMQ,kBAAuC,GAAGC,eAAMC,UAAN,CAC9CC,+BAD8C,CAAhD;;AAGA,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CJ,eAAMK,QAAN,CAC9CC,QAAQ,CAACZ,KAAK,IAAIF,YAAV,EAAwB,EAAxB,CADsC,CAAhD;;AAGA,QAAM,CAACe,kBAAD,EAAqBC,qBAArB,IAA8CR,eAAMK,QAAN,CAAe,IAAf,CAApD;;AACA,QAAMI,YAAY,GAAIC,QAAD,IAAsB;AACzC,UAAMC,IAAI,GAAGD,QAAb;AACAN,IAAAA,mBAAmB,CAACO,IAAD,CAAnB;;AACA,QAAIlB,eAAJ,EAAqB;AACnB,UAAIiB,QAAQ,GAAGf,GAAf,EAAoBS,mBAAmB,CAACT,GAAD,CAAnB,CAApB,KACK,IAAIe,QAAQ,GAAGd,GAAf,EAAoBQ,mBAAmB,CAACR,GAAD,CAAnB;AAC1B,KANwC,CAOzC;;;AACAC,IAAAA,QAAQ,IAAIA,QAAQ,CAACc,IAAD,CAApB;AACD,GATD;;AAUA,QAAMC,wBAAwB,GAAIF,QAAD,IAAsB;AACrD,UAAMC,IAAI,GAAGD,QAAb;AACAN,IAAAA,mBAAmB,CAACO,IAAD,CAAnB;AACD,GAHD;;AAIA,sBACE,6BAAC,2BAAD,CAAoB,QAApB;AACE,IAAA,KAAK,EAAE,EACL,GAAGZ,kBADE;AAEL,SAAGD,QAFE;AAGLH,MAAAA,GAHK;AAILC,MAAAA,GAJK;AAKLa,MAAAA,YALK;AAMLG,MAAAA,wBANK;AAOLT,MAAAA,gBAPK;AAQLI,MAAAA,kBARK;AASLC,MAAAA;AATK;AADT,KAaGlB,QAbH,CADF;AAiBD,CAhDD;;4BAkDeU,eAAMa,IAAN,CAAWxB,WAAX,C","sourcesContent":["import React from 'react';\nimport { useThemeProps } from '../../../hooks';\nimport { FormControlContext, IFormControlContext } from '../FormControl';\nimport type { INumberInputProps } from './types';\nimport { NumberInputContext } from './Context';\n\nconst NumberInput = ({ children, ...props }: INumberInputProps) => {\n  const {\n    defaultValue,\n    keepWithinRange,\n    value,\n    min,\n    max,\n    onChange,\n    ...newProps\n  } = useThemeProps('NumberInput', props);\n  const formControlContext: IFormControlContext = React.useContext(\n    FormControlContext\n  );\n  const [numberInputValue, setNumberInputValue] = React.useState(\n    parseInt(value || defaultValue, 10)\n  );\n  const [numberInputStepper, setNumberInputStepper] = React.useState(null);\n  const handleChange = (newValue: number) => {\n    const temp = newValue;\n    setNumberInputValue(temp);\n    if (keepWithinRange) {\n      if (newValue < min) setNumberInputValue(min);\n      else if (newValue > max) setNumberInputValue(max);\n    }\n    //NOTE: only calling onChange on stepper click or blur event of input.\n    onChange && onChange(temp);\n  };\n  const handleChangeWithoutCheck = (newValue: number) => {\n    const temp = newValue;\n    setNumberInputValue(temp);\n  };\n  return (\n    <NumberInputContext.Provider\n      value={{\n        ...formControlContext,\n        ...newProps,\n        min,\n        max,\n        handleChange,\n        handleChangeWithoutCheck,\n        numberInputValue,\n        numberInputStepper,\n        setNumberInputStepper,\n      }}\n    >\n      {children}\n    </NumberInputContext.Provider>\n  );\n};\n\nexport default React.memo(NumberInput);\n"]}