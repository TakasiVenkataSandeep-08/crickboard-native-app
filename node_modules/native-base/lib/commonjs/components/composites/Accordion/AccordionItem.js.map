{"version":3,"sources":["AccordionItem.tsx"],"names":["AccordionItem","children","index","pIndex","isDisabled","props","cIndex","changeHandler","React","useContext","AccordionContext","newProps","isOpen","includes","onClose","cb","onOpen","childSetter","isExpanded","memo"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;AAEA,MAAMA,aAAa,GAAG,CAAC;AACrBC,EAAAA,QADqB;AAErBC,EAAAA,KAAK,EAAEC,MAAM,GAAG,CAFK;AAGrBC,EAAAA,UAHqB;AAIrB,KAAGC;AAJkB,CAAD,KAKK;AACzB,QAAM;AACJH,IAAAA,KAAK,EAAEI,MADH;AAEJC,IAAAA;AAFI,MAGsBC,eAAMC,UAAN,CAAiBC,yBAAjB,CAH5B;;AAIA,QAAM,EAAE,GAAGC;AAAL,MAAkB,0BAAc,eAAd,EAA+BN,KAA/B,CAAxB;AAEA,QAAMO,MAAM,GAAGN,MAAH,aAAGA,MAAH,uBAAGA,MAAM,CAAEO,QAAR,CAAiBV,MAAjB,CAAf;;AACA,QAAMW,OAAO,GAAIC,EAAD,IAAqB;AACnCR,IAAAA,aAAa,IAAIA,aAAa,CAAC,KAAD,EAAQJ,MAAR,CAA9B;AACAY,IAAAA,EAAE,IAAIA,EAAE,EAAR;AACD,GAHD;;AAIA,QAAMC,MAAM,GAAID,EAAD,IAAqB;AAClCR,IAAAA,aAAa,IAAIA,aAAa,CAAC,IAAD,EAAOJ,MAAP,CAA9B;AACAY,IAAAA,EAAE,IAAIA,EAAE,EAAR;AACD,GAHD;;AAIA,QAAME,WAAW,GAAG,MAAM;AACxB,QAAI,OAAOhB,QAAP,KAAoB,UAAxB,EACE,OAAOA,QAAQ,CAAC;AAAEiB,MAAAA,UAAU,EAAEN,MAAd;AAAsBR,MAAAA;AAAtB,KAAD,CAAf;AACF,WAAOH,QAAP;AACD,GAJD;;AAKA,sBACE,6BAAC,6BAAD,CAAsB,QAAtB;AACE,IAAA,KAAK,EAAE;AACLC,MAAAA,KAAK,EAAEC,MADF;AAELS,MAAAA,MAFK;AAGLR,MAAAA,UAHK;AAILU,MAAAA,OAJK;AAKLE,MAAAA;AALK;AADT,kBASE,6BAAC,YAAD,EAASL,QAAT,EAAoBM,WAAW,EAA/B,CATF,CADF;AAaD,CAvCD;;4BAyCeT,eAAMW,IAAN,CAAWnB,aAAX,C","sourcesContent":["import React from 'react';\nimport Box from '../../primitives/Box';\nimport { AccordionContext, AccordionItemContext } from './Context';\nimport type { IAccordionItemProps, IAccordionContextProps } from './types';\nimport { useThemeProps } from '../../../hooks';\n\nconst AccordionItem = ({\n  children,\n  index: pIndex = 0,\n  isDisabled,\n  ...props\n}: IAccordionItemProps) => {\n  const {\n    index: cIndex,\n    changeHandler,\n  }: IAccordionContextProps = React.useContext(AccordionContext);\n  const { ...newProps } = useThemeProps('AccordionItem', props);\n\n  const isOpen = cIndex?.includes(pIndex);\n  const onClose = (cb?: () => void) => {\n    changeHandler && changeHandler(false, pIndex);\n    cb && cb();\n  };\n  const onOpen = (cb?: () => void) => {\n    changeHandler && changeHandler(true, pIndex);\n    cb && cb();\n  };\n  const childSetter = () => {\n    if (typeof children === 'function')\n      return children({ isExpanded: isOpen, isDisabled });\n    return children;\n  };\n  return (\n    <AccordionItemContext.Provider\n      value={{\n        index: pIndex,\n        isOpen,\n        isDisabled,\n        onClose,\n        onOpen,\n      }}\n    >\n      <Box {...newProps}>{childSetter()}</Box>\n    </AccordionItemContext.Provider>\n  );\n};\n\nexport default React.memo(AccordionItem);\n"]}