{"version":3,"sources":["PinInput.tsx"],"names":["PinInput","children","props","padding","remProps","themeTools","extractInObject","manageFocus","defaultValue","value","space","onChange","newProps","formControlContext","React","useContext","FormControlContext","RefList","setRefList","ref","index","pinInputValue","setPinInputValue","useState","handleChange","newValue","fieldIndex","temp","join","current","focus","length","handleMultiValueChange","pinFieldLength","newValueLength","splicedValue","splice","Platform","OS","_n","i","JSON","stringify","parseInt","indexSetter","allChildren","pinInputFiledCounter","Children","map","child","cloneElement","memo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { HStack } from '../../primitives/Stack';\nimport { useThemeProps } from '../../../hooks';\nimport type { IPinInputProps } from './types';\nimport { FormControlContext, IFormControlContext } from '../FormControl';\nimport { Platform } from 'react-native';\nimport { PinInputContext } from './Context';\nimport { themeTools } from '../../../theme';\nimport remove from 'lodash/remove';\n\nconst PinInput = ({ children, ...props }: IPinInputProps) => {\n  let [padding, remProps] = themeTools.extractInObject(props, [\n    'p',\n    'px',\n    'py',\n    'pt',\n    'pb',\n    'pl',\n    'pr',\n  ]);\n  const {\n    manageFocus,\n    defaultValue,\n    value,\n    space,\n    onChange,\n    ...newProps\n  } = useThemeProps('PinInput', remProps);\n  const formControlContext: IFormControlContext = React.useContext(\n    FormControlContext\n  );\n  const RefList: Array<any> = [];\n  const setRefList = (ref: any, index: number) => {\n    RefList[index] = ref;\n  };\n  const [pinInputValue, setPinInputValue] = React.useState(\n    value || defaultValue\n  );\n  const handleChange = (newValue: string, fieldIndex: number) => {\n    let temp = (pinInputValue && [...pinInputValue]) || [];\n    temp[fieldIndex] = newValue;\n    setPinInputValue(temp.join(''));\n    onChange && onChange(temp.join(''));\n    if (newValue === '' && manageFocus && fieldIndex - 1 > -1)\n      RefList[fieldIndex - 1].current.focus();\n    else if (newValue && manageFocus && fieldIndex + 1 < RefList.length)\n      RefList[fieldIndex + 1].current.focus();\n    return temp.join('');\n  };\n  const handleMultiValueChange = (newValue: string, fieldIndex: number) => {\n    const pinFieldLength = RefList.length;\n    const newValueLength = newValue.length;\n    if (newValueLength >= pinFieldLength && newValueLength > 2) {\n      let splicedValue = newValue ? [...newValue] : [];\n      splicedValue.splice(pinFieldLength);\n      RefList[pinFieldLength - 1].current.focus();\n      setPinInputValue(splicedValue.join(''));\n      onChange && onChange(splicedValue.join(''));\n    }\n    if (Platform.OS !== 'ios') {\n      const temp = pinInputValue ? [...pinInputValue] : [];\n      if (newValue === '') {\n        // Handling Backward focus.\n        temp[fieldIndex];\n        remove(temp, (_n, i) => i === fieldIndex);\n        if (manageFocus && fieldIndex - 1 > -1)\n          RefList[fieldIndex - 1].current.focus();\n      } else {\n        temp[fieldIndex] = JSON.stringify(parseInt(newValue, 10) % 10);\n        if (manageFocus && fieldIndex + 1 < RefList.length)\n          RefList[fieldIndex + 1].current.focus();\n      }\n      setPinInputValue(temp.join(''));\n      onChange && onChange(temp.join(''));\n    }\n  };\n\n  const indexSetter = (allChildren: JSX.Element | JSX.Element[]) => {\n    let pinInputFiledCounter = -1;\n    return React.Children.map(allChildren, (child: JSX.Element) => {\n      pinInputFiledCounter++;\n      return React.cloneElement(\n        child,\n        {\n          fieldIndex: pinInputFiledCounter,\n        },\n        child.props.children\n      );\n    });\n  };\n\n  return (\n    <PinInputContext.Provider\n      value={{\n        ...formControlContext,\n        ...newProps,\n        setRefList,\n        handleChange,\n        handleMultiValueChange,\n        value: pinInputValue,\n      }}\n    >\n      {children && (\n        <HStack flexDirection=\"row\" space={space} {...padding}>\n          {indexSetter(children)}\n        </HStack>\n      )}\n    </PinInputContext.Provider>\n  );\n};\n\nexport default React.memo(PinInput);\n"]}