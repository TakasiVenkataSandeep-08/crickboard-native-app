{"version":3,"sources":["PinInputField.tsx"],"names":["PinInputFiled","fieldIndex","defaultValue","pDefaultValue","props","handleChange","value","cValue","setRefList","cDefaultValue","handleMultiValueChange","context","React","useContext","PinInputContext","keyPressHandler","event","nativeEvent","key","textChangeHandler","myRef","useRef","useEffect","memo"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;;;;;AAEA,MAAMA,aAAa,GAAG,CAAC;AACrBC,EAAAA,UAAU,GAAG,CADQ;AAErBC,EAAAA,YAAY,EAAEC,aAFO;AAGrB,KAAGC;AAHkB,CAAD,KAIK;AACzB,MAAI;AACFC,IAAAA,YADE;AAEFC,IAAAA,KAAK,EAAEC,MAFL;AAGFC,IAAAA,UAHE;AAIFN,IAAAA,YAAY,EAAEO,aAJZ;AAKFC,IAAAA,sBALE;AAMF,OAAGC;AAND,MAOkBC,eAAMC,UAAN,CAAiBC,wBAAjB,CAPtB;;AAQAL,EAAAA,aAAa,GAAGA,aAAa,IAAIA,aAAa,CAACR,UAAD,CAA9C;AACAM,EAAAA,MAAM,GAAGA,MAAM,IAAIA,MAAM,CAACN,UAAD,CAAzB;;AAEA,QAAMc,eAAe,GAAIC,KAAD,IAAgB;AACtC,QAAIA,KAAK,CAACC,WAAN,CAAkBC,GAAlB,IAAyB,CAAzB,IAA8BF,KAAK,CAACC,WAAN,CAAkBC,GAAlB,IAAyB,CAA3D,EAA8D;AAC5Db,MAAAA,YAAY,IAAIA,YAAY,CAACW,KAAK,CAACC,WAAN,CAAkBC,GAAnB,EAAwBjB,UAAxB,CAA5B;AACD,KAFD,MAEO,IAAIe,KAAK,CAACC,WAAN,CAAkBC,GAAlB,KAA0B,WAA9B,EAA2C;AAChDb,MAAAA,YAAY,IAAIA,YAAY,CAAC,EAAD,EAAKJ,UAAL,CAA5B;AACD;AACF,GAND;;AAOA,QAAMkB,iBAAiB,GAAIb,KAAD,IAAgB;AACxC;AACAI,IAAAA,sBAAsB,IAAIA,sBAAsB,CAACJ,KAAD,EAAQL,UAAR,CAAhD;AACD,GAHD;;AAIA,QAAMmB,KAAK,GAAGR,eAAMS,MAAN,CAAa,IAAb,CAAd;;AACAT,iBAAMU,SAAN,CAAgB,MAAM;AACpBd,IAAAA,UAAU,IAAIA,UAAU,CAACY,KAAD,EAAQnB,UAAR,CAAxB;AACD,GAFD,EAEG,CAACmB,KAAD,EAAQnB,UAAR,EAAoBO,UAApB,CAFH;;AAIA,sBACE,6BAAC,cAAD;AACE,IAAA,GAAG,EAAEY;AADP,KAEMT,OAFN,EAGMP,KAHN;AAIE,IAAA,UAAU,EAAGY,KAAD,IAAWD,eAAe,CAACC,KAAD,CAJxC;AAKE,IAAA,YAAY,EAAGV,KAAD,IAAWa,iBAAiB,CAACb,KAAD,CAL5C;AAME,IAAA,YAAY,EAAC,SANf;AAOE,IAAA,YAAY,EAAEH,aAAa,IAAIM,aAPjC;AAQE,IAAA,KAAK,EAAEF;AART,KADF;AAYD,CA5CD;;4BA8CeK,eAAMW,IAAN,CAAWvB,aAAX,C","sourcesContent":["import React from 'react';\nimport Input from '../../primitives/Input';\nimport type { IPinInputFieldProps, IPinInputContext } from './types';\nimport { PinInputContext } from './Context';\n\nconst PinInputFiled = ({\n  fieldIndex = 0,\n  defaultValue: pDefaultValue,\n  ...props\n}: IPinInputFieldProps) => {\n  let {\n    handleChange,\n    value: cValue,\n    setRefList,\n    defaultValue: cDefaultValue,\n    handleMultiValueChange,\n    ...context\n  }: IPinInputContext = React.useContext(PinInputContext);\n  cDefaultValue = cDefaultValue && cDefaultValue[fieldIndex];\n  cValue = cValue && cValue[fieldIndex];\n\n  const keyPressHandler = (event: any) => {\n    if (event.nativeEvent.key >= 0 && event.nativeEvent.key <= 9) {\n      handleChange && handleChange(event.nativeEvent.key, fieldIndex);\n    } else if (event.nativeEvent.key === 'Backspace') {\n      handleChange && handleChange('', fieldIndex);\n    }\n  };\n  const textChangeHandler = (value: any) => {\n    // Also used to handle change for Android.\n    handleMultiValueChange && handleMultiValueChange(value, fieldIndex);\n  };\n  const myRef = React.useRef(null);\n  React.useEffect(() => {\n    setRefList && setRefList(myRef, fieldIndex);\n  }, [myRef, fieldIndex, setRefList]);\n\n  return (\n    <Input\n      ref={myRef}\n      {...context}\n      {...props}\n      onKeyPress={(event) => keyPressHandler(event)}\n      onChangeText={(value) => textChangeHandler(value)}\n      keyboardType=\"numeric\"\n      defaultValue={pDefaultValue || cDefaultValue}\n      value={cValue}\n    />\n  );\n};\n\nexport default React.memo(PinInputFiled);\n"]}