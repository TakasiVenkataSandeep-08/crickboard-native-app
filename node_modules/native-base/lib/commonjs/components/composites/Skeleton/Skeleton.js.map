{"version":3,"sources":["Skeleton.tsx"],"names":["Skeleton","allProps","ref","isDomUsable","variant","children","props","newProps","style","skeletonColor","baseColor","blinkAnim","React","useRef","Animated","Value","current","useEffect","blink","sequence","timing","toValue","duration","useNativeDriver","Platform","OS","loop","start","skeletonStyle","skeleton","position","top","bottom","height","width","borderRadius","backgroundColor","opacity","transform","scaleY","undefined","memo","forwardRef"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;AAGA,MAAMA,QAAQ,GAAG,CAACC,QAAD,EAA2BC,GAA3B,KAAwC;AAAA;;AACvD,QAAMC,WAAW,GAAG,uBAApB;AACA,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,QAAX;AAAqB,OAAGC;AAAxB,MAAkCL,QAAxC;AACA,QAAMM,QAAQ,GAAG,0BAAc,UAAd,EAA0BD,KAA1B,CAAjB;AACA,QAAM;AAAEE,IAAAA,KAAF;AAASC,IAAAA,aAAT;AAAwBC,IAAAA;AAAxB,MAAsCH,QAA5C;;AACA,QAAMI,SAAS,GAAGC,eAAMC,MAAN,CAAa,IAAIC,sBAASC,KAAb,CAAmB,CAAnB,CAAb,EAAoCC,OAAtD;;AAEAJ,iBAAMK,SAAN,CAAgB,MAAM;AACpB,QAAId,WAAJ,EAAiB;AACf,YAAMe,KAAK,GAAGJ,sBAASK,QAAT,CAAkB,CAC9BL,sBAASM,MAAT,CAAgBT,SAAhB,EAA2B;AACzBU,QAAAA,OAAO,EAAE,CADgB;AAEzBC,QAAAA,QAAQ,EAAE,IAFe;AAGzBC,QAAAA,eAAe,EAAEC,sBAASC,EAAT,KAAgB;AAHR,OAA3B,CAD8B,EAM9BX,sBAASM,MAAT,CAAgBT,SAAhB,EAA2B;AACzBU,QAAAA,OAAO,EAAE,CADgB;AAEzBC,QAAAA,QAAQ,EAAE,IAFe;AAGzBC,QAAAA,eAAe,EAAEC,sBAASC,EAAT,KAAgB;AAHR,OAA3B,CAN8B,CAAlB,CAAd;;AAYAX,4BAASY,IAAT,CAAcR,KAAd,EAAqBS,KAArB;AACD;AACF,GAhBD,EAgBG,CAAChB,SAAD,EAAYR,WAAZ,CAhBH;;AAkBA,QAAMyB,aAAkB,GAAG;AACzBC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,QAAQ,EAAE,UADF;AAERC,MAAAA,GAAG,EAAE,CAFG;AAGRC,MAAAA,MAAM,EAAE,CAHA;AAIRC,MAAAA,MAAM,EAAE,MAJA;AAKRC,MAAAA,KAAK,EAAE,MALC;AAMRC,MAAAA,YAAY,EAAE/B,OAAO,KAAK,QAAZ,GAAuB,GAAvB,GAA6B,CANnC;AAORgC,MAAAA,eAAe,EAAE3B,aAPT;AAQR4B,MAAAA,OAAO,EAAE1B,SARD,CAQY;;AARZ;AADe,GAA3B;AAaA,sBACE,6BAAC,YAAD;AACE,IAAA,KAAK,EAAE,CACLH,KADK,EAEL;AACE8B,MAAAA,SAAS,EACP,qBAAAhC,KAAK,CAACgC,SAAN,+DAAmBlC,OAAO,KAAK,MAA/B,IACI,CAAC;AAAEmC,QAAAA,MAAM,EAAE;AAAV,OAAD,CADJ,GAEIC;AAJR,KAFK,CADT;AAUE,IAAA,YAAY,EAAEpC,OAAO,KAAK,QAAZ,GAAuB,GAAvB,GAA6B,CAV7C;AAWE,IAAA,EAAE,EAAEM;AAXN,KAYMJ,KAZN;AAaE,IAAA,GAAG,EAAEJ;AAbP,mBAeE,6BAAC,qBAAD,CAAU,IAAV;AAAe,IAAA,KAAK,EAAE0B,aAAa,CAACC;AAApC,IAfF,EAgBGxB,QAAQ,gBAAG,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAE;AAAEgC,MAAAA,OAAO,EAAE;AAAX;AAAb,KAA8BhC,QAA9B,CAAH,GAAoD,IAhB/D,CADF;AAoBD,CA1DD;;4BA4DeO,eAAM6B,IAAN,eAAW7B,eAAM8B,UAAN,CAAiB1C,QAAjB,CAAX,C","sourcesContent":["import React from 'react';\nimport { Animated, Platform, View } from 'react-native';\nimport { useThemeProps } from '../../../hooks';\nimport { canUseDom } from '../../../utils';\nimport Box from '../../primitives/Box';\nimport type { ISkeletonProps } from './types';\n\nconst Skeleton = (allProps: ISkeletonProps, ref: any) => {\n  const isDomUsable = canUseDom();\n  const { variant, children, ...props } = allProps;\n  const newProps = useThemeProps('Skeleton', props);\n  const { style, skeletonColor, baseColor } = newProps;\n  const blinkAnim = React.useRef(new Animated.Value(0)).current;\n\n  React.useEffect(() => {\n    if (isDomUsable) {\n      const blink = Animated.sequence([\n        Animated.timing(blinkAnim, {\n          toValue: 1,\n          duration: 1000,\n          useNativeDriver: Platform.OS !== 'web',\n        }),\n        Animated.timing(blinkAnim, {\n          toValue: 0,\n          duration: 1000,\n          useNativeDriver: Platform.OS !== 'web',\n        }),\n      ]);\n      Animated.loop(blink).start();\n    }\n  }, [blinkAnim, isDomUsable]);\n\n  const skeletonStyle: any = {\n    skeleton: {\n      position: 'absolute',\n      top: 0,\n      bottom: 0,\n      height: '100%',\n      width: '100%',\n      borderRadius: variant === 'circle' ? 999 : 3,\n      backgroundColor: skeletonColor,\n      opacity: blinkAnim, // Bind opacity to animated value\n    },\n  };\n\n  return (\n    <Box\n      style={[\n        style,\n        {\n          transform:\n            props.transform ?? variant === 'text'\n              ? [{ scaleY: 0.6 }]\n              : undefined,\n        },\n      ]}\n      borderRadius={variant === 'circle' ? 999 : 3}\n      bg={baseColor}\n      {...props}\n      ref={ref}\n    >\n      <Animated.View style={skeletonStyle.skeleton} />\n      {children ? <View style={{ opacity: 0 }}>{children}</View> : null}\n    </Box>\n  );\n};\n\nexport default React.memo(React.forwardRef(Skeleton));\n"]}