{"version":3,"sources":["SimpleGrid.tsx"],"names":["DEBUG_STYLES","rows","border","cols","SimpleGrid","columns","spacing","spacingX","spacingY","minChildWidth","children","ref","cellSpacing","cellSpacingX","cellSpacingY","childrenArray","React","Children","toArray","rowSlices","i","length","push","slice","map","row","rowIndex","col","key","memo","forwardRef"],"mappings":";;;;;;;AAAA;;AACA;;;;;;AAEA;AAEA,MAAMA,YAAY,GAAG,QACjB;AACEC,EAAAA,IAAI,EAAE;AACJC,IAAAA,MAAM,EAAE;AADJ,GADR;AAIEC,EAAAA,IAAI,EAAE;AACJD,IAAAA,MAAM,EAAE;AADJ;AAJR,CADiB,GASjB;AACED,EAAAA,IAAI,EAAE,EADR;AAEEE,EAAAA,IAAI,EAAE;AAFR,CATJ;;AAcA,MAAMC,UAAU,GAAG,CACjB;AACEC,EAAAA,OADF;AAEEC,EAAAA,OAFF;AAGEC,EAAAA,QAHF;AAIEC,EAAAA,QAJF;AAKEC,EAAAA,aALF;AAMEC,EAAAA;AANF,CADiB,EASjBC,GATiB,KAUD;AAChB,MAAIC,WAAW,GAAGN,OAAH,aAAGA,OAAH,cAAGA,OAAH,GAAc,CAA7B;AACA,MAAIO,YAAY,GAAGN,QAAH,aAAGA,QAAH,cAAGA,QAAH,GAAeK,WAA/B;AACA,MAAIE,YAAY,GAAGN,QAAH,aAAGA,QAAH,cAAGA,QAAH,GAAeI,WAA/B;;AAEA,QAAMG,aAAa,GAAGC,eAAMC,QAAN,CAAeC,OAAf,CAAuBR,QAAvB,CAAtB;;AACA,MAAIL,OAAJ,EAAa;AACX,QAAIc,SAAS,GAAG,EAAhB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,aAAa,CAACM,MAAlC,EAA0CD,CAAC,GAAGA,CAAC,GAAGf,OAAlD,EAA2D;AACzDc,MAAAA,SAAS,CAACG,IAAV,CAAeP,aAAa,CAACQ,KAAd,CAAoBH,CAApB,EAAuBA,CAAC,GAAGf,OAA3B,CAAf;AACD;;AAED,wBACE,6BAAC,kBAAD,eAAYL,YAAY,CAACC,IAAzB;AAA+B,MAAA,KAAK,EAAEa,YAAtC;AAAoD,MAAA,GAAG,EAAEH;AAAzD,QACGQ,SAAS,CAACK,GAAV,CAAc,CAACC,GAAD,EAAMC,QAAN,KAAmB;AAChC,0BACE,6BAAC,kBAAD;AAAQ,QAAA,KAAK,EAAEb,YAAf;AAA6B,QAAA,GAAG,EAAEa;AAAlC,SACGD,GAAG,CAACD,GAAJ,CAASG,GAAD,IAAc;AACrB,4BACE,6BAAC,eAAD,eAAS3B,YAAY,CAACG,IAAtB;AAA4B,UAAA,GAAG,EAAEwB,GAAG,CAACC;AAArC,YACGD,GADH,CADF;AAKD,OANA,CADH,CADF;AAWD,KAZA,CADH,CADF;AAiBD,GAvBD,CAwBA;AACA;AAzBA,OA0BK,IAAIlB,aAAJ,EAAmB;AACtB,0BACE,6BAAC,eAAD;AACE,QAAA,aAAa,EAAC,KADhB;AAEE,QAAA,QAAQ,EAAC,MAFX;AAGE,QAAA,cAAc,EAAC,QAHjB;AAIE,QAAA,GAAG,EAAEE;AAJP,SAMGI,aAAa,CAACS,GAAd,CAAmBG,GAAD,IAAc;AAC/B,4BACE,6BAAC,eAAD,eACM3B,YAAY,CAACG,IADnB;AAEE,UAAA,EAAE,EAAEU,YAFN;AAGE,UAAA,EAAE,EAAEC,YAHN;AAIE,UAAA,GAAG,EAAEa,GAAG,CAACC,GAJX;AAKE,UAAA,QAAQ,EAAEnB;AALZ,YAOGkB,GAPH,CADF;AAWD,OAZA,CANH,CADF;AAsBD;;AAED,sBAAO,2DAAP;AACD,CApED;;4BAqEeX,eAAMa,IAAN,eAAWb,eAAMc,UAAN,CAAiB1B,UAAjB,CAAX,C","sourcesContent":["import React from 'react';\nimport { Box, HStack, VStack } from '../../primitives';\nimport type { ISimpleGridProps } from './types';\n// const isDebug = process.env.NODE_ENV !== 'production';\n\nconst DEBUG_STYLES = false\n  ? {\n      rows: {\n        border: '1px solid black',\n      },\n      cols: {\n        border: '1px solid red',\n      },\n    }\n  : {\n      rows: {},\n      cols: {},\n    };\n\nconst SimpleGrid = (\n  {\n    columns,\n    spacing,\n    spacingX,\n    spacingY,\n    minChildWidth,\n    children,\n  }: ISimpleGridProps,\n  ref?: any\n): JSX.Element => {\n  let cellSpacing = spacing ?? 0;\n  let cellSpacingX = spacingX ?? cellSpacing;\n  let cellSpacingY = spacingY ?? cellSpacing;\n\n  const childrenArray = React.Children.toArray(children);\n  if (columns) {\n    let rowSlices = [];\n    for (let i = 0; i < childrenArray.length; i = i + columns) {\n      rowSlices.push(childrenArray.slice(i, i + columns));\n    }\n\n    return (\n      <VStack {...DEBUG_STYLES.rows} space={cellSpacingY} ref={ref}>\n        {rowSlices.map((row, rowIndex) => {\n          return (\n            <HStack space={cellSpacingX} key={rowIndex}>\n              {row.map((col: any) => {\n                return (\n                  <Box {...DEBUG_STYLES.cols} key={col.key}>\n                    {col}\n                  </Box>\n                );\n              })}\n            </HStack>\n          );\n        })}\n      </VStack>\n    );\n  }\n  // Needs more work for empty spacing i.e. auto-fit. Current workaround is to use wrap and let the columns be created dynamically\n  // https://css-tricks.com/auto-sizing-columns-css-grid-auto-fill-vs-auto-fit/\n  else if (minChildWidth) {\n    return (\n      <Box\n        flexDirection=\"row\"\n        flexWrap=\"wrap\"\n        justifyContent=\"center\"\n        ref={ref}\n      >\n        {childrenArray.map((col: any) => {\n          return (\n            <Box\n              {...DEBUG_STYLES.cols}\n              mx={cellSpacingX}\n              my={cellSpacingY}\n              key={col.key}\n              minWidth={minChildWidth}\n            >\n              {col}\n            </Box>\n          );\n        })}\n      </Box>\n    );\n  }\n\n  return <></>;\n};\nexport default React.memo(React.forwardRef(SimpleGrid));\n"]}