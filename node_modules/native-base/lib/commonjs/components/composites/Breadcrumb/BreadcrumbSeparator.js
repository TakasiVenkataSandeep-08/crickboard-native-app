"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getBreadcrumbSeparator = void 0;

var _react = _interopRequireDefault(require("react"));

var _Text = _interopRequireDefault(require("../../primitives/Text"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const getBreadcrumbSeparator = (children, separator, props, spacing) => {
  if (Array.isArray(children)) {
    if (children.length === 1) {
      return children;
    }

    const separatorElement = separator ? typeof separator === 'string' ? /*#__PURE__*/_react.default.createElement(_Text.default, {
      mx: spacing !== null && spacing !== void 0 ? spacing : 2
    }, separator) : /*#__PURE__*/_react.default.cloneElement(separator, {
      mx: spacing !== null && spacing !== void 0 ? spacing : 2
    }) : /*#__PURE__*/_react.default.createElement(_Text.default, {
      mx: spacing !== null && spacing !== void 0 ? spacing : 2
    }, '/');
    let result = [];

    if (children && children.length > 1) {
      result = children.reduce((r, a) => r.concat(a, separatorElement), [separatorElement]);
    }

    result = result.slice(1, -1);
    return result.map((child, index) => {
      return /*#__PURE__*/_react.default.cloneElement(child, {
        _text: { ...props
        },
        ...props,
        key: "breadcrumb-separator-".concat(index)
      });
    });
  } else {
    return children;
  }
};

exports.getBreadcrumbSeparator = getBreadcrumbSeparator;
//# sourceMappingURL=BreadcrumbSeparator.js.map