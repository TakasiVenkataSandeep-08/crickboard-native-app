{"version":3,"sources":["BreadcrumbSeparator.tsx"],"names":["getBreadcrumbSeparator","children","separator","props","spacing","Array","isArray","length","separatorElement","React","cloneElement","mx","result","reduce","r","a","concat","slice","map","child","index","_text","key"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEO,MAAMA,sBAAsB,GAAG,CACpCC,QADoC,EAEpCC,SAFoC,EAGpCC,KAHoC,EAIpCC,OAJoC,KAKjC;AACH,MAAIC,KAAK,CAACC,OAAN,CAAcL,QAAd,CAAJ,EAA6B;AAC3B,QAAIA,QAAQ,CAACM,MAAT,KAAoB,CAAxB,EAA2B;AACzB,aAAON,QAAP;AACD;;AACD,UAAMO,gBAAgB,GAAGN,SAAS,GAChC,OAAOA,SAAP,KAAqB,QAArB,gBACE,6BAAC,aAAD;AAAM,MAAA,EAAE,EAAEE,OAAF,aAAEA,OAAF,cAAEA,OAAF,GAAa;AAArB,OAAyBF,SAAzB,CADF,gBAGEO,eAAMC,YAAN,CAAmBR,SAAnB,EAA8B;AAC5BS,MAAAA,EAAE,EAAEP,OAAF,aAAEA,OAAF,cAAEA,OAAF,GAAa;AADa,KAA9B,CAJ8B,gBAShC,6BAAC,aAAD;AAAM,MAAA,EAAE,EAAEA,OAAF,aAAEA,OAAF,cAAEA,OAAF,GAAa;AAArB,OAAyB,GAAzB,CATF;AAWA,QAAIQ,MAAW,GAAG,EAAlB;;AACA,QAAIX,QAAQ,IAAIA,QAAQ,CAACM,MAAT,GAAkB,CAAlC,EAAqC;AACnCK,MAAAA,MAAM,GAAGX,QAAQ,CAACY,MAAT,CACP,CAACC,CAAD,EAAWC,CAAX,KAAsBD,CAAC,CAACE,MAAF,CAASD,CAAT,EAAYP,gBAAZ,CADf,EAEP,CAACA,gBAAD,CAFO,CAAT;AAID;;AACDI,IAAAA,MAAM,GAAGA,MAAM,CAACK,KAAP,CAAa,CAAb,EAAgB,CAAC,CAAjB,CAAT;AACA,WAAOL,MAAM,CAACM,GAAP,CAAW,CAACC,KAAD,EAAaC,KAAb,KAA+B;AAC/C,0BAAOX,eAAMC,YAAN,CAAmBS,KAAnB,EAA0B;AAC/BE,QAAAA,KAAK,EAAE,EAAE,GAAGlB;AAAL,SADwB;AAE/B,WAAGA,KAF4B;AAG/BmB,QAAAA,GAAG,iCAA0BF,KAA1B;AAH4B,OAA1B,CAAP;AAKD,KANM,CAAP;AAOD,GA9BD,MA8BO;AACL,WAAOnB,QAAP;AACD;AACF,CAvCM","sourcesContent":["import React from 'react';\nimport Text from '../../primitives/Text';\n\nexport const getBreadcrumbSeparator = (\n  children: JSX.Element[] | JSX.Element | any,\n  separator: string | JSX.Element | JSX.Element[] | any,\n  props: any,\n  spacing: number | undefined\n) => {\n  if (Array.isArray(children)) {\n    if (children.length === 1) {\n      return children;\n    }\n    const separatorElement = separator ? (\n      typeof separator === 'string' ? (\n        <Text mx={spacing ?? 2}>{separator}</Text>\n      ) : (\n        React.cloneElement(separator, {\n          mx: spacing ?? 2,\n        })\n      )\n    ) : (\n      <Text mx={spacing ?? 2}>{'/'}</Text>\n    );\n    let result: any = [];\n    if (children && children.length > 1) {\n      result = children.reduce(\n        (r: any[], a: any) => r.concat(a, separatorElement),\n        [separatorElement]\n      );\n    }\n    result = result.slice(1, -1);\n    return result.map((child: any, index: number) => {\n      return React.cloneElement(child, {\n        _text: { ...props },\n        ...props,\n        key: `breadcrumb-separator-${index}`,\n      });\n    });\n  } else {\n    return children;\n  }\n};\n"]}