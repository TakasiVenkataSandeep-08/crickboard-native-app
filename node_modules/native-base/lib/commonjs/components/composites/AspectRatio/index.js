"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _Box = _interopRequireDefault(require("../../primitives/Box"));

var _isNil = _interopRequireDefault(require("lodash/isNil"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const AspectView = /*#__PURE__*/_react.default.forwardRef((props, ref) => {
  const [layout, setLayout] = _react.default.useState();

  const inputStyle = [_reactNative.StyleSheet.flatten(props.style) || {}];

  if (layout) {
    // @ts-ignore
    let {
      width = 0,
      height = 0
    } = layout;

    if (width === 0) {
      inputStyle.push({
        width: height * props.aspectRatio,
        height
      });
    } else {
      inputStyle.push({
        width,
        height: width / props.aspectRatio
      });
    }
  }

  return /*#__PURE__*/_react.default.createElement(_Box.default, _extends({}, props, {
    ref: ref,
    style: inputStyle,
    onLayout: ({
      nativeEvent: {
        layout: inLayout
      }
    }) => setLayout(inLayout)
  }));
});

const AspectRatio = ({
  style,
  ratio,
  children,
  ...props
}, ref) => {
  let computedStyle = style;

  let newChildWithProps = /*#__PURE__*/_react.default.cloneElement(children, { ...children.props,
    style: _reactNative.StyleSheet.absoluteFillObject
  }, children.props.children);

  let aspectRatio = !(0, _isNil.default)(ratio) ? ratio : 4 / 3; // DOC:  It uses a aspectRatio property of React Native and manually calculate on Web

  if (_reactNative.Platform.OS === 'web') {
    return /*#__PURE__*/_react.default.createElement(AspectView, _extends({}, props, {
      aspectRatio: aspectRatio,
      style: style,
      ref: ref
    }), newChildWithProps);
  } else {
    computedStyle = _reactNative.StyleSheet.flatten([style, {
      aspectRatio
    }]);
    return /*#__PURE__*/_react.default.createElement(_Box.default, _extends({}, props, {
      style: computedStyle,
      ref: ref
    }), newChildWithProps);
  }
};

var _default = /*#__PURE__*/_react.default.memo( /*#__PURE__*/_react.default.forwardRef(AspectRatio));

exports.default = _default;
//# sourceMappingURL=index.js.map