{"version":3,"sources":["PopoverTrigger.tsx"],"names":["PopoverTrigger","children","setPopoverTrigger","React","useContext","PopoverContext","useEffect","Children","map","child","cloneElement","isDisabled","disabled","props","memo"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA,MAAMA,cAAc,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAuB;AAC5C,QAAM;AAAEC,IAAAA;AAAF,MAAwBC,eAAMC,UAAN,CAAiBC,uBAAjB,CAA9B;;AACAF,iBAAMG,SAAN,CAAgB,MAAM;AACpBJ,IAAAA,iBAAiB,CACfC,eAAMI,QAAN,CAAeC,GAAf,CAAmBP,QAAnB,EAA8BQ,KAAD,IAAW;AACtC,0BAAON,eAAMO,YAAN,CACLD,KADK,EAEL;AAAEE,QAAAA,UAAU,EAAE,IAAd;AAAoBC,QAAAA,QAAQ,EAAE;AAA9B,OAFK,EAGLH,KAAK,CAACI,KAAN,CAAYZ,QAHP,CAAP;AAKD,KAND,CADe,CAAjB;AASD,GAVD,EAUG,CAACC,iBAAD,EAAoBD,QAApB,CAVH;;AAYA,SAAO,IAAP;AACD,CAfD;;4BAiBeE,eAAMW,IAAN,CAAWd,cAAX,C","sourcesContent":["import React from 'react';\nimport { PopoverContext } from './popover';\n\nconst PopoverTrigger = ({ children }: any) => {\n  const { setPopoverTrigger } = React.useContext(PopoverContext);\n  React.useEffect(() => {\n    setPopoverTrigger(\n      React.Children.map(children, (child) => {\n        return React.cloneElement(\n          child,\n          { isDisabled: true, disabled: true },\n          child.props.children\n        );\n      })\n    );\n  }, [setPopoverTrigger, children]);\n\n  return null;\n};\n\nexport default React.memo(PopoverTrigger);\n"]}