{"version":3,"sources":["popover.tsx"],"names":["PopoverContext","React","createContext","PopoverTrigger","setPopoverTrigger","_child","PopoverRef","backgroundColor","borderColor","borderWidth","initialFocusRef","finalFocusRef","isVisible","setIsVisible","_bool","onOpen","onClose","closeOnBlur","newProps","popoverCloseButtonProps","popoverFooterProps","popoverBodyProps","popoverContentProps","popoverHeaderProps","Popover","children","id","bg","props","trigger","setTrigger","useState","popOverRef","useRef","value","popoverProps","memo"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAGO,MAAMA,cAAc,gBAAGC,eAAMC,aAAN,CAAoB;AAChDC,EAAAA,cAAc,EAAE,IADgC;AAEhDC,EAAAA,iBAAiB,EAAGC,MAAD,IAAyC,CAAE,CAFd;AAGhDC,EAAAA,UAAU,EAAE,IAHoC;AAIhDC,EAAAA,eAAe,EAAE,EAJ+B;AAKhDC,EAAAA,WAAW,EAAE,EALmC;AAMhDC,EAAAA,WAAW,EAAE,IANmC;AAOhDC,EAAAA,eAAe,EAAE,IAP+B;AAQhDC,EAAAA,aAAa,EAAE,IARiC;AAShDC,EAAAA,SAAS,EAAE,KATqC;AAUhDC,EAAAA,YAAY,EAAGC,KAAD,IAAoB,CAAE,CAVY;AAWhDC,EAAAA,MAAM,EAAE,MAAM,CAAE,CAXgC;AAYhDC,EAAAA,OAAO,EAAE,MAAM,CAAE,CAZ+B;AAahDC,EAAAA,WAAW,EAAE,IAbmC;AAchDC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,uBAAuB,EAAE,EADjB;AAERC,IAAAA,kBAAkB,EAAE,EAFZ;AAGRC,IAAAA,gBAAgB,EAAE,EAHV;AAIRC,IAAAA,mBAAmB,EAAE,EAJb;AAKRC,IAAAA,kBAAkB,EAAE;AALZ;AAdsC,CAApB,CAAvB;;;;AAuBP,MAAMC,OAAO,GAAG,CAAC;AACfC,EAAAA,QADe;AAEff,EAAAA,eAFe;AAGfC,EAAAA,aAHe;AAIfI,EAAAA,MAJe;AAKfC,EAAAA,OALe;AAMfC,EAAAA,WANe;AAOfS,EAAAA,EAPe;AAQfnB,EAAAA,eARe;AASfoB,EAAAA,EATe;AAUflB,EAAAA,WAVe;AAWfD,EAAAA,WAXe;AAYf,KAAGoB;AAZY,CAAD,KAaK;AACnB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwB7B,eAAM8B,QAAN,EAA9B;;AACA,QAAM,CAACnB,SAAD,EAAYC,YAAZ,IAA4BZ,eAAM8B,QAAN,CAAe,KAAf,CAAlC;;AACA,QAAMC,UAAe,GAAG/B,eAAMgC,MAAN,CAAa,IAAb,CAAxB;;AACA,QAAMf,QAAQ,GAAG,0BAAc,SAAd,EAAyBU,KAAzB,CAAjB;AACA,QAAMM,KAAU,GAAG;AACjB/B,IAAAA,cAAc,EAAE0B,OADC;AAEjBzB,IAAAA,iBAAiB,EAAE0B,UAFF;AAGjBxB,IAAAA,UAAU,EAAE0B,UAHK;AAIjBtB,IAAAA,eAAe,EAAEA,eAJA;AAKjBC,IAAAA,aAAa,EAAEA,aALE;AAMjBC,IAAAA,SAAS,EAAEA,SANM;AAOjBC,IAAAA,YAAY,EAAEA,YAPG;AAQjBE,IAAAA,MAAM,EAAEA,MARS;AASjBC,IAAAA,OAAO,EAAEA,OATQ;AAUjBE,IAAAA,QAAQ,EAAEA,QAVO;AAWjBD,IAAAA,WAAW,EAAEA,WAXI;AAYjBV,IAAAA,eAAe,EACboB,EAAE,IAAIpB,eAAN,IAAyB,EAAE,GAAGW,QAAQ,CAACiB;AAAd,MAA6B5B,eAbvC;AAcjBC,IAAAA,WAAW,EAAEA,WAAW,IAAI,EAAE,GAAGU,QAAQ,CAACiB;AAAd,MAA6B3B,WAdxC;AAejBC,IAAAA,WAAW,EAAEA,WAAW,IAAI,EAAE,GAAGS,QAAQ,CAACiB;AAAd,MAA6B1B;AAfxC,GAAnB;AAkBA,sBACE,6BAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAEyB;AAAhC,kBACE,6BAAC,aAAD;AAAM,IAAA,QAAQ,EAAER;AAAhB,KAAqBD,QAArB,CADF,CADF;AAKD,CAzCD;;4BA2CexB,eAAMmC,IAAN,CAAWZ,OAAX,C","sourcesContent":["import React from 'react';\nimport { useThemeProps } from '../../../hooks';\nimport View from '../../primitives/View';\nimport type { IPopoverProps } from './types';\n\nexport const PopoverContext = React.createContext({\n  PopoverTrigger: null,\n  setPopoverTrigger: (_child: JSX.Element[] | JSX.Element) => {},\n  PopoverRef: null,\n  backgroundColor: '',\n  borderColor: '',\n  borderWidth: null,\n  initialFocusRef: null,\n  finalFocusRef: null,\n  isVisible: false,\n  setIsVisible: (_bool: boolean) => {},\n  onOpen: () => {},\n  onClose: () => {},\n  closeOnBlur: true,\n  newProps: {\n    popoverCloseButtonProps: {},\n    popoverFooterProps: {},\n    popoverBodyProps: {},\n    popoverContentProps: {},\n    popoverHeaderProps: {},\n  },\n});\n\nconst Popover = ({\n  children,\n  initialFocusRef,\n  finalFocusRef,\n  onOpen,\n  onClose,\n  closeOnBlur,\n  id,\n  backgroundColor,\n  bg,\n  borderWidth,\n  borderColor,\n  ...props\n}: IPopoverProps) => {\n  const [trigger, setTrigger] = React.useState();\n  const [isVisible, setIsVisible] = React.useState(false);\n  const popOverRef: any = React.useRef(null);\n  const newProps = useThemeProps('Popover', props);\n  const value: any = {\n    PopoverTrigger: trigger,\n    setPopoverTrigger: setTrigger,\n    PopoverRef: popOverRef,\n    initialFocusRef: initialFocusRef,\n    finalFocusRef: finalFocusRef,\n    isVisible: isVisible,\n    setIsVisible: setIsVisible,\n    onOpen: onOpen,\n    onClose: onClose,\n    newProps: newProps,\n    closeOnBlur: closeOnBlur,\n    backgroundColor:\n      bg || backgroundColor || { ...newProps.popoverProps }.backgroundColor,\n    borderColor: borderColor || { ...newProps.popoverProps }.borderColor,\n    borderWidth: borderWidth || { ...newProps.popoverProps }.borderWidth,\n  };\n\n  return (\n    <PopoverContext.Provider value={value}>\n      <View nativeID={id}>{children}</View>\n    </PopoverContext.Provider>\n  );\n};\n\nexport default React.memo(Popover);\nexport type { IPopoverProps };\n"]}