{"version":3,"sources":["index.tsx"],"names":["Wrap","spacing","children","props","ref","React","Children","map","child","cloneElement","style","margin","memo","forwardRef"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;AAGA,MAAMA,IAAI,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,QAAX;AAAqB,KAAGC;AAAxB,CAAD,EAA8CC,GAA9C,KAA4D;AACvE,sBACE,6BAAC,aAAD,eAAUD,KAAV;AAAiB,IAAA,IAAI,EAAC,MAAtB;AAA6B,IAAA,GAAG,EAAEC;AAAlC,MACG,oBAAMH,OAAN,IACGC,QADH,GAEGG,eAAMC,QAAN,CAAeC,GAAf,CAAmBL,QAAnB,EAA8BM,KAAD,IAAgB;AAC3C,wBAAOH,eAAMI,YAAN,CACLD,KADK,EAEL,EAAE,GAAGL,KAAL;AAAYO,MAAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAEV;AAAV;AAAnB,KAFK,EAGLO,KAAK,CAACL,KAAN,CAAYD,QAHP,CAAP;AAKD,GAND,CAHN,CADF;AAaD,CAdD;;4BAgBeG,eAAMO,IAAN,eAAWP,eAAMQ,UAAN,CAAiBb,IAAjB,CAAX,C","sourcesContent":["import isNil from 'lodash/isNil';\nimport React from 'react';\nimport Flex from '../../primitives/Flex';\nimport type { IWrapProps } from './types';\n\nconst Wrap = ({ spacing, children, ...props }: IWrapProps, ref?: any) => {\n  return (\n    <Flex {...props} wrap=\"wrap\" ref={ref}>\n      {isNil(spacing)\n        ? children\n        : React.Children.map(children, (child: any) => {\n            return React.cloneElement(\n              child,\n              { ...props, style: { margin: spacing } },\n              child.props.children\n            );\n          })}\n    </Flex>\n  );\n};\n\nexport default React.memo(React.forwardRef(Wrap));\nexport type { IWrapProps };\n"]}