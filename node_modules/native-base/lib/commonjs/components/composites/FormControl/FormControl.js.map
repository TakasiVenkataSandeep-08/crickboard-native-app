{"version":3,"sources":["FormControl.tsx"],"names":["FormControlContext","React","createContext","FormControl","children","isInvalid","isRequired","isDisabled","isReadOnly","props","ref","memo","forwardRef"],"mappings":";;;;;;;AAAA;;AACA;;;;;;AAGO,MAAMA,kBAAkB,gBAAGC,eAAMC,aAAN,CAAoB,EAApB,CAA3B;;;;AAEP,MAAMC,WAAW,GAAG,CAClB;AACEC,EAAAA,QADF;AAEEC,EAAAA,SAFF;AAGEC,EAAAA,UAHF;AAIEC,EAAAA,UAJF;AAKEC,EAAAA,UALF;AAME,KAAGC;AANL,CADkB,EASlBC,GATkB,KAUf;AACH,sBACE,6BAAC,kBAAD,CAAoB,QAApB;AACE,IAAA,KAAK,EAAE;AACLL,MAAAA,SADK;AAELC,MAAAA,UAFK;AAGLC,MAAAA,UAHK;AAILC,MAAAA;AAJK;AADT,kBAQE,6BAAC,YAAD;AAAK,IAAA,KAAK,EAAC;AAAX,KAAsBC,KAAtB;AAA6B,IAAA,GAAG,EAAEC;AAAlC,MACGN,QADH,CARF,CADF;AAcD,CAzBD;;4BA2BeH,eAAMU,IAAN,eAAWV,eAAMW,UAAN,CAAiBT,WAAjB,CAAX,C","sourcesContent":["import React from 'react';\nimport Box from '../../primitives/Box';\nimport type { IFormControlProps } from './types';\n\nexport const FormControlContext = React.createContext({});\n\nconst FormControl = (\n  {\n    children,\n    isInvalid,\n    isRequired,\n    isDisabled,\n    isReadOnly,\n    ...props\n  }: IFormControlProps,\n  ref: any\n) => {\n  return (\n    <FormControlContext.Provider\n      value={{\n        isInvalid,\n        isRequired,\n        isDisabled,\n        isReadOnly,\n      }}\n    >\n      <Box width=\"100%\" {...props} ref={ref}>\n        {children}\n      </Box>\n    </FormControlContext.Provider>\n  );\n};\n\nexport default React.memo(React.forwardRef(FormControl));\n"]}