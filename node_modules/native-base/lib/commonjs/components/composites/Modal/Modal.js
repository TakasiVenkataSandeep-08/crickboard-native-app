"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _native = _interopRequireDefault(require("styled-components/native"));

var _styledSystem = require("styled-system");

var _Overlay = require("../../../core/Overlay");

var _hooks = require("../../../hooks");

var _focus = require("@react-native-aria/focus");

var _customProps = require("../../../utils/customProps");

var _primitives = require("../../primitives");

var _ModalOverlay = _interopRequireDefault(require("./ModalOverlay"));

var _Context = require("./Context");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const ModalWeb = ({
  initialFocusRef,
  finalFocusRef,
  children
}) => {
  (0, _react.useEffect)(() => {
    var _initialFocusRef$curr;

    initialFocusRef === null || initialFocusRef === void 0 ? void 0 : (_initialFocusRef$curr = initialFocusRef.current) === null || _initialFocusRef$curr === void 0 ? void 0 : _initialFocusRef$curr.focus();
    const finalRef = finalFocusRef === null || finalFocusRef === void 0 ? void 0 : finalFocusRef.current;
    return () => {
      finalRef === null || finalRef === void 0 ? void 0 : finalRef.focus();
    };
  }, [initialFocusRef, finalFocusRef]);
  return children;
};

const StyledModal = (0, _native.default)(_reactNative.Modal)(_styledSystem.color, _styledSystem.space, _styledSystem.layout, _styledSystem.flexbox, _styledSystem.border, _styledSystem.position, _customProps.customPosition, _customProps.customBorder, _customProps.customBackground, _customProps.customOutline, _customProps.customShadow, _customProps.customExtra, _customProps.customLayout);

const Modal = ({
  children,
  isOpen,
  onClose,
  initialFocusRef,
  finalFocusRef,
  justifyContent,
  alignItems,
  id,
  motionPreset,
  avoidKeyboard,
  overlayColor,
  overlayVisible,
  ...props
}, ref) => {
  const {
    closeOverlay,
    setOverlay
  } = (0, _Overlay.useOverlay)();

  const [isVisible, setIsVisible] = _react.default.useState(true);

  const closeOverlayInMobile = () => {
    setIsVisible(false);
    onClose(false);
  };

  const {
    contentSize,
    ...newProps
  } = (0, _hooks.useThemeProps)('Modal', props);
  const value = {
    visible: isVisible,
    toggleVisible: setIsVisible,
    toggleOnClose: onClose ? onClose : () => {},
    contentSize: contentSize
  };

  const modalChildren = /*#__PURE__*/_react.default.createElement(_primitives.Box, _extends({}, newProps, {
    justifyContent: justifyContent !== null && justifyContent !== void 0 ? justifyContent : 'center',
    alignItems: alignItems !== null && alignItems !== void 0 ? alignItems : 'center'
  }), newProps.closeOnOverlayClick === false ? /*#__PURE__*/_react.default.createElement(_primitives.Box, null) : /*#__PURE__*/_react.default.createElement(_ModalOverlay.default, null), children);

  _react.default.useEffect(() => {
    isOpen && _reactNative.Platform.OS === 'web' ? setOverlay( /*#__PURE__*/_react.default.createElement(_Context.ModalContext.Provider, {
      value: value
    }, /*#__PURE__*/_react.default.createElement(_focus.FocusScope, {
      contain: true,
      restoreFocus: !(finalFocusRef && finalFocusRef.current),
      autoFocus: !(initialFocusRef && initialFocusRef.current)
    }, /*#__PURE__*/_react.default.createElement(_primitives.Box, {
      ref: ref,
      nativeID: id,
      h: "100%"
    }, /*#__PURE__*/_react.default.createElement(ModalWeb, {
      initialFocusRef: initialFocusRef,
      finalFocusRef: finalFocusRef
    }, modalChildren)))), {
      onClose: onClose,
      closeOnPress: newProps.closeOnOverlayClick === false ? false : true,
      backgroundColor: overlayColor ? overlayColor : undefined,
      disableOverlay: overlayVisible === false ? true : false,
      motionPreset: motionPreset !== null && motionPreset !== void 0 ? motionPreset : 'fade',
      position: justifyContent === 'flex-start' ? 'top' : justifyContent === 'flex-end' ? 'bottom' : 'center'
    }) : setOverlay( /*#__PURE__*/_react.default.createElement(_primitives.Box, null), {
      onClose: closeOverlayInMobile,
      closeOnPress: newProps.closeOnOverlayClick === false ? false : true,
      backgroundColor: overlayColor ? overlayColor : undefined,
      disableOverlay: overlayVisible === false ? true : false
    });
    !isOpen && closeOverlay();
    setIsVisible(isOpen);
  },
  /*eslint-disable */
  [isOpen]);

  return _reactNative.Platform.OS !== 'web' ? /*#__PURE__*/_react.default.createElement(_Context.ModalContext.Provider, {
    value: value
  }, /*#__PURE__*/_react.default.createElement(_primitives.View, {
    nativeID: id
  }, /*#__PURE__*/_react.default.createElement(StyledModal, _extends({
    visible: isVisible,
    onRequestClose: () => {
      value.toggleVisible(false);
      value.toggleOnClose(false);
    },
    onShow: () => {
      var _initialFocusRef$curr2;

      return initialFocusRef === null || initialFocusRef === void 0 ? void 0 : (_initialFocusRef$curr2 = initialFocusRef.current) === null || _initialFocusRef$curr2 === void 0 ? void 0 : _initialFocusRef$curr2.focus();
    },
    onDismiss: () => {
      var _finalFocusRef$curren;

      return finalFocusRef === null || finalFocusRef === void 0 ? void 0 : (_finalFocusRef$curren = finalFocusRef.current) === null || _finalFocusRef$curren === void 0 ? void 0 : _finalFocusRef$curren.focus();
    },
    animationType: motionPreset || 'fade',
    transparent: true
  }, newProps, {
    ref: ref
  }), avoidKeyboard ? /*#__PURE__*/_react.default.createElement(_reactNative.KeyboardAvoidingView, {
    behavior: _reactNative.Platform.OS === 'ios' ? 'padding' : 'height'
  }, modalChildren) : modalChildren))) : null;
};

var _default = /*#__PURE__*/_react.default.memo( /*#__PURE__*/_react.default.forwardRef(Modal));

exports.default = _default;
//# sourceMappingURL=Modal.js.map