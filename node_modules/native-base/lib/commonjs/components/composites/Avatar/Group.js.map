{"version":3,"sources":["Group.tsx"],"names":["getAvatarGroupChildren","children","spacing","max","plusAvatarBg","props","childrenArray","React","Children","toArray","plusAvatars","length","slice","trailingChildren","defaultProps","ml","map","reverse","child","cloneElement","AvatarGroup","allProps","ref","borderColor","borderWidth","bg","memo","forwardRef"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;;;;;AAEA,MAAMA,sBAAsB,GAAG,CAC7BC,QAD6B,EAE7BC,OAF6B,EAG7BC,GAH6B,EAI7BC,YAJ6B,EAK7BC,KAL6B,KAM1B;AACH,MAAIC,aAAkB,GAAGC,eAAMC,QAAN,CAAeC,OAAf,CAAuBR,QAAvB,CAAzB;;AACA,MAAIS,WAAmB,GAAG,CAA1B;;AACA,MAAI,CAAC,oBAAMP,GAAN,CAAD,IAAeA,GAAG,GAAGG,aAAa,CAACK,MAAnC,IAA6CR,GAAG,GAAG,CAAvD,EAA0D;AACxDO,IAAAA,WAAW,GAAGJ,aAAa,CAACK,MAAd,GAAuBR,GAArC;AACAG,IAAAA,aAAa,GAAGA,aAAa,CAACM,KAAd,CAAoB,CAApB,EAAuBT,GAAvB,CAAhB;AACD;;AACD,MAAIU,gBAAgB,GAAGP,aAAa,CAACM,KAAd,CAAoB,CAApB,CAAvB;AACA,QAAME,YAAY,GAAG;AACnBC,IAAAA,EAAE,EAAE,oBAAMb,OAAN,IAAiB,CAAC,CAAlB,GAAsBA;AADP,GAArB;AAGA,SAAO,CACLQ,WAAW,GAAG,CAAd,gBACE,6BAAC,eAAD;AAAQ,IAAA,EAAE,EAAEN;AAAZ,KAA8BU,YAA9B,EAAgDT,KAAhD,GACG,OAAOK,WADV,CADF,GAII,IALC,EAMLH,eAAMC,QAAN,CAAeQ,GAAf,CAAmBH,gBAAgB,CAACI,OAAjB,EAAnB,EAAgDC,KAAD,IAAgB;AAC7D,wBAAOX,eAAMY,YAAN,CACLD,KADK,EAEL,EACE,GAAGb,KADL;AAEE,SAAGS,YAFL;AAGE,SAAGI,KAAK,CAACb;AAHX,KAFK,EAOLa,KAAK,CAACb,KAAN,CAAYJ,QAPP,CAAP;AASD,GAVD,CANK,eAiBLM,eAAMY,YAAN,CACEb,aAAa,CAAC,CAAD,CADf,EAEE,EACE,GAAGD,KADL;AAEE,OAAGC,aAAa,CAAC,CAAD,CAAb,CAAiBD;AAFtB,GAFF,EAMEC,aAAa,CAAC,CAAD,CAAb,CAAiBD,KAAjB,CAAuBJ,QANzB,CAjBK,CAAP;AA0BD,CA3CD;;AA6CA,MAAMmB,WAAW,GAAG,CAACC,QAAD,EAA8BC,GAA9B,KAA2C;AAC7D,QAAM;AAAErB,IAAAA,QAAF;AAAYC,IAAAA,OAAZ;AAAqBC,IAAAA,GAArB;AAA0B,OAAGE;AAA7B,MAAuCgB,QAA7C;AACA,QAAM;AAAEE,IAAAA,WAAF;AAAeC,IAAAA,WAAf;AAA4BC,IAAAA;AAA5B,MAAmC,0BAAc,aAAd,EAA6BpB,KAA7B,CAAzC;AACA,sBACE,6BAAC,aAAD;AAAM,IAAA,SAAS,EAAC,aAAhB;AAA8B,IAAA,GAAG,EAAEiB;AAAnC,KACGtB,sBAAsB,CAACC,QAAD,EAAWC,OAAX,EAAoBC,GAApB,EAAyBsB,EAAzB,EAA6B;AAClDF,IAAAA,WADkD;AAElDC,IAAAA,WAFkD;AAGlD,OAAGnB;AAH+C,GAA7B,CADzB,CADF;AASD,CAZD;;4BAceE,eAAMmB,IAAN,eAAWnB,eAAMoB,UAAN,CAAiBP,WAAjB,CAAX,C","sourcesContent":["import React from 'react';\nimport Flex from '../../primitives/Flex';\nimport { useThemeProps } from '../../../hooks';\nimport isNil from 'lodash/isNil';\nimport type { IAvatarGroupProps } from './types';\nimport { default as Avatar } from './Avatar';\n\nconst getAvatarGroupChildren = (\n  children?: JSX.Element[] | JSX.Element,\n  spacing?: number,\n  max?: number,\n  plusAvatarBg?: string,\n  props?: any\n) => {\n  let childrenArray: any = React.Children.toArray(children);\n  let plusAvatars: number = 0;\n  if (!isNil(max) && max < childrenArray.length && max > 0) {\n    plusAvatars = childrenArray.length - max;\n    childrenArray = childrenArray.slice(0, max);\n  }\n  let trailingChildren = childrenArray.slice(1);\n  const defaultProps = {\n    ml: isNil(spacing) ? -4 : spacing,\n  };\n  return [\n    plusAvatars > 0 ? (\n      <Avatar bg={plusAvatarBg} {...defaultProps} {...props}>\n        {'+ ' + plusAvatars}\n      </Avatar>\n    ) : null,\n    React.Children.map(trailingChildren.reverse(), (child: any) => {\n      return React.cloneElement(\n        child,\n        {\n          ...props,\n          ...defaultProps,\n          ...child.props,\n        },\n        child.props.children\n      );\n    }),\n    React.cloneElement(\n      childrenArray[0],\n      {\n        ...props,\n        ...childrenArray[0].props,\n      },\n      childrenArray[0].props.children\n    ),\n  ];\n};\n\nconst AvatarGroup = (allProps: IAvatarGroupProps, ref: any) => {\n  const { children, spacing, max, ...props } = allProps;\n  const { borderColor, borderWidth, bg } = useThemeProps('AvatarBadge', props);\n  return (\n    <Flex direction=\"row-reverse\" ref={ref}>\n      {getAvatarGroupChildren(children, spacing, max, bg, {\n        borderColor,\n        borderWidth,\n        ...props,\n      })}\n    </Flex>\n  );\n};\n\nexport default React.memo(React.forwardRef(AvatarGroup));\n"]}