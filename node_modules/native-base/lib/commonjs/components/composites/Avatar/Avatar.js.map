{"version":3,"sources":["Avatar.tsx"],"names":["Avatar","props","ref","error","setError","React","useState","size","style","source","children","remainingProps","_text","newProps","name","Badge","remainingChildren","Children","map","child","key","type","push","imageFitStyle","height","width","borderRadius","length","memo","forwardRef"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;AAGA,MAAMA,MAAM,GAAG,CAACC,KAAD,EAAsBC,GAAtB,KAAmC;AAChD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBC,eAAMC,QAAN,CAAe,KAAf,CAA1B;;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA,MAAf;AAAuBC,IAAAA,QAAvB;AAAiC,OAAGC;AAApC,MAAuDV,KAA7D;AAEA,QAAM;AAAEW,IAAAA,KAAF;AAAS,OAAGC;AAAZ,MAAyB,0BAAc,QAAd,EAAwB,EACrD,GAAGF,cADkD;AAErDG,IAAAA,IAAI,EAAE,QAF+C;AAGrDP,IAAAA;AAHqD,GAAxB,CAA/B;;AAMA,MAAIQ,KAAK,gBAAG,2DAAZ;;AACA,MAAIC,iBAAgC,GAAG,EAAvC,CAXgD,CAYhD;;AACAX,iBAAMY,QAAN,CAAeC,GAAf,CAAmBR,QAAnB,EAA6B,CAACS,KAAD,EAAQC,GAAR,KAAgB;AAAA;;AAC3C,QACE,OAAOD,KAAK,CAACE,IAAb,KAAsB,QAAtB,IACA,qBAAAF,KAAK,CAACE,IAAN,CAAWA,IAAX,sEAAiBP,IAAjB,MAA0B,aAF5B,EAGE;AACAC,MAAAA,KAAK,GAAGI,KAAR;AACD,KALD,MAKO;AACLH,MAAAA,iBAAiB,CAACM,IAAlB,CACE,OAAOH,KAAP,KAAiB,QAAjB,gBACE,6BAAC,gBAAD;AAAM,QAAA,GAAG,EAAE,qBAAqBC;AAAhC,SAAyCR,KAAzC,GACGO,KADH,CADF,GAKEA,KANJ;AASD;AACF,GAjBD;;AAmBA,QAAMI,aAAa,GAAG;AAAEC,IAAAA,MAAM,EAAE,MAAV;AAAkBC,IAAAA,KAAK,EAAE;AAAzB,GAAtB;AAEA,sBACE,6BAAC,eAAD,eAASZ,QAAT;AAAmB,IAAA,KAAK,EAAEL,KAA1B;AAAiC,IAAA,GAAG,EAAEN;AAAtC,MACGO,MAAM,IAAI,CAACN,KAAX,gBACC,6BAAC,iBAAD;AACE,IAAA,YAAY,EAAEU,QAAQ,CAACa,YADzB;AAEE,IAAA,MAAM,EAAEjB,MAFV;AAGE,IAAA,GAAG,EAAE,IAHP;AAIE,IAAA,IAAI,EAAEG,KAJR;AAKE,IAAA,KAAK,EAAE,CAACJ,KAAD,EAAQe,aAAR,CALT;AAME,IAAA,OAAO,EAAE,MAAM;AACbnB,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;AARH,IADD,GAWGY,iBAAiB,CAACW,MAAlB,KAA6B,CAA7B,gBACF,6BAAC,gBAAD,EAAUf,KAAV,OADE,CACyB;AADzB,IAGFI,iBAfJ,EAiBGD,KAjBH,CADF;AAqBD,CAvDD;;4BAyDeV,eAAMuB,IAAN,eAAWvB,eAAMwB,UAAN,CAAiB7B,MAAjB,CAAX,C","sourcesContent":["import React from 'react';\nimport { Box, Image, Text } from '../../primitives';\nimport { useThemeProps } from '../../../hooks';\nimport type { IAvatarProps } from './types';\n\nconst Avatar = (props: IAvatarProps, ref: any) => {\n  const [error, setError] = React.useState(false);\n  const { size, style, source, children, ...remainingProps } = props;\n\n  const { _text, ...newProps } = useThemeProps('Avatar', {\n    ...remainingProps,\n    name: 'avatar',\n    size,\n  });\n\n  let Badge = <></>;\n  let remainingChildren: JSX.Element[] = [];\n  //  Pop Badge from children\n  React.Children.map(children, (child, key) => {\n    if (\n      typeof child.type === 'object' &&\n      child.type.type?.name === 'AvatarBadge'\n    ) {\n      Badge = child;\n    } else {\n      remainingChildren.push(\n        typeof child === 'string' ? (\n          <Text key={'avatar-children-' + key} {..._text}>\n            {child}\n          </Text>\n        ) : (\n          child\n        )\n      );\n    }\n  });\n\n  const imageFitStyle = { height: '100%', width: '100%' };\n\n  return (\n    <Box {...newProps} style={style} ref={ref}>\n      {source && !error ? (\n        <Image\n          borderRadius={newProps.borderRadius}\n          source={source}\n          alt={'--'}\n          _alt={_text}\n          style={[style, imageFitStyle]}\n          onError={() => {\n            setError(true);\n          }}\n        />\n      ) : remainingChildren.length === 0 ? (\n        <Text {..._text}>--</Text> // default alternate\n      ) : (\n        remainingChildren\n      )}\n      {Badge}\n    </Box>\n  );\n};\n\nexport default React.memo(React.forwardRef(Avatar));\n"]}