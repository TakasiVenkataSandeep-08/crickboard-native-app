{"version":3,"sources":["Tabs.tsx"],"names":["Tabs","children","props","ref","onChange","activeTabStyle","inactiveTabStyle","tabBarStyle","isFitted","align","newProps","index","setIndex","React","useState","defaultIndex","changeHandler","activeIndex","setAlign","memo","forwardRef"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;;;;;AAEA,MAAMA,IAAI,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAY,KAAGC;AAAf,CAAD,EAAqCC,GAArC,KAAkD;AAC7D,QAAM;AACJC,IAAAA,QADI;AAEJC,IAAAA,cAFI;AAGJC,IAAAA,gBAHI;AAIJC,IAAAA,WAJI;AAKJC,IAAAA,QALI;AAMJC,IAAAA,KANI;AAOJ,OAAGC;AAPC,MAQF,0BAAc,MAAd,EAAsBR,KAAtB,CARJ;;AASA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBC,eAAMC,QAAN,CACxBZ,KAAK,CAACS,KAAN,IAAeT,KAAK,CAACa,YAArB,IAAqC,CADb,CAA1B;;AAGA,QAAMC,aAAa,GAAIC,WAAD,IAAyB;AAC7CL,IAAAA,QAAQ,CAACK,WAAD,CAAR;AACAb,IAAAA,QAAQ,IAAIA,QAAQ,CAACa,WAAD,CAApB;AACD,GAHD;;AAIA,QAAMC,QAAQ,GAAG,MAAM;AACrB,YAAQT,KAAR;AACE,WAAK,OAAL;AACE,eAAO,YAAP;;AACF,WAAK,KAAL;AACE,eAAO,UAAP;;AACF,WAAK,QAAL;AACE,eAAO,QAAP;;AACF;AACE,eAAO,YAAP;AARJ;AAUD,GAXD;;AAaA,sBACE,6BAAC,oBAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLQ,MAAAA,WAAW,EAAEN,KADR;AAELK,MAAAA,aAFK;AAGLX,MAAAA,cAHK;AAILC,MAAAA,gBAJK;AAKLC,MAAAA,WALK;AAMLC,MAAAA,QANK;AAOLC,MAAAA,KAAK,EAAES,QAAQ;AAPV;AADT,kBAWE,6BAAC,YAAD;AAAK,IAAA,KAAK,EAAC;AAAX,KAAsBR,QAAtB;AAAgC,IAAA,GAAG,EAAEP;AAArC,MACGF,QADH,CAXF,CADF;AAiBD,CA/CD;;4BAiDeY,eAAMM,IAAN,eAAWN,eAAMO,UAAN,CAAiBpB,IAAjB,CAAX,C","sourcesContent":["import React from 'react';\nimport Box from '../../primitives/Box';\nimport type { ITabsProps } from './types';\nimport { useThemeProps } from '../../../hooks';\nimport { TabsContext } from './Context';\n\nconst Tabs = ({ children, ...props }: ITabsProps, ref: any) => {\n  const {\n    onChange,\n    activeTabStyle,\n    inactiveTabStyle,\n    tabBarStyle,\n    isFitted,\n    align,\n    ...newProps\n  } = useThemeProps('Tabs', props);\n  const [index, setIndex] = React.useState(\n    props.index || props.defaultIndex || 0\n  );\n  const changeHandler = (activeIndex: number) => {\n    setIndex(activeIndex);\n    onChange && onChange(activeIndex);\n  };\n  const setAlign = () => {\n    switch (align) {\n      case 'start':\n        return 'flex-start';\n      case 'end':\n        return 'flex-end';\n      case 'center':\n        return 'center';\n      default:\n        return 'flex-start';\n    }\n  };\n\n  return (\n    <TabsContext.Provider\n      value={{\n        activeIndex: index,\n        changeHandler,\n        activeTabStyle,\n        inactiveTabStyle,\n        tabBarStyle,\n        isFitted,\n        align: setAlign(),\n      }}\n    >\n      <Box width=\"100%\" {...newProps} ref={ref}>\n        {children}\n      </Box>\n    </TabsContext.Provider>\n  );\n};\n\nexport default React.memo(React.forwardRef(Tabs));\n"]}