"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ButtonGroup", {
  enumerable: true,
  get: function () {
    return _ButtonGroup.ButtonGroup;
  }
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _native = _interopRequireDefault(require("styled-components/native"));

var _styledSystem = require("styled-system");

var _hooks = require("../../../hooks");

var _theme = require("../../../theme");

var _customProps = require("../../../utils/customProps");

var _Text = _interopRequireDefault(require("../../primitives/Text"));

var _Box = _interopRequireDefault(require("../Box"));

var _Flex = _interopRequireDefault(require("../Flex"));

var _Spinner = _interopRequireDefault(require("../Spinner"));

var _button = require("@react-native-aria/button");

var _ButtonGroup = require("./ButtonGroup");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const StyledButton = (0, _native.default)(_reactNative.TouchableOpacity)(_styledSystem.color, _styledSystem.space, _styledSystem.layout, _styledSystem.flexbox, _styledSystem.border, _styledSystem.position, _customProps.customPosition, _customProps.customBorder, _customProps.customBackground, _customProps.customOutline, _customProps.customShadow, _customProps.customExtra, _customProps.customLayout);

const Button = ({
  style,
  children,
  highlight,
  isLoading,
  isLoadingText,
  size,
  startIcon,
  endIcon,
  spinner,
  ...props
}, ref) => {
  const {
    _text,
    ...newProps
  } = (0, _hooks.useThemeProps)('Button', { ...props,
    size
  });

  let [layoutProps, viewProps] = _theme.themeTools.extractInObject(newProps, ['m', 'margin', 'mt', 'marginTop', 'mr', 'marginRight', 'mb', 'marginBottom', 'ml', 'marginLeft', 'mx', 'marginX', 'my', 'marginY', 'left', 'top', 'bottom', 'right', 'position', 'minH', 'minHeight', 'minWidth', 'minW', 'height', 'width']);

  const [commonProps] = _theme.themeTools.extractInObject(layoutProps, ['minH', 'minHeight', 'minWidth', 'minW', 'height', 'width']);

  let [accessibilityProps, innerButtonProps] = _theme.themeTools.extractInObject(viewProps, ['accessible', 'accessibilityRole', 'accessibilityState', 'accessibilityLabel', 'accessibilityHint', 'isDisabled', 'onPress']);

  accessibilityProps.isDisabled = accessibilityProps.isDisabled || isLoading;

  const innerButton = /*#__PURE__*/_react.default.createElement(_Box.default, _extends({}, innerButtonProps, commonProps), startIcon ? /*#__PURE__*/_react.default.createElement(_Box.default, {
    mr: Math.floor(innerButtonProps.px / 2) || 2
  }, startIcon) : null, isLoading ? /*#__PURE__*/_react.default.createElement(_Flex.default, {
    direction: "row"
  }, spinner ? spinner : /*#__PURE__*/_react.default.createElement(_Spinner.default, {
    color: _text === null || _text === void 0 ? void 0 : _text.color,
    size: "sm"
  }), /*#__PURE__*/_react.default.createElement(_Text.default, _text, isLoadingText ? ' ' + isLoadingText : '')) : _react.default.Children.count(children) > 1 || typeof children !== 'string' ? children : /*#__PURE__*/_react.default.createElement(_Text.default, _text, children), endIcon ? /*#__PURE__*/_react.default.createElement(_Box.default, {
    ml: Math.floor(innerButtonProps.px / 2) || 2
  }, endIcon) : null);

  const ariaProps = (0, _button.useButton)({ ...accessibilityProps,
    children
  }, ref);
  return /*#__PURE__*/_react.default.createElement(StyledButton, _extends({
    activeOpacity: highlight ? highlight : 0.8,
    ref: ref,
    style: style
  }, accessibilityProps, ariaProps, layoutProps, {
    opacity: isLoading ? 0.8 : accessibilityProps.isDisabled ? 0.5 : 1
  }, _reactNative.Platform.OS === 'web' ? {
    disabled: accessibilityProps.isDisabled,
    cursor: accessibilityProps.isDisabled ? 'not-allowed' : 'auto'
  } : {}), innerButton);
};

var _default = /*#__PURE__*/_react.default.memo( /*#__PURE__*/_react.default.forwardRef(Button));

exports.default = _default;
//# sourceMappingURL=index.js.map