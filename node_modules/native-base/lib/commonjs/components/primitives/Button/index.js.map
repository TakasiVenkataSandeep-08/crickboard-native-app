{"version":3,"sources":["index.tsx"],"names":["StyledButton","TouchableOpacity","color","space","layout","flexbox","border","position","customPosition","customBorder","customBackground","customOutline","customShadow","customExtra","customLayout","Button","style","children","highlight","isLoading","isLoadingText","size","startIcon","endIcon","spinner","props","ref","_text","newProps","layoutProps","viewProps","themeTools","extractInObject","commonProps","accessibilityProps","innerButtonProps","isDisabled","innerButton","Math","floor","px","React","Children","count","ariaProps","Platform","OS","disabled","cursor","memo","forwardRef"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  TouchableOpacity,\n  TouchableOpacityProps,\n  Platform,\n} from 'react-native';\nimport styled from 'styled-components/native';\nimport { border, color, flexbox, layout, position, space } from 'styled-system';\nimport { useThemeProps } from '../../../hooks';\nimport { themeTools } from '../../../theme';\nimport {\n  customBackground,\n  customBorder,\n  customExtra,\n  customLayout,\n  customOutline,\n  customPosition,\n  customShadow,\n} from '../../../utils/customProps';\nimport Text from '../../primitives/Text';\nimport { default as Box, IBoxProps } from '../Box';\nimport Flex from '../Flex';\nimport Spinner from '../Spinner';\nimport type { IButtonGroupProps, IButtonProps } from './types';\nimport { useButton } from '@react-native-aria/button';\n\nconst StyledButton = styled(TouchableOpacity)<\n  IButtonProps & TouchableOpacityProps\n>(\n  color,\n  space,\n  layout,\n  flexbox,\n  border,\n  position,\n  customPosition,\n  customBorder,\n  customBackground,\n  customOutline,\n  customShadow,\n  customExtra,\n  customLayout\n);\nconst Button = (\n  {\n    style,\n    children,\n    highlight,\n    isLoading,\n    isLoadingText,\n    size,\n    startIcon,\n    endIcon,\n    spinner,\n    ...props\n  }: IButtonProps & IBoxProps,\n  ref: any\n) => {\n  const { _text, ...newProps } = useThemeProps('Button', {\n    ...props,\n    size,\n  });\n  let [layoutProps, viewProps] = themeTools.extractInObject(newProps, [\n    'm',\n    'margin',\n    'mt',\n    'marginTop',\n    'mr',\n    'marginRight',\n    'mb',\n    'marginBottom',\n    'ml',\n    'marginLeft',\n    'mx',\n    'marginX',\n    'my',\n    'marginY',\n    'left',\n    'top',\n    'bottom',\n    'right',\n    'position',\n    'minH',\n    'minHeight',\n    'minWidth',\n    'minW',\n    'height',\n    'width',\n  ]);\n  const [commonProps] = themeTools.extractInObject(layoutProps, [\n    'minH',\n    'minHeight',\n    'minWidth',\n    'minW',\n    'height',\n    'width',\n  ]);\n  let [\n    accessibilityProps,\n    innerButtonProps,\n  ] = themeTools.extractInObject(viewProps, [\n    'accessible',\n    'accessibilityRole',\n    'accessibilityState',\n    'accessibilityLabel',\n    'accessibilityHint',\n    'isDisabled',\n    'onPress',\n  ]);\n  accessibilityProps.isDisabled = accessibilityProps.isDisabled || isLoading;\n  const innerButton = (\n    <Box {...innerButtonProps} {...commonProps}>\n      {startIcon ? (\n        <Box mr={Math.floor(innerButtonProps.px / 2) || 2}>{startIcon}</Box>\n      ) : null}\n      {isLoading ? (\n        <Flex direction=\"row\">\n          {spinner ? spinner : <Spinner color={_text?.color} size=\"sm\" />}\n          <Text {..._text}>{isLoadingText ? ' ' + isLoadingText : ''}</Text>\n        </Flex>\n      ) : React.Children.count(children) > 1 || typeof children !== 'string' ? (\n        children\n      ) : (\n        <Text {..._text}>{children}</Text>\n      )}\n      {endIcon ? (\n        <Box ml={Math.floor(innerButtonProps.px / 2) || 2}>{endIcon}</Box>\n      ) : null}\n    </Box>\n  );\n\n  const ariaProps = useButton(\n    {\n      ...accessibilityProps,\n      children,\n    },\n    ref\n  );\n  return (\n    <StyledButton\n      activeOpacity={highlight ? highlight : 0.8}\n      ref={ref}\n      style={style}\n      {...accessibilityProps}\n      {...ariaProps}\n      {...layoutProps}\n      opacity={isLoading ? 0.8 : accessibilityProps.isDisabled ? 0.5 : 1}\n      {...(Platform.OS === 'web'\n        ? {\n            disabled: accessibilityProps.isDisabled,\n            cursor: accessibilityProps.isDisabled ? 'not-allowed' : 'auto',\n          }\n        : {})}\n    >\n      {innerButton}\n    </StyledButton>\n  );\n};\n\nexport { ButtonGroup } from './ButtonGroup';\nexport type { IButtonProps, IButtonGroupProps };\nexport default React.memo(React.forwardRef(Button));\n"]}