"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _Icon = _interopRequireDefault(require("../Icon"));

var _Box = _interopRequireDefault(require("../Box"));

var _hooks = require("../../../hooks");

var _utils = require("./../../../utils");

var _interactions = require("@react-native-aria/interactions");

var _radio = require("@react-native-aria/radio");

var _visuallyHidden = require("@react-aria/visually-hidden");

var _RadioGroup = require("./RadioGroup");

var _focus = require("@react-native-aria/focus");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const Radio = ({
  icon,
  children,
  ...props
}, ref) => {
  let contextState = _react.default.useContext(_RadioGroup.RadioContext);

  const {
    activeColor,
    borderColor,
    size,
    // isInvalid,
    ...newProps
  } = (0, _hooks.useThemeProps)('Radio', { ...contextState,
    ...props
  });

  const inputRef = _react.default.useRef(null);

  let {
    inputProps
  } = (0, _radio.useRadio)(props, contextState.state, inputRef); // only calling below function when icon exist.

  const sizedIcon = () => {
    var _icon$props$color;

    return (
      /*#__PURE__*/
      //@ts-ignore
      _react.default.cloneElement(icon, {
        size,
        color: //@ts-ignore
        ((_icon$props$color = icon.props.color) !== null && _icon$props$color !== void 0 ? _icon$props$color : isSelected) ? inputProps.disabled ? borderColor : activeColor : borderColor
      })
    );
  };

  let isSelected = contextState.state.selectedValue === props.value;

  const _ref = _react.default.useRef(null);

  const {
    isHovered
  } = (0, _interactions.useHover)({}, _ref);
  const mergedRefs = (0, _utils.mergeRefs)([_ref, ref]);
  const outlineColor = isHovered && !inputProps.disabled ? activeColor : isSelected ? inputProps.disabled ? borderColor : activeColor : borderColor;

  let component = /*#__PURE__*/_react.default.createElement(_Box.default, _extends({
    flexDirection: "row",
    justifyContent: "center",
    alignItems: "center"
  }, newProps, {
    opacity: inputProps.disabled ? 0.4 : 1
  }, _reactNative.Platform.OS === 'web' ? {
    disabled: inputProps.disabled,
    cursor: inputProps.disabled ? 'not-allowed' : 'auto'
  } : {}), /*#__PURE__*/_react.default.createElement(_Box.default, {
    borderColor: outlineColor,
    backgroundColor: inputProps.disabled ? 'muted.200' : 'transparent',
    borderWidth: 1,
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    borderRadius: 999,
    p: '2px'
  }, icon && isSelected ? sizedIcon() : /*#__PURE__*/_react.default.createElement(_Icon.default, {
    name: "circle",
    type: "MaterialCommunityIcons",
    size: size,
    color: isSelected ? inputProps.disabled ? borderColor : activeColor : 'transparent',
    opacity: isSelected ? 1 : 0
  })), children);

  const {
    focusProps,
    isFocusVisible
  } = (0, _focus.useFocusRing)();
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, _reactNative.Platform.OS === 'web' ? /*#__PURE__*/_react.default.createElement(_Box.default // @ts-ignore - RN web supports accessibilityRole="label"
  , {
    accessibilityRole: "label",
    ref: _ref,
    outlineWidth: isFocusVisible ? 1 : 0,
    outlineColor: activeColor,
    outlineStyle: 'solid'
  }, /*#__PURE__*/_react.default.createElement(_visuallyHidden.VisuallyHidden, null, /*#__PURE__*/_react.default.createElement("input", _extends({}, inputProps, {
    ref: ref
  }, focusProps))), component) : /*#__PURE__*/_react.default.createElement(_reactNative.TouchableOpacity, _extends({
    activeOpacity: 1,
    ref: mergedRefs
  }, inputProps), component));
};

var _default = /*#__PURE__*/_react.default.memo( /*#__PURE__*/_react.default.forwardRef(Radio));

exports.default = _default;
//# sourceMappingURL=Radio.js.map