"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _utils = require("./../../../utils");

var _hooks = require("../../../hooks");

var _Center = require("../../composites/Center");

var _FormControl = require("../../composites/FormControl");

var _Box = _interopRequireDefault(require("../Box"));

var _Icon = _interopRequireDefault(require("../Icon"));

var _toggle = require("@react-stately/toggle");

var _visuallyHidden = require("@react-aria/visually-hidden");

var _CheckboxGroup = require("./CheckboxGroup");

var _interactions = require("@react-native-aria/interactions");

var _checkbox = require("@react-native-aria/checkbox");

var _focus = require("@react-native-aria/focus");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const Checkbox = ({
  icon,
  ...props
}, ref) => {
  const formControlContext = _react.default.useContext(_FormControl.FormControlContext);

  const checkboxGroupContext = _react.default.useContext(_CheckboxGroup.CheckboxGroupContext);

  const {
    activeColor,
    borderColor,
    iconColor,
    size,
    ...newProps
  } = (0, _hooks.useThemeProps)('Checkbox', { ...checkboxGroupContext,
    ...formControlContext,
    ...props
  });

  let _ref = _react.default.useRef();

  const mergedRef = (0, _utils.mergeRefs)([ref, _ref]);
  let state = (0, _toggle.useToggleState)({ ...props,
    defaultSelected: props.defaultIsChecked,
    isSelected: props.isChecked
  });
  let groupState = (0, _react.useContext)(_CheckboxGroup.CheckboxGroupContext);
  const {
    isHovered
  } = (0, _interactions.useHover)({}, _ref); // Swap hooks depending on whether this checkbox is inside a CheckboxGroup.
  // This is a bit unorthodox. Typically, hooks cannot be called in a conditional,
  // but since the checkbox won't move in and out of a group, it should be safe.

  let {
    inputProps
  } = groupState ? // eslint-disable-next-line react-hooks/rules-of-hooks
  (0, _checkbox.useCheckboxGroupItem)({ ...newProps,
    value: newProps.value
  }, groupState.state, //@ts-ignore
  mergedRef) : // eslint-disable-next-line react-hooks/rules-of-hooks
  (0, _checkbox.useCheckbox)(newProps, state, //@ts-ignore
  mergedRef);
  const isChecked = inputProps.checked;
  const isDisabled = inputProps.disabled;
  const sizedIcon = icon ? () => /*#__PURE__*/_react.default.cloneElement(icon, {
    size,
    color: icon.props.color ? icon.props.color : iconColor
  }, icon.props.children) : null;
  const outlineColor = isHovered && !isDisabled ? activeColor : isChecked ? isDisabled ? borderColor : activeColor : borderColor;

  const component = /*#__PURE__*/_react.default.createElement(_Box.default, _extends({
    flexDirection: "row",
    alignItems: "center"
  }, newProps, {
    opacity: isDisabled ? 0.4 : 1
  }, _reactNative.Platform.OS === 'web' ? {
    disabled: isDisabled,
    cursor: isDisabled ? 'not-allowed' : 'auto'
  } : {}), /*#__PURE__*/_react.default.createElement(_Center.Center, {
    backgroundColor: isChecked ? isDisabled ? borderColor : activeColor : 'transparent',
    borderColor: outlineColor,
    borderWidth: 1,
    borderRadius: 4,
    p: 1
  }, icon && sizedIcon && isChecked ? sizedIcon() : /*#__PURE__*/_react.default.createElement(_Icon.default, {
    name: "check-bold",
    type: "MaterialCommunityIcons",
    size: size,
    color: iconColor,
    opacity: isChecked ? 1 : 0
  })), props.children);

  const {
    focusProps,
    isFocusVisible
  } = (0, _focus.useFocusRing)();
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, _reactNative.Platform.OS === 'web' ? /*#__PURE__*/_react.default.createElement(_Box.default // @ts-ignore - RN web supports accessibilityRole="label"
  , {
    accessibilityRole: "label",
    ref: mergedRef,
    outlineWidth: isFocusVisible ? 1 : 0,
    outlineColor: activeColor,
    outlineStyle: 'solid'
  }, /*#__PURE__*/_react.default.createElement(_visuallyHidden.VisuallyHidden, null, /*#__PURE__*/_react.default.createElement("input", _extends({}, inputProps, focusProps, {
    ref: mergedRef
  }))), component) : /*#__PURE__*/_react.default.createElement(_reactNative.TouchableOpacity, _extends({}, inputProps, {
    ref: mergedRef
  }), component));
};

var _default = /*#__PURE__*/_react.default.memo( /*#__PURE__*/_react.default.forwardRef(Checkbox));

exports.default = _default;
//# sourceMappingURL=Checkbox.js.map