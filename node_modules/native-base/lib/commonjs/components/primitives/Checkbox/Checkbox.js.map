{"version":3,"sources":["Checkbox.tsx"],"names":["Checkbox","icon","props","ref","formControlContext","React","useContext","FormControlContext","checkboxGroupContext","CheckboxGroupContext","activeColor","borderColor","iconColor","size","newProps","_ref","useRef","mergedRef","state","defaultSelected","defaultIsChecked","isSelected","isChecked","groupState","isHovered","inputProps","value","checked","isDisabled","disabled","sizedIcon","cloneElement","color","children","outlineColor","component","Platform","OS","cursor","focusProps","isFocusVisible","memo","forwardRef"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\nimport {\n  TouchableOpacity,\n  Platform,\n  TouchableOpacityProps,\n} from 'react-native';\nimport { mergeRefs } from './../../../utils';\nimport { useThemeProps } from '../../../hooks';\nimport { Center } from '../../composites/Center';\nimport {\n  FormControlContext,\n  IFormControlContext,\n} from '../../composites/FormControl';\nimport Box from '../Box';\nimport Icon from '../Icon';\nimport type { ICheckboxProps } from './types';\nimport { useToggleState } from '@react-stately/toggle';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { CheckboxGroupContext } from './CheckboxGroup';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useCheckbox, useCheckboxGroupItem } from '@react-native-aria/checkbox';\nimport { useFocusRing } from '@react-native-aria/focus';\n\nconst Checkbox = ({ icon, ...props }: ICheckboxProps, ref: any) => {\n  const formControlContext: IFormControlContext = React.useContext(\n    FormControlContext\n  );\n\n  const checkboxGroupContext = React.useContext(CheckboxGroupContext);\n  const {\n    activeColor,\n    borderColor,\n    iconColor,\n    size,\n    ...newProps\n  } = useThemeProps('Checkbox', {\n    ...checkboxGroupContext,\n    ...formControlContext,\n    ...props,\n  });\n  let _ref = React.useRef();\n  const mergedRef = mergeRefs([ref, _ref]);\n  let state = useToggleState({\n    ...props,\n    defaultSelected: props.defaultIsChecked,\n    isSelected: props.isChecked,\n  });\n  let groupState = useContext(CheckboxGroupContext);\n  const { isHovered } = useHover({}, _ref);\n\n  // Swap hooks depending on whether this checkbox is inside a CheckboxGroup.\n  // This is a bit unorthodox. Typically, hooks cannot be called in a conditional,\n  // but since the checkbox won't move in and out of a group, it should be safe.\n  let { inputProps } = groupState\n    ? // eslint-disable-next-line react-hooks/rules-of-hooks\n      useCheckboxGroupItem(\n        {\n          ...newProps,\n          value: newProps.value,\n        },\n        groupState.state,\n        //@ts-ignore\n        mergedRef\n      )\n    : // eslint-disable-next-line react-hooks/rules-of-hooks\n      useCheckbox(\n        newProps,\n        state,\n        //@ts-ignore\n        mergedRef\n      );\n\n  const isChecked = inputProps.checked;\n  const isDisabled = inputProps.disabled;\n  const sizedIcon = icon\n    ? () =>\n        React.cloneElement(\n          icon,\n          {\n            size,\n            color: icon.props.color ? icon.props.color : iconColor,\n          },\n          icon.props.children\n        )\n    : null;\n  const outlineColor =\n    isHovered && !isDisabled\n      ? activeColor\n      : isChecked\n      ? isDisabled\n        ? borderColor\n        : activeColor\n      : borderColor;\n  const component = (\n    <Box\n      flexDirection=\"row\"\n      alignItems=\"center\"\n      {...newProps}\n      opacity={isDisabled ? 0.4 : 1}\n      {...(Platform.OS === 'web'\n        ? {\n            disabled: isDisabled,\n            cursor: isDisabled ? 'not-allowed' : 'auto',\n          }\n        : {})}\n    >\n      <Center\n        backgroundColor={\n          isChecked ? (isDisabled ? borderColor : activeColor) : 'transparent'\n        }\n        borderColor={outlineColor}\n        borderWidth={1}\n        borderRadius={4}\n        p={1}\n      >\n        {icon && sizedIcon && isChecked ? (\n          sizedIcon()\n        ) : (\n          <Icon\n            name=\"check-bold\"\n            type=\"MaterialCommunityIcons\"\n            size={size}\n            color={iconColor}\n            opacity={isChecked ? 1 : 0}\n          />\n        )}\n      </Center>\n      {props.children}\n    </Box>\n  );\n\n  const { focusProps, isFocusVisible } = useFocusRing();\n\n  return (\n    <>\n      {Platform.OS === 'web' ? (\n        <Box\n          // @ts-ignore - RN web supports accessibilityRole=\"label\"\n          accessibilityRole=\"label\"\n          ref={mergedRef}\n          outlineWidth={isFocusVisible ? 1 : 0}\n          outlineColor={activeColor}\n          outlineStyle={'solid'}\n        >\n          <VisuallyHidden>\n            <input {...inputProps} {...focusProps} ref={mergedRef}></input>\n          </VisuallyHidden>\n\n          {component}\n        </Box>\n      ) : (\n        <TouchableOpacity\n          {...(inputProps as TouchableOpacityProps)}\n          ref={mergedRef}\n        >\n          {component}\n        </TouchableOpacity>\n      )}\n    </>\n  );\n};\n\nexport default React.memo(React.forwardRef(Checkbox));\n"]}