"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _toggle = require("@react-stately/toggle");

var _reactNative = require("react-native");

var _native = _interopRequireDefault(require("styled-components/native"));

var _isNil = _interopRequireDefault(require("lodash/isNil"));

var _hooks = require("../../../hooks");

var _styledSystem = require("styled-system");

var _customProps = require("../../../utils/customProps");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const StyledNBSwitch = (0, _native.default)(_reactNative.Switch)(_styledSystem.color, _styledSystem.space, _styledSystem.layout, _styledSystem.flexbox, _styledSystem.border, _styledSystem.position, _customProps.customPosition, _customProps.customBorder, _customProps.customBackground, _customProps.customOutline, _customProps.customShadow, _customProps.customExtra, _customProps.customLayout);

const Switch = ({
  style,
  onToggle,
  isDisabled,
  isInvalid,
  isChecked,
  defaultIsChecked,
  accessibilityLabel,
  accessibilityHint,
  ...props
}, ref) => {
  var _newProps$transform;

  const state = (0, _toggle.useToggleState)({
    defaultSelected: !(0, _isNil.default)(defaultIsChecked) ? defaultIsChecked : false
  });
  const {
    onTrackColor: _onTrackColor,
    offTrackColor: _offTrackColor,
    onThumbColor: _onThumbColor,
    offThumbColor: _offThumbColor,
    ...newProps
  } = (0, _hooks.useThemeProps)('Switch', props);
  const borderColorInvalid = (0, _hooks.useToken)('colors', 'danger.600');
  const checked = !(0, _isNil.default)(isChecked) ? isChecked : state.isSelected;
  const onTrackColor = (0, _hooks.useToken)('colors', _onTrackColor);
  const offTrackColor = (0, _hooks.useToken)('colors', _offTrackColor);
  const onThumbColor = (0, _hooks.useToken)('colors', _onThumbColor);
  const offThumbColor = (0, _hooks.useToken)('colors', _offThumbColor);
  const inValidPropFactors = {
    borderWidth: 1,
    borderRadius: 16,
    borderColor: borderColorInvalid
  };

  let computedStyle = _reactNative.StyleSheet.flatten([style, {
    transform: (_newProps$transform = newProps.transform) !== null && _newProps$transform !== void 0 ? _newProps$transform : undefined
  }, isInvalid ? inValidPropFactors : {}]);

  return /*#__PURE__*/_react.default.createElement(StyledNBSwitch, _extends({
    accessibilityLabel: accessibilityLabel,
    accessibilityHint: accessibilityHint,
    trackColor: {
      false: offTrackColor,
      true: onTrackColor
    },
    thumbColor: checked ? onThumbColor : offThumbColor,
    ios_backgroundColor: offTrackColor
  }, newProps, {
    disabled: isDisabled,
    onValueChange: onToggle ? onToggle : state.toggle,
    value: checked,
    style: computedStyle,
    ref: ref,
    opacity: isDisabled ? 0.4 : 1
  }));
};

var _default = /*#__PURE__*/_react.default.memo( /*#__PURE__*/_react.default.forwardRef(Switch));

exports.default = _default;
//# sourceMappingURL=index.js.map