{"version":3,"sources":["SelectItem.tsx"],"names":["Item","isDisabled","label","value","_label","style","props","parentComponentConfig","newProps","variant","selectedValue","closeMenu","selectedItemBg","_selectedItem","onValueChange","itemsList","_item","width","currentIndex","forEach","item","index","textProps","undefined","React","memo"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;AACA;;;;;;AAEO,MAAMA,IAAI,GAAG,CAAC;AACnBC,EAAAA,UADmB;AAEnBC,EAAAA,KAFmB;AAGnBC,EAAAA,KAHmB;AAInBC,EAAAA,MAJmB;AAKnBC,EAAAA,KALmB;AAMnB,KAAGC;AANgB,CAAD,KAOI;AACtB,QAAM;AAAEC,IAAAA;AAAF,MAA4B,uBAAlC;AACA,QAAM,EAAE,GAAGC;AAAL,MAAkB,0BAAc,YAAd,EAA4BF,KAA5B,CAAxB;;AACA,MAAI,CAAAC,qBAAqB,SAArB,IAAAA,qBAAqB,WAArB,YAAAA,qBAAqB,CAAEE,OAAvB,MAAmC,QAAvC,EAAiD;AAC/C,UAAM;AACJC,MAAAA,aADI;AAEJC,MAAAA,SAFI;AAGJC,MAAAA,cAHI;AAIJC,MAAAA,aAJI;AAKJC,MAAAA,aALI;AAMJC,MAAAA,SANI;AAOJC,MAAAA,KAPI;AAQJC,MAAAA;AARI,QASFV,qBATJ;AAWA,QAAIW,YAAY,GAAG,CAAC,CAApB;AACAH,IAAAA,SAAS,CAACI,OAAV,CAAkB,CAACC,IAAD,EAAYC,KAAZ,KAA8B;AAC9C,UAAID,IAAI,CAACjB,KAAL,KAAeA,KAAnB,EAA0B;AACxBe,QAAAA,YAAY,GAAGG,KAAf;AACD;AACF,KAJD;AAKA,QAAIC,SAAS,GAAG,EAAE,GAAGN,KAAL;AAAY,SAAGZ;AAAf,KAAhB;;AACA,QAAIM,aAAa,KAAKP,KAAtB,EAA6B;AAC3BmB,MAAAA,SAAS,GAAG,EAAE,GAAGT;AAAL,OAAZ;AACD;;AACD,wBACE,6BAAC,eAAD;AACE,MAAA,KAAK,EAAEI,KAAF,aAAEA,KAAF,cAAEA,KAAF,GAAW;AADlB,OAEMT,QAFN;AAGE,MAAA,EAAE,EAAEE,aAAa,KAAKP,KAAlB,GAA0BS,cAA1B,GAA2CW,SAHjD;AAIE,MAAA,cAAc,EAAC,YAJjB;AAKE,MAAA,KAAK,EAAElB,KALT;AAME,MAAA,OAAO,EAAE,MAAM;AACb,YAAI,CAACJ,UAAL,EAAiB;AACfa,UAAAA,aAAa,CAACX,KAAD,EAAQe,YAAR,CAAb;AACAP,UAAAA,SAAS,IAAIA,SAAS,EAAtB;AACD;AACF;AAXH,qBAaE,6BAAC,aAAD;AAAM,MAAA,QAAQ,EAAC,IAAf;AAAoB,MAAA,GAAG,wBAAiBR,KAAjB;AAAvB,OAAqDmB,SAArD,GACGpB,KADH,CAbF,CADF;AAmBD,GAzCD,MAyCO;AACL,wBAAO,6BAAC,cAAD,CAAU,IAAV;AAAe,MAAA,KAAK,EAAEA,KAAtB;AAA6B,MAAA,KAAK,EAAEC;AAApC,MAAP;AACD;AACF,CAtDM;;;;4BAwDQqB,eAAMC,IAAN,CAAWzB,IAAX,C","sourcesContent":["import React from 'react';\nimport type { ISelectItemProps } from './types';\nimport { usePopover } from '../../../core';\nimport Button from '../Button';\nimport Text from '../Text';\nimport { Picker as RNPicker } from '@react-native-picker/picker';\nimport { useThemeProps } from '../../../hooks';\n\nexport const Item = ({\n  isDisabled,\n  label,\n  value,\n  _label,\n  style,\n  ...props\n}: ISelectItemProps) => {\n  const { parentComponentConfig } = usePopover();\n  const { ...newProps } = useThemeProps('SelectItem', props);\n  if (parentComponentConfig?.variant === 'styled') {\n    const {\n      selectedValue,\n      closeMenu,\n      selectedItemBg,\n      _selectedItem,\n      onValueChange,\n      itemsList,\n      _item,\n      width,\n    } = parentComponentConfig;\n\n    let currentIndex = -1;\n    itemsList.forEach((item: any, index: number) => {\n      if (item.value === value) {\n        currentIndex = index;\n      }\n    });\n    let textProps = { ..._item, ..._label };\n    if (selectedValue === value) {\n      textProps = { ..._selectedItem };\n    }\n    return (\n      <Button\n        width={width ?? 150}\n        {...newProps}\n        bg={selectedValue === value ? selectedItemBg : undefined}\n        justifyContent=\"flex-start\"\n        style={style}\n        onPress={() => {\n          if (!isDisabled) {\n            onValueChange(value, currentIndex);\n            closeMenu && closeMenu();\n          }\n        }}\n      >\n        <Text fontSize=\"sm\" key={`select-item-${value}`} {...textProps}>\n          {label}\n        </Text>\n      </Button>\n    );\n  } else {\n    return <RNPicker.Item label={label} value={value} />;\n  }\n};\n\nexport default React.memo(Item);\n"]}