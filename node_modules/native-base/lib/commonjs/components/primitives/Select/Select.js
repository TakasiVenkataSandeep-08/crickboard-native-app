"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _Text = _interopRequireDefault(require("../Text"));

var _core = require("../../../core");

var _Button = _interopRequireDefault(require("../Button"));

var _reactNative = require("react-native");

var _hooks = require("../../../hooks");

var _interactions = require("@react-native-aria/interactions");

var _picker = require("@react-native-picker/picker");

var _native = _interopRequireDefault(require("styled-components/native"));

var _styledSystem = require("styled-system");

var _customProps = require("../../../utils/customProps");

var _useToken = require("../../../hooks/useToken");

var _FormControl = require("../../composites/FormControl");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const StyledNativePicker = (0, _native.default)(_picker.Picker)(_styledSystem.flex, _styledSystem.color, _styledSystem.space, _styledSystem.layout, _styledSystem.flexbox, _styledSystem.border, _styledSystem.typography, _customProps.customBorder, _customProps.customBackground, _customProps.customOutline, _customProps.customShadow, _customProps.customExtra, _customProps.customTypography, _customProps.customLayout);

const Select = ({
  onValueChange,
  selectedValue,
  children,
  dropdownIcon,
  dropdownOpenIcon,
  dropdownCloseIcon,
  ...props
}, ref) => {
  const formControlContext = _react.default.useContext(_FormControl.FormControlContext);

  const {
    variant,
    _item,
    _ios,
    _web,
    _android,
    _placeholder,
    placeholder,
    selectedItemBg,
    _selectedItem,
    _hover,
    isInvalid,
    _isInvalid,
    isDisabled,
    _isDisabled,
    width,
    style,
    color,
    androidMode,
    androidIconColor,
    androidPrompt,
    ...newProps
  } = (0, _hooks.useThemeProps)('Select', { ...formControlContext,
    ...props
  });

  let triggerRef = _react.default.useRef();

  const {
    isHovered
  } = (0, _interactions.useHover)({}, ref !== null && ref !== void 0 ? ref : triggerRef);

  let [isOpen, toggle] = _react.default.useState(false);

  const updatedChildren = _react.default.Children.map(children, child => {
    return /*#__PURE__*/_react.default.cloneElement(child, {
      variant: variant
    }, child.props.children);
  });

  let itemsList = _react.default.Children.map(updatedChildren, child => {
    return {
      label: child.props.label,
      value: child.props.value
    };
  });

  const {
    setPopover,
    closePopover
  } = (0, _core.usePopover)();

  const closeMenu = () => {
    closePopover();
    toggle(false);
  };

  const openMenu = () => {
    if (!isDisabled) {
      setPopover( /*#__PURE__*/_react.default.createElement(_reactNative.ScrollView, null, children), {
        triggerRef,
        animationDuration: 200,
        onClose: closeMenu,
        placeOverTriggerElement: false,
        parentComponentConfig: {
          open: isOpen,
          closeMenu,
          closeOnSelect: true,
          selectedValue,
          selectedItemBg,
          _selectedItem,
          onValueChange,
          itemsList,
          _item,
          width,
          variant: 'styled'
        }
      });
      toggle(true);
    }
  };

  const selectedItemArray = itemsList.filter(item => item.value === selectedValue);
  const selectedItem = selectedItemArray && selectedItemArray.length ? selectedItemArray[0] : null;
  let icon = !dropdownOpenIcon && !dropdownCloseIcon && dropdownIcon ? dropdownIcon : isOpen ? dropdownOpenIcon ? dropdownOpenIcon : null : dropdownCloseIcon ? dropdownCloseIcon : null;
  const placeholderProps = selectedItem ? {} : _placeholder;

  const StyledSelect = /*#__PURE__*/_react.default.createElement(_Button.default, _extends({
    onPress: openMenu,
    width: width,
    ref: ref !== null && ref !== void 0 ? ref : triggerRef
  }, newProps, {
    justifyContent: "space-between"
  }, isDisabled && _isDisabled, isInvalid && _isInvalid, isHovered && _hover, _reactNative.Platform.OS === 'web' ? {
    disabled: isDisabled,
    cursor: isDisabled ? 'not-allowed' : 'auto'
  } : {}, {
    style: style
  }), /*#__PURE__*/_react.default.createElement(_Text.default, _extends({
    opacity: selectedItem ? undefined : 0.5
  }, placeholderProps), selectedItem ? selectedItem.label : placeholder), icon);

  const NativeSelect = /*#__PURE__*/_react.default.createElement(StyledNativePicker // Not getting ref on web
  , _extends({
    ref: ref !== null && ref !== void 0 ? ref : triggerRef,
    enabled: !isDisabled
  }, newProps, {
    color: color,
    onValueChange: onValueChange,
    selectedValue: selectedValue,
    mode: androidMode,
    prompt: androidPrompt,
    dropdownIconColor: (0, _useToken.useToken)('colors', androidIconColor),
    itemStyle: {
      color: (0, _useToken.useToken)('colors', color),
      ..._item
    }
  }, _reactNative.Platform.OS === 'ios' && _ios, _reactNative.Platform.OS === 'android' && _android, _reactNative.Platform.OS === 'web' && _web, isDisabled && _isDisabled, isInvalid && _isInvalid, isHovered && _hover), updatedChildren);

  return variant === 'styled' ? StyledSelect : NativeSelect;
};

var _default = /*#__PURE__*/_react.default.forwardRef(Select);

exports.default = _default;
//# sourceMappingURL=Select.js.map