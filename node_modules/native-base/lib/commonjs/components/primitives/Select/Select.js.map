{"version":3,"sources":["Select.tsx"],"names":["StyledNativePicker","RNPicker","flex","color","space","layout","flexbox","border","typography","customBorder","customBackground","customOutline","customShadow","customExtra","customTypography","customLayout","Select","onValueChange","selectedValue","children","dropdownIcon","dropdownOpenIcon","dropdownCloseIcon","props","ref","formControlContext","React","useContext","FormControlContext","variant","_item","_ios","_web","_android","_placeholder","placeholder","selectedItemBg","_selectedItem","_hover","isInvalid","_isInvalid","isDisabled","_isDisabled","width","style","androidMode","androidIconColor","androidPrompt","newProps","triggerRef","useRef","isHovered","isOpen","toggle","useState","updatedChildren","Children","map","child","cloneElement","itemsList","label","value","setPopover","closePopover","closeMenu","openMenu","animationDuration","onClose","placeOverTriggerElement","parentComponentConfig","open","closeOnSelect","selectedItemArray","filter","item","selectedItem","length","icon","placeholderProps","StyledSelect","Platform","OS","disabled","cursor","undefined","NativeSelect","forwardRef"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Text from '../Text';\nimport type { ISelectProps } from './types';\nimport { usePopover } from '../../../core';\nimport Button from '../Button';\nimport { ScrollView } from 'react-native';\nimport { useThemeProps } from '../../../hooks';\nimport { useHover } from '@react-native-aria/interactions';\nimport { Picker as RNPicker } from '@react-native-picker/picker';\nimport styled from 'styled-components/native';\nimport {\n  border,\n  flex,\n  space,\n  color,\n  flexbox,\n  layout,\n  typography,\n} from 'styled-system';\nimport {\n  customBorder,\n  customBackground,\n  customOutline,\n  customLayout,\n  customExtra,\n  customShadow,\n  customTypography,\n} from '../../../utils/customProps';\nimport { Platform } from 'react-native';\nimport { useToken } from '../../../hooks/useToken';\nimport {\n  FormControlContext,\n  IFormControlContext,\n} from '../../composites/FormControl';\n\nconst StyledNativePicker = styled(RNPicker)<ISelectProps>(\n  flex,\n  color,\n  space,\n  layout,\n  flexbox,\n  border,\n  typography,\n  customBorder,\n  customBackground,\n  customOutline,\n  customShadow,\n  customExtra,\n  customTypography,\n  customLayout\n);\n\nconst Select = (\n  {\n    onValueChange,\n    selectedValue,\n    children,\n    dropdownIcon,\n    dropdownOpenIcon,\n    dropdownCloseIcon,\n    ...props\n  }: ISelectProps,\n  ref: any\n) => {\n  const formControlContext: IFormControlContext = React.useContext(\n    FormControlContext\n  );\n  const {\n    variant,\n    _item,\n    _ios,\n    _web,\n    _android,\n    _placeholder,\n    placeholder,\n    selectedItemBg,\n    _selectedItem,\n    _hover,\n    isInvalid,\n    _isInvalid,\n    isDisabled,\n    _isDisabled,\n    width,\n    style,\n    color,\n    androidMode,\n    androidIconColor,\n    androidPrompt,\n    ...newProps\n  } = useThemeProps('Select', { ...formControlContext, ...props });\n  let triggerRef = React.useRef();\n  const { isHovered } = useHover({}, ref ?? triggerRef);\n  let [isOpen, toggle] = React.useState<boolean>(false);\n  const updatedChildren = React.Children.map(children, (child: any) => {\n    return React.cloneElement(\n      child,\n      {\n        variant: variant,\n      },\n      child.props.children\n    );\n  });\n\n  let itemsList: Array<{ label: string; value: string }> = React.Children.map(\n    updatedChildren,\n    (child: any) => {\n      return {\n        label: child.props.label,\n        value: child.props.value,\n      };\n    }\n  );\n\n  const { setPopover, closePopover } = usePopover();\n  const closeMenu = () => {\n    closePopover();\n    toggle(false);\n  };\n  const openMenu = () => {\n    if (!isDisabled) {\n      setPopover(<ScrollView>{children}</ScrollView>, {\n        triggerRef,\n        animationDuration: 200,\n        onClose: closeMenu,\n        placeOverTriggerElement: false,\n        parentComponentConfig: {\n          open: isOpen,\n          closeMenu,\n          closeOnSelect: true,\n          selectedValue,\n          selectedItemBg,\n          _selectedItem,\n          onValueChange,\n          itemsList,\n          _item,\n          width,\n          variant: 'styled',\n        },\n      });\n      toggle(true);\n    }\n  };\n  const selectedItemArray = itemsList.filter(\n    (item: any) => item.value === selectedValue\n  );\n  const selectedItem =\n    selectedItemArray && selectedItemArray.length ? selectedItemArray[0] : null;\n  let icon =\n    !dropdownOpenIcon && !dropdownCloseIcon && dropdownIcon\n      ? dropdownIcon\n      : isOpen\n      ? dropdownOpenIcon\n        ? dropdownOpenIcon\n        : null\n      : dropdownCloseIcon\n      ? dropdownCloseIcon\n      : null;\n  const placeholderProps = selectedItem ? {} : _placeholder;\n\n  const StyledSelect = (\n    <Button\n      onPress={openMenu}\n      width={width}\n      ref={ref ?? triggerRef}\n      {...newProps}\n      justifyContent=\"space-between\"\n      {...(isDisabled && _isDisabled)}\n      {...(isInvalid && _isInvalid)}\n      {...(isHovered && _hover)}\n      {...(Platform.OS === 'web'\n        ? {\n            disabled: isDisabled,\n            cursor: isDisabled ? 'not-allowed' : 'auto',\n          }\n        : {})}\n      style={style}\n    >\n      <Text opacity={selectedItem ? undefined : 0.5} {...placeholderProps}>\n        {selectedItem ? selectedItem.label : placeholder}\n      </Text>\n      {icon}\n    </Button>\n  );\n\n  const NativeSelect = (\n    <StyledNativePicker\n      // Not getting ref on web\n      ref={ref ?? triggerRef}\n      enabled={!isDisabled}\n      {...newProps}\n      color={color}\n      onValueChange={onValueChange}\n      selectedValue={selectedValue}\n      mode={androidMode}\n      prompt={androidPrompt}\n      dropdownIconColor={useToken('colors', androidIconColor)}\n      itemStyle={{\n        color: useToken('colors', color),\n        ..._item,\n      }}\n      {...(Platform.OS === 'ios' && _ios)}\n      {...(Platform.OS === 'android' && _android)}\n      {...(Platform.OS === 'web' && _web)}\n      {...(isDisabled && _isDisabled)}\n      {...(isInvalid && _isInvalid)}\n      {...(isHovered && _hover)}\n    >\n      {updatedChildren}\n    </StyledNativePicker>\n  );\n  return variant === 'styled' ? StyledSelect : NativeSelect;\n};\n\nexport default React.forwardRef(Select);\n"]}