"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "InputRightAddon", {
  enumerable: true,
  get: function () {
    return _InputGroup.InputRightAddon;
  }
});
Object.defineProperty(exports, "InputGroup", {
  enumerable: true,
  get: function () {
    return _InputGroup.InputGroup;
  }
});
Object.defineProperty(exports, "InputLeftAddon", {
  enumerable: true,
  get: function () {
    return _InputGroup.InputLeftAddon;
  }
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _native = _interopRequireDefault(require("styled-components/native"));

var _styledSystem = require("styled-system");

var _customProps = require("../../../utils/customProps");

var _Box = _interopRequireDefault(require("../Box"));

var _Text = _interopRequireDefault(require("../Text"));

var _Flex = _interopRequireDefault(require("../Flex"));

var _InputGroup = require("./InputGroup");

var _hooks = require("../../../hooks");

var _theme = require("../../../theme");

var _interactions = require("@react-native-aria/interactions");

var _FormControl = require("../../composites/FormControl");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const StyledInput = (0, _native.default)(_reactNative.TextInput)(_styledSystem.flex, _styledSystem.color, _styledSystem.space, _styledSystem.layout, _styledSystem.flexbox, _styledSystem.border, _styledSystem.typography, _customProps.customBorder, _customProps.customBackground, _customProps.customOutline, _customProps.customShadow, _customProps.customExtra, _customProps.customTypography, _customProps.customLayout);

const Input = ({
  style,
  placeholder,
  errorMessage,
  _errorMessage,
  // isRequired,
  isFullWidth,
  onFocus,
  onBlur,
  ariaLabel,
  accessibilityLabel,
  InputLeftElement,
  InputRightElement,
  type,
  w,
  width,
  h,
  height,
  m,
  mr,
  ml,
  mt,
  mb,
  label,
  _label,
  placeholderTextColor,
  ...props
}, ref) => {
  const formControlContext = _react.default.useContext(_FormControl.FormControlContext);

  const layoutProps = {
    w,
    width,
    m,
    mr,
    ml,
    mt,
    mb
  };

  const [isFocused, setIsFocused] = _react.default.useState(false);

  const handleFocus = (focusState, callback) => {
    setIsFocused(focusState);
    callback();
  };

  let placeholderColor = (0, _hooks.useToken)('colors', placeholderTextColor !== null && placeholderTextColor !== void 0 ? placeholderTextColor : 'gray.400');

  if (typeof placeholderColor !== 'string') {
    placeholderColor = placeholderTextColor;
  }

  const {
    isInvalid,
    isDisabled,
    isReadOnly,
    borderColor: borderColorFromProps,
    fontSize,
    borderWidth,
    focusBorderColor,
    errorBorderColor,
    hoverBorderColor,
    borderBottomWidth,
    ...newProps
  } = (0, _hooks.useThemeProps)('Input', { ...formControlContext,
    ...props
  });
  const computedProps = {
    display: 'flex',
    flexDirection: 'row',
    h,
    height
  };

  let [, rem] = _theme.themeTools.extractInObject(newProps, ['p', 'px', 'py', 'pt', 'pb', 'pl', 'pr']);

  const slideAnim = _react.default.useRef(new _reactNative.Animated.Value(0)).current;

  const slideIn = () => {
    _reactNative.Animated.timing(slideAnim, {
      toValue: 0,
      duration: 200,
      useNativeDriver: _reactNative.Platform.OS !== 'web'
    }).start();
  };

  const slideOut = () => {
    _reactNative.Animated.timing(slideAnim, {
      // NOTE: Below 3 value are (padding + half of font + buffer)
      toValue: -(12 + Math.floor(fontSize / 2) + 2),
      duration: 200,
      useNativeDriver: _reactNative.Platform.OS !== 'web'
    }).start();
  };

  const _ref = _react.default.useRef(null);

  const {
    isHovered
  } = (0, _interactions.useHover)({}, _ref);
  let updatedBorderColor = borderColorFromProps;
  if (isHovered) updatedBorderColor = hoverBorderColor;else if (isFocused) updatedBorderColor = focusBorderColor;else if (isInvalid) updatedBorderColor = errorBorderColor;
  const focusStyle = {
    shadow: 3,
    shadowColor: '#2563EB'
  };
  return /*#__PURE__*/_react.default.createElement(_Box.default, _extends({
    w: isFullWidth ? '100%' : 'auto'
  }, layoutProps), /*#__PURE__*/_react.default.createElement(_Box.default, _extends({
    ref: _ref,
    borderColor: updatedBorderColor,
    borderWidth: borderWidth,
    borderBottomWidth: borderBottomWidth
  }, rem, isDisabled && newProps._isDisabledProps, computedProps, isFocused && _reactNative.Platform.OS === 'web' && focusStyle, {
    style: style
  }), InputLeftElement ? /*#__PURE__*/_react.default.createElement(_Flex.default, {
    justify: "center",
    align: "center",
    left: 0
  }, InputLeftElement) : null, isFocused && label && /*#__PURE__*/_react.default.createElement(_Flex.default, {
    position: "absolute"
  }, /*#__PURE__*/_react.default.createElement(_reactNative.Animated.View, {
    style: {
      transform: [{
        translateY: slideAnim,
        translateX: 4
      }]
    }
  }, /*#__PURE__*/_react.default.createElement(_Flex.default, _extends({}, newProps, {
    bg: "transparent"
  }), /*#__PURE__*/_react.default.createElement(_Box.default, {
    bg: "transparent",
    color: updatedBorderColor,
    fontSize: fontSize,
    _text: _label
  }, label, /*#__PURE__*/_react.default.createElement(_Box.default, {
    w: "120%",
    p: "1px",
    bg: "gray.50",
    position: "absolute",
    right: "-10%",
    bottom: "".concat(Math.floor(fontSize / 2) + (_reactNative.Platform.OS === 'ios' ? 1 : 0), "px"),
    zIndex: -1
  }))))), /*#__PURE__*/_react.default.createElement(StyledInput, _extends({}, newProps, {
    fontSize: fontSize,
    backgroundColor: "transparent",
    flex: 1,
    secureTextEntry: type === 'password',
    accessible: true,
    accessibilityLabel: ariaLabel || accessibilityLabel,
    onKeyPress: e => {
      e.persist();
    },
    onFocus: () => {
      slideOut();
      handleFocus(true, onFocus ? onFocus : () => {});
    },
    onBlur: e => {
      // TODO: animation not happening because of component rerender
      e.nativeEvent.text && slideIn();
      handleFocus(false, onBlur ? onBlur : () => {});
    },
    placeholder: isFocused && label ? '' : placeholder,
    placeholderTextColor: placeholderColor,
    editable: isDisabled || isReadOnly ? false : true // borderRadius={50} //Remove variant props from StyledInput
    ,
    borderWidth: undefined
  }, _reactNative.Platform.OS === 'web' ? {
    disabled: isDisabled,
    cursor: isDisabled ? 'not-allowed' : 'auto'
  } : {}, {
    style: [_reactNative.Platform.OS === 'web' && {
      // @ts-ignore
      outline: 'none'
    }],
    ref: ref
  })), InputRightElement ? /*#__PURE__*/_react.default.createElement(_Flex.default, {
    justify: "center",
    align: "center",
    right: 0
  }, InputRightElement) : null), isInvalid && errorMessage ? /*#__PURE__*/_react.default.createElement(_Text.default, _extends({
    ml: 2,
    color: "danger.600"
  }, _errorMessage), errorMessage) : null);
}; //-------------------------------- InputGroup and other Child components -------------------------------


var _default = /*#__PURE__*/_react.default.memo( /*#__PURE__*/_react.default.forwardRef(Input));

exports.default = _default;
//# sourceMappingURL=index.js.map