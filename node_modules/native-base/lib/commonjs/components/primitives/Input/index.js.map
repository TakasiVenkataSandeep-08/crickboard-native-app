{"version":3,"sources":["index.tsx"],"names":["StyledInput","TextInput","flex","color","space","layout","flexbox","border","typography","customBorder","customBackground","customOutline","customShadow","customExtra","customTypography","customLayout","Input","style","placeholder","errorMessage","_errorMessage","isFullWidth","onFocus","onBlur","ariaLabel","accessibilityLabel","InputLeftElement","InputRightElement","type","w","width","h","height","m","mr","ml","mt","mb","label","_label","placeholderTextColor","props","ref","formControlContext","React","useContext","FormControlContext","layoutProps","isFocused","setIsFocused","useState","handleFocus","focusState","callback","placeholderColor","isInvalid","isDisabled","isReadOnly","borderColor","borderColorFromProps","fontSize","borderWidth","focusBorderColor","errorBorderColor","hoverBorderColor","borderBottomWidth","newProps","computedProps","display","flexDirection","rem","themeTools","extractInObject","slideAnim","useRef","Animated","Value","current","slideIn","timing","toValue","duration","useNativeDriver","Platform","OS","start","slideOut","Math","floor","_ref","isHovered","updatedBorderColor","focusStyle","shadow","shadowColor","_isDisabledProps","transform","translateY","translateX","e","persist","nativeEvent","text","undefined","disabled","cursor","outline","memo","forwardRef"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { TextInput, Animated, Platform } from 'react-native';\nimport styled from 'styled-components/native';\nimport {\n  border,\n  flex,\n  space,\n  color,\n  flexbox,\n  layout,\n  typography,\n} from 'styled-system';\nimport {\n  customBorder,\n  customBackground,\n  customOutline,\n  customLayout,\n  customExtra,\n  customShadow,\n  customTypography,\n} from '../../../utils/customProps';\nimport Box from '../Box';\nimport Text from '../Text';\nimport Flex from '../Flex';\nimport type { IInputProps } from './types';\nimport { InputRightAddon, InputGroup, InputLeftAddon } from './InputGroup';\nimport { useThemeProps, useToken } from '../../../hooks';\nimport { themeTools } from '../../../theme';\nimport { useHover } from '@react-native-aria/interactions';\nimport {\n  FormControlContext,\n  IFormControlContext,\n} from '../../composites/FormControl';\n\nconst StyledInput = styled(TextInput)<IInputProps>(\n  flex,\n  color,\n  space,\n  layout,\n  flexbox,\n  border,\n  typography,\n  customBorder,\n  customBackground,\n  customOutline,\n  customShadow,\n  customExtra,\n  customTypography,\n  customLayout\n);\n\nconst Input = (\n  {\n    style,\n    placeholder,\n    errorMessage,\n    _errorMessage,\n    // isRequired,\n    isFullWidth,\n    onFocus,\n    onBlur,\n    ariaLabel,\n    accessibilityLabel,\n    InputLeftElement,\n    InputRightElement,\n    type,\n    w,\n    width,\n    h,\n    height,\n    m,\n    mr,\n    ml,\n    mt,\n    mb,\n    label,\n    _label,\n    placeholderTextColor,\n    ...props\n  }: IInputProps,\n  ref: any\n) => {\n  const formControlContext: IFormControlContext = React.useContext(\n    FormControlContext\n  );\n  const layoutProps = {\n    w,\n    width,\n    m,\n    mr,\n    ml,\n    mt,\n    mb,\n  };\n  const [isFocused, setIsFocused] = React.useState(false);\n  const handleFocus = (focusState: boolean, callback: any) => {\n    setIsFocused(focusState);\n    callback();\n  };\n\n  let placeholderColor = useToken('colors', placeholderTextColor ?? 'gray.400');\n\n  if (typeof placeholderColor !== 'string') {\n    placeholderColor = placeholderTextColor;\n  }\n  const {\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    borderColor: borderColorFromProps,\n    fontSize,\n    borderWidth,\n    focusBorderColor,\n    errorBorderColor,\n    hoverBorderColor,\n    borderBottomWidth,\n    ...newProps\n  } = useThemeProps('Input', { ...formControlContext, ...props });\n\n  const computedProps = {\n    display: 'flex',\n    flexDirection: 'row',\n    h,\n    height,\n  };\n  let [, rem] = themeTools.extractInObject(newProps, [\n    'p',\n    'px',\n    'py',\n    'pt',\n    'pb',\n    'pl',\n    'pr',\n  ]);\n\n  const slideAnim = React.useRef(new Animated.Value(0)).current;\n  const slideIn = () => {\n    Animated.timing(slideAnim, {\n      toValue: 0,\n      duration: 200,\n      useNativeDriver: Platform.OS !== 'web',\n    }).start();\n  };\n\n  const slideOut = () => {\n    Animated.timing(slideAnim, {\n      // NOTE: Below 3 value are (padding + half of font + buffer)\n      toValue: -(12 + Math.floor(fontSize / 2) + 2),\n      duration: 200,\n      useNativeDriver: Platform.OS !== 'web',\n    }).start();\n  };\n\n  const _ref = React.useRef(null);\n  const { isHovered } = useHover({}, _ref);\n\n  let updatedBorderColor = borderColorFromProps;\n  if (isHovered) updatedBorderColor = hoverBorderColor;\n  else if (isFocused) updatedBorderColor = focusBorderColor;\n  else if (isInvalid) updatedBorderColor = errorBorderColor;\n  const focusStyle = {\n    shadow: 3,\n    shadowColor: '#2563EB',\n  };\n\n  return (\n    <Box w={isFullWidth ? '100%' : 'auto'} {...layoutProps}>\n      <Box\n        ref={_ref}\n        borderColor={updatedBorderColor}\n        borderWidth={borderWidth}\n        borderBottomWidth={borderBottomWidth}\n        {...rem}\n        {...(isDisabled && newProps._isDisabledProps)}\n        {...computedProps}\n        {...(isFocused && Platform.OS === 'web' && focusStyle)}\n        style={style}\n      >\n        {InputLeftElement ? (\n          <Flex justify=\"center\" align=\"center\" left={0}>\n            {InputLeftElement}\n          </Flex>\n        ) : null}\n        {isFocused && label && (\n          <Flex position=\"absolute\">\n            <Animated.View\n              style={{\n                transform: [{ translateY: slideAnim, translateX: 4 }],\n              }}\n            >\n              <Flex {...newProps} bg=\"transparent\">\n                <Box\n                  bg=\"transparent\"\n                  color={updatedBorderColor}\n                  fontSize={fontSize}\n                  _text={_label}\n                >\n                  {label}\n                  <Box\n                    w=\"120%\"\n                    p=\"1px\"\n                    bg=\"gray.50\"\n                    position=\"absolute\"\n                    right=\"-10%\"\n                    bottom={`${\n                      Math.floor(fontSize / 2) + (Platform.OS === 'ios' ? 1 : 0)\n                    }px`}\n                    zIndex={-1}\n                  />\n                </Box>\n              </Flex>\n            </Animated.View>\n          </Flex>\n        )}\n        <StyledInput\n          {...newProps}\n          fontSize={fontSize}\n          backgroundColor=\"transparent\"\n          flex={1}\n          secureTextEntry={type === 'password'}\n          accessible\n          accessibilityLabel={ariaLabel || accessibilityLabel}\n          onKeyPress={(e: any) => {\n            e.persist();\n          }}\n          onFocus={() => {\n            slideOut();\n            handleFocus(true, onFocus ? onFocus : () => {});\n          }}\n          onBlur={(e) => {\n            // TODO: animation not happening because of component rerender\n            e.nativeEvent.text && slideIn();\n            handleFocus(false, onBlur ? onBlur : () => {});\n          }}\n          placeholder={isFocused && label ? '' : placeholder}\n          placeholderTextColor={placeholderColor}\n          editable={isDisabled || isReadOnly ? false : true}\n          // borderRadius={50} //Remove variant props from StyledInput\n          borderWidth={undefined}\n          {...(Platform.OS === 'web'\n            ? {\n                disabled: isDisabled,\n                cursor: isDisabled ? 'not-allowed' : 'auto',\n              }\n            : {})}\n          style={[\n            Platform.OS === 'web' && {\n              // @ts-ignore\n              outline: 'none',\n            },\n          ]}\n          ref={ref}\n        />\n        {InputRightElement ? (\n          <Flex justify=\"center\" align=\"center\" right={0}>\n            {InputRightElement}\n          </Flex>\n        ) : null}\n      </Box>\n\n      {isInvalid && errorMessage ? (\n        <Text ml={2} color=\"danger.600\" {..._errorMessage}>\n          {errorMessage}\n        </Text>\n      ) : null}\n    </Box>\n  );\n};\n\n//-------------------------------- InputGroup and other Child components -------------------------------\nexport { InputRightAddon, InputGroup, InputLeftAddon };\nexport type { IInputProps };\nexport default React.memo(React.forwardRef(Input));\n"]}