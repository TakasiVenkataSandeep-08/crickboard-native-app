{"version":3,"sources":["Slider.tsx"],"names":["NBSlider","React","PureComponent","barSize","deltaValue","value","props","defaultValue","PanResponder","create","onMoveShouldSetPanResponderCapture","onPanResponderMove","_event","gestureState","isDisabled","isReadOnly","onMove","onPanResponderRelease","onEndMove","onPanResponderTerminate","event","width","height","nativeEvent","layout","orientation","setState","range","offset","rangeMin","rangeMax","valueOffset","totalRange","percentage","max","min","incrementStep","accessibilityIncrementSteps","decrementStep","accessibilityDecrementSteps","actionName","Math","state","newDeltaValue","getValueFromStartOffset","dy","dx","onChange","capValueWithinRange","cappedVal","onChangeEnd","render","cappedValue","sliderOffset","getOffsetFromValue","trackColor","colorScheme","activeColor","panResponder","isReversed","thumbSize","sliderSize","onBarLayout","Platform","OS","disabled","cursor","accessibilityLabel","now","accessibilityHint","name","label","onAccessibilityAction","children","SliderContext","Slider","formControlContext","useContext","FormControlContext","newProps","memo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { PanResponder, Platform } from 'react-native';\nimport {\n  FormControlContext,\n  IFormControlContext,\n} from '../../composites/FormControl';\nimport Box from '../Box';\nimport { useThemeProps } from '../../../hooks';\nimport type { ISliderProps } from './types';\nimport { SliderContext } from './Context';\n\ntype StateType = {\n  barSize: number | null;\n  deltaValue: number;\n  value: number;\n};\n\nclass NBSlider extends React.PureComponent<\n  ISliderProps & {\n    thumbSize?: number;\n    sliderSize?: number;\n    activeColor?: string;\n  },\n  StateType\n> {\n  static contextType = SliderContext;\n  state = {\n    barSize: null,\n    deltaValue: 0,\n    value: this.props.defaultValue || 0,\n  };\n\n  panResponder = PanResponder.create({\n    onMoveShouldSetPanResponderCapture: () => true,\n    onPanResponderMove: (_event, gestureState) =>\n      !(this.props.isDisabled || this.props.isReadOnly) &&\n      this.onMove(gestureState),\n    onPanResponderRelease: () => this.onEndMove(),\n    onPanResponderTerminate: () => {},\n  });\n\n  onMove(gestureState: any) {\n    const { barSize } = this.state;\n    const { min = 0, max = 100 } = this.props;\n    const newDeltaValue = this.getValueFromStartOffset(\n      this.props.orientation === 'vertical'\n        ? -gestureState.dy\n        : gestureState.dx,\n      barSize,\n      this.props.min || 0,\n      this.props.max || 100\n    );\n    this.props.onChange &&\n      this.props.onChange(\n        this.capValueWithinRange(this.state.value + newDeltaValue, [min, max])\n      );\n    this.setState({\n      deltaValue: newDeltaValue,\n    });\n  }\n  onEndMove() {\n    const { value, deltaValue } = this.state;\n    const { min = 0, max = 100 } = this.props;\n    const cappedVal = this.capValueWithinRange(value + deltaValue, [min, max]);\n    this.props.onChangeEnd && this.props.onChangeEnd(cappedVal);\n    this.setState({ value: cappedVal, deltaValue: 0 });\n  }\n\n  onBarLayout = (event: any) => {\n    const { width, height } = event.nativeEvent.layout;\n    const barSize = this.props.orientation === 'vertical' ? height : width;\n    this.setState({ barSize });\n  };\n\n  capValueWithinRange = (value: number, range: number[]) => {\n    if (value < range[0]) return range[0];\n    if (value > range[1]) return range[1];\n    return value;\n  };\n\n  getValueFromStartOffset = (\n    offset: number,\n    barSize: number | null,\n    rangeMin: number,\n    rangeMax: number\n  ) => {\n    if (barSize === null) return 0;\n    return ((rangeMax - rangeMin) * offset) / barSize;\n  };\n\n  getOffsetFromValue = (\n    value: number,\n    rangeMin: number,\n    rangeMax: number,\n    barSize: number | null\n  ) => {\n    if (barSize === null) return 0;\n    const valueOffset = value - rangeMin;\n    const totalRange = rangeMax - rangeMin;\n    const percentage = valueOffset / totalRange;\n    return barSize * percentage;\n  };\n\n  onAccessibilityAction = (event: any) => {\n    const max = this.props.max ?? 100;\n    const min = this.props.min ?? 0;\n\n    const incrementStep = this.props.accessibilityIncrementSteps ?? max / 10;\n    const decrementStep = this.props.accessibilityDecrementSteps ?? max / 10;\n\n    switch (event.nativeEvent.actionName) {\n      case 'increment':\n        this.setState({\n          value: Math.min(this.state.value + incrementStep, max),\n        });\n        break;\n      case 'decrement':\n        this.setState({\n          value: Math.max(this.state.value - decrementStep, min),\n        });\n        break;\n      default:\n        break;\n    }\n  };\n\n  render() {\n    const { value, deltaValue, barSize } = this.state;\n    const min = this.props.min ?? 0;\n    const max = this.props.max ?? 100;\n    const cappedValue = this.capValueWithinRange(value + deltaValue, [\n      min,\n      max,\n    ]);\n\n    const sliderOffset = this.getOffsetFromValue(\n      cappedValue,\n      min,\n      max,\n      barSize\n    );\n\n    return (\n      <SliderContext.Provider\n        value={{\n          sliderOffset,\n          trackColor: this.props.trackColor,\n          colorScheme: this.props.activeColor,\n          barSize: this.state.barSize,\n          panResponder: this.panResponder,\n          isReversed: this.props.isReversed,\n          thumbSize: this.props.thumbSize,\n          sliderSize: this.props.sliderSize,\n          orientation: this.props.orientation,\n          isDisabled: this.props.isDisabled,\n          value: this.state.value,\n        }}\n      >\n        <Box\n          position=\"relative\"\n          display=\"flex\"\n          my={3}\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          minHeight={3}\n          minWidth=\"100%\"\n          {...this.props}\n          onLayout={this.onBarLayout}\n          opacity={this.props.isDisabled ? 0.4 : 1}\n          {...(Platform.OS === 'web' && this.props.isDisabled\n            ? {\n                disabled: this.props.isDisabled,\n                cursor: this.props.isDisabled ? 'not-allowed' : 'auto',\n              }\n            : {})}\n          //A11y props\n\n          accessible\n          accessibilityRole=\"adjustable\"\n          accessibilityLabel={this.props.accessibilityLabel ?? 'Slider'}\n          accessibilityValue={{\n            min,\n            max,\n            now: value,\n          }}\n          accessibilityHint={this.props.accessibilityHint}\n          accessibilityActions={[\n            {\n              name: 'increment',\n              label: 'Increment',\n            },\n            {\n              name: 'decrement',\n              label: 'Decrement',\n            },\n          ]}\n          onAccessibilityAction={this.onAccessibilityAction}\n        >\n          {this.state.barSize && this.props.children}\n        </Box>\n      </SliderContext.Provider>\n    );\n  }\n}\n\nconst Slider = ({ ...props }: ISliderProps) => {\n  const formControlContext: IFormControlContext = React.useContext(\n    FormControlContext\n  );\n  const newProps = useThemeProps('Slider', {\n    ...formControlContext,\n    ...props,\n  });\n\n  return <NBSlider {...newProps} />;\n};\n\nexport default React.memo(Slider);\n"]}