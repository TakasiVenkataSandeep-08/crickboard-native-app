{"version":3,"sources":["useBreakpointValue.ts"],"names":["useBreakpointValue","values","windowWidth","width","theme","currentBreakpoint","breakpoints"],"mappings":";;;;;;;AAAA;;AACA;;AAKA;;AAEO,SAASA,kBAAT,CAA4BC,MAA5B,EAAyC;AAAA;;AAC9C,MAAIC,WAAW,2BAAG,uCAAH,yDAAG,qBAAuBC,KAAzC;AACA,QAAMC,KAAK,GAAG,yBAAd;;AACA,MAAI,qCAAyBH,MAAzB,CAAJ,EAAsC;AACpC,QAAII,iBAAiB,GAAG,iCACtBD,KAAK,CAACE,WADgB,EAEtBJ,WAFsB,CAAxB;AAIA,WAAO,oCAAwBD,MAAxB,EAAgCI,iBAAhC,CAAP;AACD,GAND,MAMO;AACL,WAAOJ,MAAP;AACD;AACF","sourcesContent":["import { useWindowDimensions } from 'react-native';\nimport {\n  getClosestBreakpoint,\n  hasValidBreakpointFormat,\n  findLastValidBreakpoint,\n} from '../theme/tools';\nimport { useTheme } from './../hooks/useTheme';\n\nexport function useBreakpointValue(values: any) {\n  let windowWidth = useWindowDimensions()?.width;\n  const theme = useTheme();\n  if (hasValidBreakpointFormat(values)) {\n    let currentBreakpoint = getClosestBreakpoint(\n      theme.breakpoints,\n      windowWidth\n    );\n    return findLastValidBreakpoint(values, currentBreakpoint);\n  } else {\n    return values;\n  }\n}\n"]}