"use strict";

var _react = _interopRequireDefault(require("react"));

var _useThemeProps = require("./../../hooks/useThemeProps");

var _NativeBaseProvider = require("../../core/NativeBaseProvider");

var _reactHooks = require("@testing-library/react-hooks");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('useThemeProps', () => {
  const wrapper = ({
    children
  }) => /*#__PURE__*/_react.default.createElement(_NativeBaseProvider.NativeBaseProvider, {
    initialWindowMetrics: {
      frame: {
        x: 0,
        y: 0,
        width: 0,
        height: 0
      },
      insets: {
        top: 0,
        left: 0,
        right: 0,
        bottom: 0
      }
    }
  }, children);

  test('Box component + no props', () => {
    const {
      result
    } = (0, _reactHooks.renderHook)(() => (0, _useThemeProps.useThemeProps)('Box', {}), {
      wrapper
    });
    expect(result.current).toEqual({});
  });
  test('Badge Component + no props', () => {
    const {
      result
    } = (0, _reactHooks.renderHook)(() => (0, _useThemeProps.useThemeProps)('Badge', {}), {
      wrapper
    });
    expect(result.current).toEqual({
      _text: {
        color: 'gray.700',
        fontSize: 'xs',
        fontWeight: 'bold',
        textTransform: 'uppercase'
      },
      px: 1,
      py: 1,
      borderRadius: 'lg',
      bg: 'gray.100',
      borderWidth: 1,
      borderColor: 'transparent'
    });
  });
  test('Badge + some props', () => {
    const {
      result
    } = (0, _reactHooks.renderHook)(() => (0, _useThemeProps.useThemeProps)('Badge', {
      py: 3
    }), {
      wrapper
    });
    expect(result.current).toEqual({
      _text: {
        color: 'gray.700',
        fontSize: 'xs',
        fontWeight: 'bold',
        textTransform: 'uppercase'
      },
      px: 1,
      py: 3,
      borderRadius: 'lg',
      bg: 'gray.100',
      borderWidth: 1,
      borderColor: 'transparent'
    });
  });
});
//# sourceMappingURL=useThemeProps.test.js.map