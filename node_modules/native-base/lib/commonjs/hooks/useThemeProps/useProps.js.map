{"version":3,"sources":["useProps.tsx"],"names":["filterAndCalculateProps","theme","colorModeProps","componentTheme","propsReceived","windowWidth","ignoredProps","props","newProps","mergedProps","Platform","OS","useThemeProps","component","width"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,uBAAuB,GAAG,CAC9BC,KAD8B,EAE9BC,cAF8B,EAG9BC,cAH8B,EAI9BC,aAJ8B,EAK9BC,WAL8B,KAM3B;AACH;AACA,MAAI,CAACC,YAAD,EAAeC,KAAf,IAAwB,4BAAgBH,aAAhB,EAA+B,CACzD,UADyD,EAEzD,OAFyD,EAGzD,SAHyD,EAIzD,MAJyD,EAKzD,QALyD,EAMzD,SANyD,CAA/B,CAA5B;AAQA,MAAII,QAAQ,GAAG,2BACbP,KADa,EAEbC,cAFa,EAGbC,cAHa,EAIbI,KAJa,EAKbF,WALa,CAAf;AAOA,MAAII,WAAW,GAAG,0CAAkBD,QAAlB,EAA4BF,YAA5B,EAA0CI,sBAASC,EAAnD,CAAlB;AACA,SAAO,0BAAcF,WAAd,CAAP;AACD,CAzBD;;AA2BO,SAASG,aAAT,CAAuBC,SAAvB,EAA0CT,aAA1C,EAA8D;AAAA;;AACnE,QAAM;AAAEH,IAAAA,KAAF;AAAS,OAAGC;AAAZ,MAA+B,mCAArC;AACA,QAAMC,cAAc,GAAG,kBAAIF,KAAJ,uBAAyBY,SAAzB,EAAvB;AACA,MAAIR,WAAW,2BAAG,uCAAH,yDAAG,qBAAuBS,KAAzC;AACA,SAAOd,uBAAuB,CAC5B,mBAAKC,KAAL,EAAY,CAAC,YAAD,CAAZ,CAD4B,EAE5BC,cAF4B,EAG5BC,cAH4B,EAI5BC,aAJ4B,EAK5BC,WAL4B,CAA9B;AAOD","sourcesContent":["import get from 'lodash/get';\nimport omit from 'lodash/omit';\nimport { useWindowDimensions, Platform } from 'react-native';\nimport { useNativeBase } from './../useNativeBase';\nimport { omitUndefined, extractInObject } from './../../theme/tools/';\nimport { filterShadowProps } from './../../utils/filterShadowProps';\nimport { calculateProps } from './utils';\n\nconst filterAndCalculateProps = (\n  theme: any,\n  colorModeProps: any,\n  componentTheme: any,\n  propsReceived: any,\n  windowWidth: any\n) => {\n  // Extracting out children and style, as they do not contribute in props calculation\n  let [ignoredProps, props] = extractInObject(propsReceived, [\n    'children',\n    'style',\n    'onPress',\n    'icon',\n    'onOpen',\n    'onClose',\n  ]);\n  let newProps = calculateProps(\n    theme,\n    colorModeProps,\n    componentTheme,\n    props,\n    windowWidth\n  );\n  let mergedProps = filterShadowProps(newProps, ignoredProps, Platform.OS);\n  return omitUndefined(mergedProps);\n};\n\nexport function useThemeProps(component: string, propsReceived: any) {\n  const { theme, ...colorModeProps } = useNativeBase();\n  const componentTheme = get(theme, `components.${component}`);\n  let windowWidth = useWindowDimensions()?.width;\n  return filterAndCalculateProps(\n    omit(theme, ['components']),\n    colorModeProps,\n    componentTheme,\n    propsReceived,\n    windowWidth\n  );\n}\n"]}