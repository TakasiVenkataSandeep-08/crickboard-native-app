{"version":3,"sources":["badge.ts"],"names":["baseStyle","px","py","_text","fontSize","textTransform","fontWeight","borderRadius","variantSolid","props","colorScheme","bg","borderWidth","borderColor","variantSubtle","color","variantOutline","variants","solid","subtle","outline","defaultProps","variant"],"mappings":";;;;;;;AAAA;;AAEA,MAAMA,SAAS,GAAG;AAChBC,EAAAA,EAAE,EAAE,CADY;AAEhBC,EAAAA,EAAE,EAAE,CAFY;AAGhBC,EAAAA,KAAK,EAAE;AAAEC,IAAAA,QAAQ,EAAE,IAAZ;AAAkBC,IAAAA,aAAa,EAAE,WAAjC;AAA8CC,IAAAA,UAAU,EAAE;AAA1D,GAHS;AAIhBC,EAAAA,YAAY,EAAE;AAJE,CAAlB;;AAOA,SAASC,YAAT,CAAsBC,KAAtB,EAAkD;AAChD,MAAIC,WAAW,GAAG,2BAAeD,KAAf,CAAlB;AACA,SAAO;AACLE,IAAAA,EAAE,EAAE,2BAAQD,WAAR,qBAA8BA,WAA9B,WAAiDD,KAAjD,CADC;AAELG,IAAAA,WAAW,EAAE,CAFR;AAGLC,IAAAA,WAAW,EAAE;AAHR,GAAP;AAKD;;AAED,SAASC,aAAT,CAAuBL,KAAvB,EAAmD;AACjD,MAAIC,WAAW,GAAG,2BAAeD,KAAf,CAAlB;AACA,SAAO;AACLE,IAAAA,EAAE,EAAE,2BAAQD,WAAR,qBAA8BA,WAA9B,WAAiDD,KAAjD,CADC;AAELN,IAAAA,KAAK,EAAE;AAAEY,MAAAA,KAAK,EAAE,2BAAQL,WAAR,qBAA8BA,WAA9B,WAAiDD,KAAjD;AAAT,KAFF;AAGLG,IAAAA,WAAW,EAAE,CAHR;AAILC,IAAAA,WAAW,EAAE;AAJR,GAAP;AAMD;;AAED,SAASG,cAAT,CAAwBP,KAAxB,EAAoD;AAClD,MAAIC,WAAW,GAAG,2BAAeD,KAAf,CAAlB;AACA,SAAO;AACLI,IAAAA,WAAW,EAAE,2BAAQH,WAAR,qBAA8BA,WAA9B,WAAiDD,KAAjD,CADR;AAELN,IAAAA,KAAK,EAAE;AAAEY,MAAAA,KAAK,EAAE,2BAAQL,WAAR,qBAA8BA,WAA9B,WAAiDD,KAAjD;AAAT,KAFF;AAGLG,IAAAA,WAAW,EAAE;AAHR,GAAP;AAKD;;AAED,MAAMK,QAAQ,GAAG;AACfC,EAAAA,KAAK,EAAEV,YADQ;AAEfW,EAAAA,MAAM,EAAEL,aAFO;AAGfM,EAAAA,OAAO,EAAEJ;AAHM,CAAjB;AAMA,MAAMK,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,QADU;AAEnBZ,EAAAA,WAAW,EAAE;AAFM,CAArB;eAKe;AACbV,EAAAA,SADa;AAEbiB,EAAAA,QAFa;AAGbI,EAAAA;AAHa,C","sourcesContent":["import { mode, getColorScheme } from '../tools';\n\nconst baseStyle = {\n  px: 1,\n  py: 1,\n  _text: { fontSize: 'xs', textTransform: 'uppercase', fontWeight: 'bold' },\n  borderRadius: 'lg',\n};\n\nfunction variantSolid(props: Record<string, any>) {\n  let colorScheme = getColorScheme(props);\n  return {\n    bg: mode(`${colorScheme}.500`, `${colorScheme}.100`)(props),\n    borderWidth: 1,\n    borderColor: 'transparent',\n  };\n}\n\nfunction variantSubtle(props: Record<string, any>) {\n  let colorScheme = getColorScheme(props);\n  return {\n    bg: mode(`${colorScheme}.100`, `${colorScheme}.500`)(props),\n    _text: { color: mode(`${colorScheme}.700`, `${colorScheme}.100`)(props) },\n    borderWidth: 1,\n    borderColor: 'transparent',\n  };\n}\n\nfunction variantOutline(props: Record<string, any>) {\n  let colorScheme = getColorScheme(props);\n  return {\n    borderColor: mode(`${colorScheme}.500`, `${colorScheme}.100`)(props),\n    _text: { color: mode(`${colorScheme}.500`, `${colorScheme}.100`)(props) },\n    borderWidth: 1,\n  };\n}\n\nconst variants = {\n  solid: variantSolid,\n  subtle: variantSubtle,\n  outline: variantOutline,\n};\n\nconst defaultProps = {\n  variant: 'subtle',\n  colorScheme: 'gray',\n};\n\nexport default {\n  baseStyle,\n  variants,\n  defaultProps,\n};\n"]}