"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _tools = require("./../tools");

const baseStyle = {
  borderRadius: 'lg',
  display: 'flex',
  flexDirection: 'row',
  justifyContent: 'center',
  alignItems: 'center'
};

function variantGhost(props) {
  const {
    colorScheme: c
  } = props;

  if (c === 'gray') {
    return {
      _text: {
        color: (0, _tools.mode)("gray.500", "white")(props)
      }
    };
  }

  return {
    _text: {
      color: (0, _tools.mode)("".concat(c, ".500"), "".concat(c, ".200"))(props)
    },
    bg: 'transparent'
  };
}

function variantOutline(props) {
  const {
    colorScheme: c
  } = props;
  const borderColor = (0, _tools.mode)("gray.200", "gray.500")(props);
  return {
    border: '1px solid',
    borderColor: c === 'gray' ? borderColor : (0, _tools.mode)("".concat(c, ".500"), "".concat(c, ".200"))(props),
    ...variantGhost(props)
  };
}

/** Accessible color overrides for less accessible colors. */
const accessibleColorMap = {
  yellow: {
    bg: 'yellow.400'
  },
  cyan: {
    bg: 'cyan.400'
  }
};

function variantSolid(props) {
  const {
    colorScheme: c
  } = props;
  if (c === 'gray') return {
    bg: (0, _tools.mode)("gray.100", "gray.800")(props)
  };
  const {
    bg = "".concat(c, ".500")
  } = accessibleColorMap[c] || {};
  return {
    bg: (0, _tools.mode)(bg, "".concat(c, ".400"))(props)
  };
}

function variantLink() {
  return {
    padding: 0,
    height: 'auto',
    _text: {
      textDecorationLine: 'underline'
    }
  };
}

function variantUnstyled() {
  return {
    m: 0,
    p: 0
  };
}

const variants = {
  ghost: variantGhost,
  outline: variantOutline,
  solid: variantSolid,
  link: variantLink,
  unstyled: variantUnstyled
};
const sizes = {
  lg: {
    minH: 12,
    minW: 12,
    _text: {
      fontSize: 'lg'
    },
    px: 6,
    py: 4
  },
  md: {
    minH: 10,
    minW: 10,
    _text: {
      fontSize: 'md'
    },
    px: 5,
    py: 3
  },
  sm: {
    minH: 8,
    minW: 8,
    _text: {
      fontSize: 'sm'
    },
    px: 4,
    py: 2
  },
  xs: {
    minH: 6,
    minW: 6,
    _text: {
      fontSize: 'xs'
    },
    px: 2
  }
};
const defaultProps = {
  variant: 'solid',
  size: 'md',
  colorScheme: 'gray',
  _text: {
    fontWeight: 'semibold'
  }
};
var _default = {
  baseStyle,
  variants,
  sizes,
  defaultProps
};
exports.default = _default;
//# sourceMappingURL=button.js.map