{"version":3,"sources":["alert.ts"],"names":["getBg","props","theme","status","variant","lightBg","darkBg","variantSubtle","bg","iconColor","textColor","variantOutline","borderWidth","borderColor","variantOutlineLight","variantSolid","variantLeftAccent","borderLeftColor","variantTopAccent","borderTopColor","variants","Alert","defaultProps","p","borderRadius","AlertTitle","fontSize","fontWeight","AlertDescription"],"mappings":"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","sourcesContent":["import { mode, getColor, getColorScheme, transparentize } from '../tools';\n\nfunction getBg(props: Record<string, any>) {\n  let { theme, status, variant } = props;\n\n  status = getColorScheme(props, status);\n  const lightBg =\n    variant === 'solid'\n      ? getColor(theme, `${status}.400`, status)\n      : getColor(theme, `${status}.100`, status);\n  const darkBg = transparentize(\n    `${status}.500`,\n    variant === 'solid' ? 0.8 : 0.5\n  )(theme);\n  return mode(lightBg, darkBg)(props);\n}\n\nconst variantSubtle = (props: Record<string, any>) => {\n  let { status, theme } = props;\n  status = getColorScheme(props, status);\n  return {\n    bg: getBg(props),\n    iconColor: mode(`${status}.500`, `${status}.200`)(props),\n    textColor: mode(\n      getColor(theme, `${status}.600`, status),\n      getColor(theme, `${status}.300`, status)\n    )(props),\n  };\n};\n\nconst variantOutline = (props: Record<string, any>) => {\n  let { status, theme } = props;\n  status = getColorScheme(props, status);\n  return {\n    borderWidth: 1,\n    borderColor: mode(`${status}.600`, `${status}.500`)(props),\n    iconColor: mode(`${status}.500`, `${status}.500`)(props),\n    textColor: getColor(theme, `${status}.700`, status),\n  };\n};\nconst variantOutlineLight = (props: Record<string, any>) => {\n  let { status, theme } = props;\n  status = getColorScheme(props, status);\n  return {\n    borderWidth: 1,\n    borderColor: transparentize(`${status}.600`, 0.2)(theme),\n    iconColor: mode(`${status}.500`, `${status}.200`)(props),\n    textColor: getColor(theme, `${status}.900`, status),\n  };\n};\n\nconst variantSolid = (props: Record<string, any>) => {\n  let { status } = props;\n  status = getColorScheme(props, status);\n  return {\n    borderWidth: 6,\n    borderColor: 'transparent',\n    bg: getBg(props),\n    iconColor: mode(`white`, `${status}.300`)(props),\n    textColor: mode('white', `${status}.200`)(props),\n  };\n};\nconst variantLeftAccent = (props: Record<string, any>) => {\n  let { status } = props;\n  status = getColorScheme(props, status);\n  return {\n    borderWidth: 4,\n    bg: getBg(props),\n    iconColor: mode(`${status}.500`, `${status}.200`)(props),\n    textColor: mode(`${status}.600`, `${status}.300`)(props),\n    borderColor: 'transparent',\n    borderLeftColor: mode(`${status}.600`, `${status}.300`)(props),\n  };\n};\nconst variantTopAccent = (props: Record<string, any>) => {\n  let { status } = props;\n  status = getColorScheme(props, status);\n  return {\n    borderWidth: 4,\n    borderColor: 'transparent',\n    borderTopColor: mode(`${status}.600`, `${status}.300`)(props),\n    bg: getBg(props),\n    iconColor: mode(`${status}.500`, `${status}.200`)(props),\n    textColor: mode(`${status}.600`, `${status}.300`)(props),\n  };\n};\n\nconst variants = {\n  'subtle': variantSubtle,\n  'solid': variantSolid,\n  'left-accent': variantLeftAccent,\n  'top-accent': variantTopAccent,\n  'outline': variantOutline,\n  'outline-light': variantOutlineLight,\n};\n\nexport const Alert = {\n  defaultProps: {\n    status: 'default',\n    variant: 'subtle',\n    p: 4,\n    borderRadius: 'lg',\n  },\n  variants,\n};\n\n// AlertTitle\n\nexport const AlertTitle = {\n  defaultProps: {\n    fontSize: 'md',\n    fontWeight: 'semibold',\n  },\n};\n\n// AlertDescription\nexport const AlertDescription = {\n  defaultProps: {\n    fontSize: 'sm',\n    fontWeight: 'medium',\n  },\n};\n"]}