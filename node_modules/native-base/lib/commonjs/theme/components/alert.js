"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AlertDescription = exports.AlertTitle = exports.Alert = void 0;

var _tools = require("../tools");

function getBg(props) {
  let {
    theme,
    status,
    variant
  } = props;
  status = (0, _tools.getColorScheme)(props, status);
  const lightBg = variant === 'solid' ? (0, _tools.getColor)(theme, "".concat(status, ".400"), status) : (0, _tools.getColor)(theme, "".concat(status, ".100"), status);
  const darkBg = (0, _tools.transparentize)("".concat(status, ".500"), variant === 'solid' ? 0.8 : 0.5)(theme);
  return (0, _tools.mode)(lightBg, darkBg)(props);
}

const variantSubtle = props => {
  let {
    status,
    theme
  } = props;
  status = (0, _tools.getColorScheme)(props, status);
  return {
    bg: getBg(props),
    iconColor: (0, _tools.mode)("".concat(status, ".500"), "".concat(status, ".200"))(props),
    textColor: (0, _tools.mode)((0, _tools.getColor)(theme, "".concat(status, ".600"), status), (0, _tools.getColor)(theme, "".concat(status, ".300"), status))(props)
  };
};

const variantOutline = props => {
  let {
    status,
    theme
  } = props;
  status = (0, _tools.getColorScheme)(props, status);
  return {
    borderWidth: 1,
    borderColor: (0, _tools.mode)("".concat(status, ".600"), "".concat(status, ".500"))(props),
    iconColor: (0, _tools.mode)("".concat(status, ".500"), "".concat(status, ".500"))(props),
    textColor: (0, _tools.getColor)(theme, "".concat(status, ".700"), status)
  };
};

const variantOutlineLight = props => {
  let {
    status,
    theme
  } = props;
  status = (0, _tools.getColorScheme)(props, status);
  return {
    borderWidth: 1,
    borderColor: (0, _tools.transparentize)("".concat(status, ".600"), 0.2)(theme),
    iconColor: (0, _tools.mode)("".concat(status, ".500"), "".concat(status, ".200"))(props),
    textColor: (0, _tools.getColor)(theme, "".concat(status, ".900"), status)
  };
};

const variantSolid = props => {
  let {
    status
  } = props;
  status = (0, _tools.getColorScheme)(props, status);
  return {
    borderWidth: 6,
    borderColor: 'transparent',
    bg: getBg(props),
    iconColor: (0, _tools.mode)("white", "".concat(status, ".300"))(props),
    textColor: (0, _tools.mode)('white', "".concat(status, ".200"))(props)
  };
};

const variantLeftAccent = props => {
  let {
    status
  } = props;
  status = (0, _tools.getColorScheme)(props, status);
  return {
    borderWidth: 4,
    bg: getBg(props),
    iconColor: (0, _tools.mode)("".concat(status, ".500"), "".concat(status, ".200"))(props),
    textColor: (0, _tools.mode)("".concat(status, ".600"), "".concat(status, ".300"))(props),
    borderColor: 'transparent',
    borderLeftColor: (0, _tools.mode)("".concat(status, ".600"), "".concat(status, ".300"))(props)
  };
};

const variantTopAccent = props => {
  let {
    status
  } = props;
  status = (0, _tools.getColorScheme)(props, status);
  return {
    borderWidth: 4,
    borderColor: 'transparent',
    borderTopColor: (0, _tools.mode)("".concat(status, ".600"), "".concat(status, ".300"))(props),
    bg: getBg(props),
    iconColor: (0, _tools.mode)("".concat(status, ".500"), "".concat(status, ".200"))(props),
    textColor: (0, _tools.mode)("".concat(status, ".600"), "".concat(status, ".300"))(props)
  };
};

const variants = {
  'subtle': variantSubtle,
  'solid': variantSolid,
  'left-accent': variantLeftAccent,
  'top-accent': variantTopAccent,
  'outline': variantOutline,
  'outline-light': variantOutlineLight
};
const Alert = {
  defaultProps: {
    status: 'default',
    variant: 'subtle',
    p: 4,
    borderRadius: 'lg'
  },
  variants
}; // AlertTitle

exports.Alert = Alert;
const AlertTitle = {
  defaultProps: {
    fontSize: 'md',
    fontWeight: 'semibold'
  }
}; // AlertDescription

exports.AlertTitle = AlertTitle;
const AlertDescription = {
  defaultProps: {
    fontSize: 'sm',
    fontWeight: 'medium'
  }
};
exports.AlertDescription = AlertDescription;
//# sourceMappingURL=alert.js.map