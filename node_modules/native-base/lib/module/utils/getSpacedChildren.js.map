{"version":3,"sources":["getSpacedChildren.tsx"],"names":["React","default","Box","children","space","axis","reverse","divider","childrenArray","Children","toArray","orientation","cloneElement","props","reduce","r","a","concat","slice","map","child","index","wrapperProps","ml","undefined","marginLeft","mt","marginTop","key","trailingChildren","spaceValue","marginProp","trailingChildrenWithSpacingReverse","length","trailingChildrenWithSpacing"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { default as Box } from '../components/primitives/Box';\n\ntype SpaceType =\n  | 'gutter'\n  | '2xs'\n  | 'xs'\n  | 'sm'\n  | 'md'\n  | 'lg'\n  | 'xl'\n  | '2xl'\n  | number;\n\nexport default (\n  children: JSX.Element[] | JSX.Element,\n  space: undefined | SpaceType,\n  axis: 'X' | 'Y',\n  reverse: string,\n  divider: JSX.Element | undefined\n): any => {\n  let childrenArray = React.Children.toArray(children);\n  const orientation = axis === 'X' ? 'vertical' : 'horizontal';\n  if (divider) {\n    divider = React.cloneElement(divider, {\n      ...divider.props,\n      orientation,\n    });\n\n    childrenArray = childrenArray.reduce(\n      (r: any[], a: any) => r.concat(a, divider),\n      [divider]\n    );\n    childrenArray = childrenArray.slice(1, -1);\n  }\n  /*\n  | Separate the trailing (not first) children from the children array\n  */\n\n  /*\n  | Wrapping Children with a Box so that any custom component can also work properly placed inside a stack\n  */\n\n  childrenArray = childrenArray.map((child: any, index: number) => {\n    /*\n    | wrapperProps takes child's mt , marginTop , ml or marginLeft and add that to wrapper.\n    */\n    let wrapperProps: object = {};\n    if (child.props.ml !== undefined || child.props.marginLeft !== undefined) {\n      wrapperProps = { ...{ ml: child.props.ml || child.props.marginLeft } };\n    }\n    if (child.props.mt !== undefined || child.props.marginTop !== undefined) {\n      wrapperProps = { ...{ mt: child.props.mt || child.props.marginTop } };\n    }\n\n    return React.cloneElement(<Box>{child}</Box>, {\n      key: `stack-wrapper-${index}`,\n      ...wrapperProps,\n    });\n  });\n  const trailingChildren =\n    reverse === 'reverse' ? childrenArray.slice(0, -1) : childrenArray.slice(1);\n  /*\n  | Set margin prop based on axis\n  */\n  let spaceValue;\n  if (typeof space === 'string') {\n    switch (space) {\n      case 'gutter':\n        spaceValue = 0;\n        break;\n      case '2xs':\n        spaceValue = 1;\n        break;\n      case 'xs':\n        spaceValue = 2;\n        break;\n      case 'sm':\n        spaceValue = 3;\n        break;\n      case 'md':\n        spaceValue = 4;\n        break;\n      case 'lg':\n        spaceValue = 6;\n        break;\n      case 'xl':\n        spaceValue = 7;\n        break;\n      case '2xl':\n        spaceValue = 8;\n        break;\n\n      default:\n        spaceValue = 1;\n        break;\n    }\n  } else {\n    spaceValue = space;\n  }\n\n  const marginProp: object = {\n    ...(axis === 'X' ? { ml: spaceValue } : { mt: spaceValue }),\n  };\n\n  /*\n  | Add the margiin to the children\n  */\n  /*\n  | New children array with applied margin to trailing children\n  */\n  if (reverse === 'reverse') {\n    const trailingChildrenWithSpacingReverse = trailingChildren\n      .reverse()\n      .map((child: any, index: number) => {\n        return React.cloneElement(\n          child,\n          {\n            key: `reverse-spaced-child-${index}`,\n            ...marginProp,\n            ...child.props,\n          },\n          child.props.children\n        );\n      });\n\n    return [\n      childrenArray[childrenArray.length - 1],\n      trailingChildrenWithSpacingReverse,\n    ];\n  } else {\n    const trailingChildrenWithSpacing = trailingChildren.map(\n      (child: any, index: number) => {\n        return React.cloneElement(\n          child,\n          { key: `spaced-child-${index}`, ...marginProp, ...child.props },\n          child.props.children\n        );\n      }\n    );\n    return [childrenArray[0], trailingChildrenWithSpacing];\n  }\n};\n"]}