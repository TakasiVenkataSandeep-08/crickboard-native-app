{"version":3,"sources":["HybridProvider.tsx"],"names":["React","HybridContext","OverlayWrapper","PopoverWrapper","useModeManager","HybridProvider","children","options","initialColorMode","colorModeManager","popoverItem","setPopoverItem","useState","popoverConfig","setPopoverConfig","triggerRef","placeOverTriggerElement","undefined","onClose","animationDuration","overlayItem","setOverlayItem","overlayConfig","setOverlayConfig","disableOverlay","position","backgroundColor","closeOnPress","_a","colorMode","setColorMode","toggleColorMode","useCallback","popover","defaultConfig","setConfig","parentComponentConfig","overlay"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,SAASC,aAAT,QAA8B,WAA9B;AACA,OAAOC,cAAP,MAA2B,oBAA3B;AACA,OAAOC,cAAP,MAA2B,oBAA3B;AACA,SAASC,cAAT,QAA+B,uBAA/B;;AAGA,MAAMC,cAAc,GAAG,CAAC;AACtBC,EAAAA,QADsB;AAEtBC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,gBAAgB,GAAG;AAArB,GAFa;AAGtBC,EAAAA;AAHsB,CAAD,KAIQ;AAC7B;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCX,KAAK,CAACY,QAAN,CAAe,IAAf,CAAtC;AACA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCd,KAAK,CAACY,QAAN,CAA+B;AACvEG,IAAAA,UAAU,EAAE,IAD2D;AAEvEC,IAAAA,uBAAuB,EAAEC,SAF8C;AAGvEC,IAAAA,OAAO,EAAE,IAH8D;AAIvEC,IAAAA,iBAAiB,EAAE;AAJoD,GAA/B,CAA1C,CAH6B,CAU7B;;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCrB,KAAK,CAACY,QAAN,CAAe,IAAf,CAAtC;AACA,QAAM,CAACU,aAAD,EAAgBC,gBAAhB,IAAoCvB,KAAK,CAACY,QAAN,CAA+B;AACvEY,IAAAA,cAAc,EAAEP,SADuD;AAEvEQ,IAAAA,QAAQ,EAAE,QAF6D;AAGvEC,IAAAA,eAAe,EAAE,SAHsD;AAIvEP,IAAAA,iBAAiB,EAAE,GAJoD;AAKvEQ,IAAAA,YAAY,EAAE,KALyD;AAMvET,IAAAA,OAAO,EAAGU,EAAD,IAAa,CAAE;AAN+C,GAA/B,CAA1C,CAZ6B,CAqB7B;;AACA,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAA8B1B,cAAc,CAChDI,gBADgD,EAEhDC,gBAFgD,CAAlD;AAIA,QAAMsB,eAAe,GAAG/B,KAAK,CAACgC,WAAN,CAAkB,MAAM;AAC9CF,IAAAA,YAAY,CAACD,SAAS,KAAK,OAAd,GAAwB,MAAxB,GAAiC,OAAlC,CAAZ;AACD,GAFuB,EAErB,CAACA,SAAD,EAAYC,YAAZ,CAFqB,CAAxB;AAIA,sBACE,oBAAC,aAAD,CAAe,QAAf;AACE,IAAA,KAAK,EAAE;AACLG,MAAAA,OAAO,EAAE;AACPtB,QAAAA,cADO;AAEPuB,QAAAA,aAAa,EAAErB,aAFR;AAGPsB,QAAAA,SAAS,EAAErB,gBAHJ;AAIPsB,QAAAA,qBAAqB,EAAEvB,aAAa,CAACuB;AAJ9B,OADJ;AAOLC,MAAAA,OAAO,EAAE;AACPhB,QAAAA,cADO;AAEPa,QAAAA,aAAa,EAAEZ,aAFR;AAGPa,QAAAA,SAAS,EAAEZ;AAHJ,OAPJ;AAYLM,MAAAA,SAAS,EAAE;AACTA,QAAAA,SADS;AAETE,QAAAA,eAFS;AAGTD,QAAAA;AAHS;AAZN;AADT,KAoBGxB,QApBH,eAqBE,oBAAC,cAAD;AACE,IAAA,WAAW,EAAEc,WADf;AAEE,IAAA,aAAa,EAAEE,aAFjB;AAGE,IAAA,cAAc,EAAED;AAHlB,IArBF,eA0BE,oBAAC,cAAD;AACE,IAAA,WAAW,EAAEX,WADf;AAEE,IAAA,aAAa,EAAEG,aAFjB;AAGE,IAAA,cAAc,EAAEF;AAHlB,IA1BF,CADF;AAkCD,CApED;;AAsEA,eAAeN,cAAf","sourcesContent":["import React from 'react';\nimport type { IPopoverConfig } from './../Popover/types';\nimport type { IOverlayConfig } from './../Overlay/types';\nimport { HybridContext } from './Context';\nimport OverlayWrapper from '../Overlay/Wrapper';\nimport PopoverWrapper from '../Popover/Wrapper';\nimport { useModeManager } from './../color-mode/hooks';\nimport type { IColorModeProviderProps } from './../color-mode';\n\nconst HybridProvider = ({\n  children,\n  options: { initialColorMode = 'light' },\n  colorModeManager,\n}: IColorModeProviderProps) => {\n  // Popover content\n  const [popoverItem, setPopoverItem] = React.useState(null);\n  const [popoverConfig, setPopoverConfig] = React.useState<IPopoverConfig>({\n    triggerRef: null,\n    placeOverTriggerElement: undefined,\n    onClose: null,\n    animationDuration: 200,\n  });\n\n  // Overlay content\n  const [overlayItem, setOverlayItem] = React.useState(null);\n  const [overlayConfig, setOverlayConfig] = React.useState<IOverlayConfig>({\n    disableOverlay: undefined,\n    position: 'center',\n    backgroundColor: '#161616',\n    animationDuration: 400,\n    closeOnPress: false,\n    onClose: (_a: any) => {},\n  });\n\n  // Color-mode content\n  const { colorMode, setColorMode } = useModeManager(\n    initialColorMode,\n    colorModeManager\n  );\n  const toggleColorMode = React.useCallback(() => {\n    setColorMode(colorMode === 'light' ? 'dark' : 'light');\n  }, [colorMode, setColorMode]);\n\n  return (\n    <HybridContext.Provider\n      value={{\n        popover: {\n          setPopoverItem,\n          defaultConfig: popoverConfig,\n          setConfig: setPopoverConfig,\n          parentComponentConfig: popoverConfig.parentComponentConfig,\n        },\n        overlay: {\n          setOverlayItem,\n          defaultConfig: overlayConfig,\n          setConfig: setOverlayConfig,\n        },\n        colorMode: {\n          colorMode,\n          toggleColorMode,\n          setColorMode,\n        },\n      }}\n    >\n      {children}\n      <OverlayWrapper\n        overlayItem={overlayItem}\n        overlayConfig={overlayConfig}\n        setOverlayItem={setOverlayItem}\n      />\n      <PopoverWrapper\n        popoverItem={popoverItem}\n        popoverConfig={popoverConfig}\n        setPopoverItem={setPopoverItem}\n      />\n    </HybridContext.Provider>\n  );\n};\n\nexport default HybridProvider;\n"]}