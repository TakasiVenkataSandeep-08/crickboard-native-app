{"version":3,"sources":["hooks.tsx"],"names":["React","useState","useEffect","HybridContext","useColorMode","colorMode","context","useContext","undefined","Error","useColorModeValue","light","dark","useModeManager","initialColorMode","colorModeManager","setRawMode","setColorMode","val","set","getMode","value","get"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,SAASC,aAAT,QAA8B,6BAA9B;AAGA,OAAO,MAAMC,YAAY,GAAG,MAAM;AAChC,QAAM;AAAEC,IAAAA,SAAS,EAAEC;AAAb,MAAyBN,KAAK,CAACO,UAAN,CAC7BJ,aAD6B,CAA/B;;AAGA,MAAIG,OAAO,KAAKE,SAAhB,EAA2B;AACzB,UAAM,IAAIC,KAAJ,CAAU,uDAAV,CAAN;AACD;;AACD,SAAOH,OAAP;AACD,CARM;AAUP,OAAO,SAASI,iBAAT,CAA2BC,KAA3B,EAAuCC,IAAvC,EAAkD;AACvD,QAAM;AAAEP,IAAAA;AAAF,MAAgBD,YAAY,EAAlC;AACA,SAAOC,SAAS,KAAK,MAAd,GAAuBO,IAAvB,GAA8BD,KAArC;AACD;AAED,OAAO,SAASE,cAAT,CACLC,gBADK,EAELC,gBAFK,EAGL;AACA,QAAM,CAACV,SAAD,EAAYW,UAAZ,IAA0Bf,QAAQ,CAAYa,gBAAZ,CAAxC;;AACA,iBAAeG,YAAf,CAA4BC,GAA5B,EAA4C;AAC1C,QAAIH,gBAAJ,EAAsB;AACpB,YAAMA,gBAAgB,CAACI,GAAjB,CAAqBD,GAArB,CAAN;AACD;;AACDF,IAAAA,UAAU,CAACE,GAAD,CAAV;AACD,GAPD,CAQA;;;AACAhB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIa,gBAAJ,EAAsB;AACpB,OAAC,eAAeK,OAAf,GAAyB;AACxB,YAAIC,KAAK,GAAG,MAAMN,gBAAgB,CAACO,GAAjB,CAAqBR,gBAArB,CAAlB;;AACA,YAAIO,KAAK,IAAIA,KAAK,KAAKhB,SAAvB,EAAkC;AAChCW,UAAAA,UAAU,CAACK,KAAD,CAAV;AACD;AACF,OALD;AAMD;AACF,GATQ,EASN,CAAChB,SAAD,EAAYS,gBAAZ,EAA8BC,gBAA9B,CATM,CAAT;AAWA,SAAO;AAAEV,IAAAA,SAAF;AAAaY,IAAAA;AAAb,GAAP;AACD","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport type { ColorMode, StorageManager } from './types';\nimport { HybridContext } from './../hybrid-overlay/Context';\nimport type { IHybridContextProps } from './../hybrid-overlay/types';\n\nexport const useColorMode = () => {\n  const { colorMode: context } = React.useContext<IHybridContextProps>(\n    HybridContext\n  );\n  if (context === undefined) {\n    throw new Error('useColorMode must be used within a NativeBaseProvider');\n  }\n  return context;\n};\n\nexport function useColorModeValue(light: any, dark: any) {\n  const { colorMode } = useColorMode();\n  return colorMode === 'dark' ? dark : light;\n}\n\nexport function useModeManager(\n  initialColorMode: ColorMode,\n  colorModeManager?: StorageManager\n) {\n  const [colorMode, setRawMode] = useState<ColorMode>(initialColorMode);\n  async function setColorMode(val: ColorMode) {\n    if (colorModeManager) {\n      await colorModeManager.set(val);\n    }\n    setRawMode(val);\n  }\n  // For initial setting initial color mode from storage\n  useEffect(() => {\n    if (colorModeManager) {\n      (async function getMode() {\n        let value = await colorModeManager.get(initialColorMode);\n        if (value && value !== colorMode) {\n          setRawMode(value);\n        }\n      })();\n    }\n  }, [colorMode, initialColorMode, colorModeManager]);\n\n  return { colorMode, setColorMode };\n}\n"]}