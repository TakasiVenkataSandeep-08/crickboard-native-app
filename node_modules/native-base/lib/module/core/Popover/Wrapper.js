import React from 'react';
import { Animated, StyleSheet, TouchableWithoutFeedback, View } from 'react-native';
import { getCoordinates } from './../Popover/utils';
import { useFadeTransition } from '../../components/composites/Transitions/useFadeTransition';
import isEqual from 'lodash/isEqual';

function areEqual(prevProps, nextProps) {
  if (isEqual(prevProps.popoverItem, nextProps.popoverItem) && isEqual(prevProps.popoverConfig, nextProps.popoverConfig)) return true;
  return false;
}

const providerStyle = StyleSheet.create({
  wrapper: {
    position: 'absolute',
    top: 0,
    bottom: 0,
    right: 0,
    left: 0,
    zIndex: 999
  }
});

function Wrapper({
  popoverItem,
  popoverConfig,
  setPopoverItem
}) {
  const [state, setState] = React.useState({
    elementWidth: 0,
    elementHeight: 0
  });
  const {
    fadeValue,
    fadeIn,
    fadeOut
  } = useFadeTransition(popoverConfig.animationDuration);
  popoverItem ? fadeIn() : fadeOut();
  const [triggerElementDims, setTriggerElementDims] = React.useState({
    x: 0,
    y: 0,
    width: 0,
    height: 0
  });

  const getElementDims = ({
    nativeEvent
  }) => {
    if (nativeEvent && nativeEvent.layout) {
      setState({
        elementWidth: nativeEvent.layout.width,
        elementHeight: nativeEvent.layout.height
      });
    }
  };

  React.useEffect(() => {
    if (popoverConfig.triggerRef && popoverConfig.triggerRef.current) {
      popoverConfig.triggerRef.current.measureInWindow((x, y, width, height) => {
        setTriggerElementDims({
          x,
          y,
          width,
          height
        });
      });
    }
  }, [popoverConfig.triggerRef]);
  let positions = getCoordinates(triggerElementDims.y, triggerElementDims.x, state.elementWidth, state.elementHeight, triggerElementDims.width, triggerElementDims.height, popoverConfig.placeOverTriggerElement);
  return /*#__PURE__*/React.createElement(Animated.View, {
    style: [providerStyle.wrapper, {
      opacity: fadeValue
    }],
    pointerEvents: popoverItem ? 'auto' : 'none'
  }, /*#__PURE__*/React.createElement(TouchableWithoutFeedback, {
    onPress: () => {
      setPopoverItem(null);
      popoverConfig.onClose && popoverConfig.onClose();
    }
  }, /*#__PURE__*/React.createElement(View, {
    style: providerStyle.wrapper
  })), /*#__PURE__*/React.createElement(View, {
    style: {
      position: 'absolute',
      zIndex: 99999,
      ...positions
    },
    onLayout: getElementDims
  }, popoverItem));
}

export default /*#__PURE__*/React.memo(Wrapper, areEqual);
//# sourceMappingURL=Wrapper.js.map