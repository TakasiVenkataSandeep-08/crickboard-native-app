{"version":3,"sources":["Wrapper.tsx"],"names":["React","Animated","StyleSheet","TouchableWithoutFeedback","View","getCoordinates","useFadeTransition","isEqual","areEqual","prevProps","nextProps","popoverItem","popoverConfig","providerStyle","create","wrapper","position","top","bottom","right","left","zIndex","Wrapper","setPopoverItem","state","setState","useState","elementWidth","elementHeight","fadeValue","fadeIn","fadeOut","animationDuration","triggerElementDims","setTriggerElementDims","x","y","width","height","getElementDims","nativeEvent","layout","useEffect","triggerRef","current","measureInWindow","positions","placeOverTriggerElement","opacity","onClose","memo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  View,\n} from 'react-native';\nimport { getCoordinates } from './../Popover/utils';\nimport { useFadeTransition } from '../../components/composites/Transitions/useFadeTransition';\nimport isEqual from 'lodash/isEqual';\n\ntype PopoverWrapperType = {\n  popoverItem: any;\n  popoverConfig: any;\n  setPopoverItem: any;\n};\n\nfunction areEqual(\n  prevProps: PopoverWrapperType,\n  nextProps: PopoverWrapperType\n) {\n  if (\n    isEqual(prevProps.popoverItem, nextProps.popoverItem) &&\n    isEqual(prevProps.popoverConfig, nextProps.popoverConfig)\n  )\n    return true;\n  return false;\n}\n\nconst providerStyle = StyleSheet.create({\n  wrapper: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    right: 0,\n    left: 0,\n    zIndex: 999,\n  },\n});\n\nfunction Wrapper({\n  popoverItem,\n  popoverConfig,\n  setPopoverItem,\n}: PopoverWrapperType) {\n  const [state, setState] = React.useState<any>({\n    elementWidth: 0,\n    elementHeight: 0,\n  });\n  const { fadeValue, fadeIn, fadeOut } = useFadeTransition(\n    popoverConfig.animationDuration\n  );\n\n  popoverItem ? fadeIn() : fadeOut();\n  const [triggerElementDims, setTriggerElementDims] = React.useState<any>({\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0,\n  });\n  const getElementDims = ({ nativeEvent }: any) => {\n    if (nativeEvent && nativeEvent.layout) {\n      setState({\n        elementWidth: nativeEvent.layout.width,\n        elementHeight: nativeEvent.layout.height,\n      });\n    }\n  };\n  React.useEffect(() => {\n    if (popoverConfig.triggerRef && popoverConfig.triggerRef.current) {\n      popoverConfig.triggerRef.current.measureInWindow(\n        (x: any, y: any, width: any, height: any) => {\n          setTriggerElementDims({ x, y, width, height });\n        }\n      );\n    }\n  }, [popoverConfig.triggerRef]);\n  let positions = getCoordinates(\n    triggerElementDims.y,\n    triggerElementDims.x,\n    state.elementWidth,\n    state.elementHeight,\n    triggerElementDims.width,\n    triggerElementDims.height,\n    popoverConfig.placeOverTriggerElement\n  );\n  return (\n    <Animated.View\n      style={[providerStyle.wrapper, { opacity: fadeValue }]}\n      pointerEvents={popoverItem ? 'auto' : 'none'}\n    >\n      <TouchableWithoutFeedback\n        onPress={() => {\n          setPopoverItem(null);\n          popoverConfig.onClose && popoverConfig.onClose();\n        }}\n      >\n        <View style={providerStyle.wrapper} />\n      </TouchableWithoutFeedback>\n      <View\n        style={{\n          position: 'absolute',\n          zIndex: 99999,\n          ...positions,\n        }}\n        onLayout={getElementDims}\n      >\n        {popoverItem}\n      </View>\n    </Animated.View>\n  );\n}\n\nexport default React.memo(Wrapper, areEqual);\n"]}