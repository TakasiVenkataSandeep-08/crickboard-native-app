function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import Box from '../../primitives/Box';
import { useThemeProps } from '../../../hooks';
import { TabsContext } from './Context';

const Tabs = ({
  children,
  ...props
}, ref) => {
  const {
    onChange,
    activeTabStyle,
    inactiveTabStyle,
    tabBarStyle,
    isFitted,
    align,
    ...newProps
  } = useThemeProps('Tabs', props);
  const [index, setIndex] = React.useState(props.index || props.defaultIndex || 0);

  const changeHandler = activeIndex => {
    setIndex(activeIndex);
    onChange && onChange(activeIndex);
  };

  const setAlign = () => {
    switch (align) {
      case 'start':
        return 'flex-start';

      case 'end':
        return 'flex-end';

      case 'center':
        return 'center';

      default:
        return 'flex-start';
    }
  };

  return /*#__PURE__*/React.createElement(TabsContext.Provider, {
    value: {
      activeIndex: index,
      changeHandler,
      activeTabStyle,
      inactiveTabStyle,
      tabBarStyle,
      isFitted,
      align: setAlign()
    }
  }, /*#__PURE__*/React.createElement(Box, _extends({
    width: "100%"
  }, newProps, {
    ref: ref
  }), children));
};

export default /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(Tabs));
//# sourceMappingURL=Tabs.js.map