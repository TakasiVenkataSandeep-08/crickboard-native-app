function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import { TouchableOpacity } from 'react-native';
import Box from '../../primitives/Box';
import { TabsContext } from './Context';
import { omitUndefined } from '../../../theme/tools/utils';

const Tab = ({
  index,
  children,
  isDisabled,
  style,
  _active,
  _disabled,
  ...props
}) => {
  const newProps = omitUndefined(props);
  const {
    activeIndex,
    inactiveTabStyle,
    activeTabStyle,
    changeHandler
  } = React.useContext(TabsContext);
  const isOpen = activeIndex === index;
  const tabStyle = isOpen ? activeTabStyle : inactiveTabStyle;

  const pressHandler = () => {
    changeHandler && changeHandler(index);
  };

  return /*#__PURE__*/React.createElement(TouchableOpacity, {
    activeOpacity: 1,
    disabled: isDisabled,
    onPress: () => pressHandler(),
    accessible: true,
    accessibilityRole: "radio"
  }, /*#__PURE__*/React.createElement(Box, _extends({}, tabStyle, newProps, {
    style: [style, isOpen && _active, isDisabled && _disabled]
  }), children));
};

export default /*#__PURE__*/React.memo(Tab);
//# sourceMappingURL=Tab.js.map