{"version":3,"sources":["NumberInput.tsx"],"names":["React","useThemeProps","FormControlContext","NumberInputContext","NumberInput","children","props","defaultValue","keepWithinRange","value","min","max","onChange","newProps","formControlContext","useContext","numberInputValue","setNumberInputValue","useState","parseInt","numberInputStepper","setNumberInputStepper","handleChange","newValue","temp","handleChangeWithoutCheck","memo"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA8B,gBAA9B;AACA,SAASC,kBAAT,QAAwD,gBAAxD;AAEA,SAASC,kBAAT,QAAmC,WAAnC;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAY,KAAGC;AAAf,CAAD,KAA+C;AACjE,QAAM;AACJC,IAAAA,YADI;AAEJC,IAAAA,eAFI;AAGJC,IAAAA,KAHI;AAIJC,IAAAA,GAJI;AAKJC,IAAAA,GALI;AAMJC,IAAAA,QANI;AAOJ,OAAGC;AAPC,MAQFZ,aAAa,CAAC,aAAD,EAAgBK,KAAhB,CARjB;AASA,QAAMQ,kBAAuC,GAAGd,KAAK,CAACe,UAAN,CAC9Cb,kBAD8C,CAAhD;AAGA,QAAM,CAACc,gBAAD,EAAmBC,mBAAnB,IAA0CjB,KAAK,CAACkB,QAAN,CAC9CC,QAAQ,CAACV,KAAK,IAAIF,YAAV,EAAwB,EAAxB,CADsC,CAAhD;AAGA,QAAM,CAACa,kBAAD,EAAqBC,qBAArB,IAA8CrB,KAAK,CAACkB,QAAN,CAAe,IAAf,CAApD;;AACA,QAAMI,YAAY,GAAIC,QAAD,IAAsB;AACzC,UAAMC,IAAI,GAAGD,QAAb;AACAN,IAAAA,mBAAmB,CAACO,IAAD,CAAnB;;AACA,QAAIhB,eAAJ,EAAqB;AACnB,UAAIe,QAAQ,GAAGb,GAAf,EAAoBO,mBAAmB,CAACP,GAAD,CAAnB,CAApB,KACK,IAAIa,QAAQ,GAAGZ,GAAf,EAAoBM,mBAAmB,CAACN,GAAD,CAAnB;AAC1B,KANwC,CAOzC;;;AACAC,IAAAA,QAAQ,IAAIA,QAAQ,CAACY,IAAD,CAApB;AACD,GATD;;AAUA,QAAMC,wBAAwB,GAAIF,QAAD,IAAsB;AACrD,UAAMC,IAAI,GAAGD,QAAb;AACAN,IAAAA,mBAAmB,CAACO,IAAD,CAAnB;AACD,GAHD;;AAIA,sBACE,oBAAC,kBAAD,CAAoB,QAApB;AACE,IAAA,KAAK,EAAE,EACL,GAAGV,kBADE;AAEL,SAAGD,QAFE;AAGLH,MAAAA,GAHK;AAILC,MAAAA,GAJK;AAKLW,MAAAA,YALK;AAMLG,MAAAA,wBANK;AAOLT,MAAAA,gBAPK;AAQLI,MAAAA,kBARK;AASLC,MAAAA;AATK;AADT,KAaGhB,QAbH,CADF;AAiBD,CAhDD;;AAkDA,4BAAeL,KAAK,CAAC0B,IAAN,CAAWtB,WAAX,CAAf","sourcesContent":["import React from 'react';\nimport { useThemeProps } from '../../../hooks';\nimport { FormControlContext, IFormControlContext } from '../FormControl';\nimport type { INumberInputProps } from './types';\nimport { NumberInputContext } from './Context';\n\nconst NumberInput = ({ children, ...props }: INumberInputProps) => {\n  const {\n    defaultValue,\n    keepWithinRange,\n    value,\n    min,\n    max,\n    onChange,\n    ...newProps\n  } = useThemeProps('NumberInput', props);\n  const formControlContext: IFormControlContext = React.useContext(\n    FormControlContext\n  );\n  const [numberInputValue, setNumberInputValue] = React.useState(\n    parseInt(value || defaultValue, 10)\n  );\n  const [numberInputStepper, setNumberInputStepper] = React.useState(null);\n  const handleChange = (newValue: number) => {\n    const temp = newValue;\n    setNumberInputValue(temp);\n    if (keepWithinRange) {\n      if (newValue < min) setNumberInputValue(min);\n      else if (newValue > max) setNumberInputValue(max);\n    }\n    //NOTE: only calling onChange on stepper click or blur event of input.\n    onChange && onChange(temp);\n  };\n  const handleChangeWithoutCheck = (newValue: number) => {\n    const temp = newValue;\n    setNumberInputValue(temp);\n  };\n  return (\n    <NumberInputContext.Provider\n      value={{\n        ...formControlContext,\n        ...newProps,\n        min,\n        max,\n        handleChange,\n        handleChangeWithoutCheck,\n        numberInputValue,\n        numberInputStepper,\n        setNumberInputStepper,\n      }}\n    >\n      {children}\n    </NumberInputContext.Provider>\n  );\n};\n\nexport default React.memo(NumberInput);\n"]}