function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useState, useCallback, forwardRef } from 'react';
import { ScrollView } from 'react-native';
import Box from '../../primitives/Box';
import Input from '../../primitives/Input';
import Button from '../../primitives/Button';
import Link from '../../primitives/Link';
import Text from '../../primitives/Text';
import { useColorMode } from './../../../core';
import { useTypeahead } from './useTypeahead';
import { extractInObject } from '../../../theme/tools';
import { layoutPropsList } from './types';

const Typeahead = ({
  options,
  renderItem,
  onChangeText,
  toggleIcon,
  dropdownHeight,
  numberOfItems,
  onSelectedItemChange,
  inputValue,
  getOptionLabel,
  ...props
}, ref) => {
  const [inputItems, setInputItems] = React.useState(options);
  const [layoutProps, newProps] = extractInObject(props, layoutPropsList);
  const {
    colorMode
  } = useColorMode();
  let tempOptions = [];

  if (getOptionLabel) {
    options.map((value, _ind) => {
      tempOptions.push(getOptionLabel(value));
    });
    options = tempOptions;
  }

  const {
    isOpen,
    getInputProps,
    getMenuItemProps,
    getMenuProps,
    getToggleButtonProps
  } = useTypeahead({
    items: inputItems,
    itemToString: item => item.toString(),
    onInputValueChange: ({
      inputValue
    }) => {
      onChangeText && onChangeText(inputValue);
      setInputItems(options.filter(item => item.toLowerCase().includes(inputValue.toLowerCase())));
    },
    onSelectedItemChange
  });

  const toggleIconSetter = () => {
    if (typeof toggleIcon === 'function') return toggleIcon({
      isOpen: isOpen && getInputProps(inputValue, onChangeText).value !== ''
    });
    return toggleIcon;
  }; // Causing App to crash , commenting this might have caused future bugs , might need a revisit
  // React.useEffect(() => {
  //   if (getInputProps(inputValue, onChangeText).value === '') {
  //     // getToggleButtonProps().onPress();
  //   }
  // }, [inputValue, onChangeText, getInputProps, getToggleButtonProps]);


  const [dropdownTop, setDropDownTop] = useState(55);
  const onLayout = useCallback(event => {
    const {
      height
    } = event.nativeEvent.layout;
    setDropDownTop(height % 2 === 0 ? height + 1 : height); //not to use theme values
  }, []);
  return /*#__PURE__*/React.createElement(Box, _extends({
    width: "100%",
    flexDirection: "row",
    onLayout: onLayout
  }, layoutProps), /*#__PURE__*/React.createElement(Box, {
    flex: 1
  }, /*#__PURE__*/React.createElement(Input, _extends({}, newProps, getInputProps(inputValue, onChangeText), {
    InputRightElement: /*#__PURE__*/React.createElement(Button, _extends({
      variant: "unstyled",
      m: 0,
      p: 0
    }, getToggleButtonProps()), toggleIconSetter()),
    ref: ref
  }))), /*#__PURE__*/React.createElement(Box, _extends({
    position: "absolute",
    top: dropdownTop,
    width: "100%",
    height: dropdownHeight ? dropdownHeight : 200
  }, getMenuProps()), /*#__PURE__*/React.createElement(ScrollView, null, isOpen && getInputProps(inputValue, onChangeText).value !== '' && (numberOfItems && numberOfItems < inputItems.length ? inputItems.slice(0, numberOfItems) : inputItems).map((item, index) => /*#__PURE__*/React.createElement(Link, _extends({
    isUnderlined: false,
    key: "".concat(item).concat(index)
  }, getMenuItemProps(item, index)), renderItem ? renderItem(item) : /*#__PURE__*/React.createElement(Box, {
    flex: 1,
    bg: colorMode === 'light' ? 'gray.100' : 'gray.600',
    p: 4
  }, /*#__PURE__*/React.createElement(Text, null, item)))))));
};

export default /*#__PURE__*/React.memo( /*#__PURE__*/forwardRef(Typeahead));
export { useTypeahead };
//# sourceMappingURL=index.js.map