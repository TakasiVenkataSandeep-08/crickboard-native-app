function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import { Flex, Icon } from '../../primitives';
import { useThemeProps } from '../../../hooks';
import { MenuItem } from './MenuItem';
import { MenuOptionContext } from './MenuOptionGroup';
export const MenuItemOption = /*#__PURE__*/React.memo(({
  value,
  children,
  onPress,
  ...props
}) => {
  const {
    values,
    onChange,
    type
  } = React.useContext(MenuOptionContext);

  const modifiedOnPress = e => {
    onChange(value);
    onPress && onPress(e);
  };

  let iconName = type === 'checkbox' ? values.includes(value) ? 'check-box' : 'check-box-outline-blank' : values.includes(value) ? 'radio-button-checked' : 'radio-button-unchecked';
  const newProps = useThemeProps('MenuItem', props);
  return /*#__PURE__*/React.createElement(MenuItem, _extends({}, props, {
    px: 0,
    py: 0,
    onPress: modifiedOnPress
  }), /*#__PURE__*/React.createElement(Flex, {
    direction: "row",
    px: newProps.px,
    py: newProps.py
  }, /*#__PURE__*/React.createElement(Icon, {
    name: iconName,
    pr: newProps.px,
    size: newProps._text.fontSize
  }), children));
});
//# sourceMappingURL=MenuItemOption.js.map