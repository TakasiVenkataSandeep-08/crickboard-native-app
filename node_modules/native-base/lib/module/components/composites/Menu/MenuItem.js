function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import Text from '../../primitives/Text';
import { useThemeProps } from '../../../hooks';
import TouchableItem from '../../primitives/TouchableItem';
import { usePopover } from '../../../core';
export const MenuItem = /*#__PURE__*/React.memo(({
  children,
  onPress,
  style,
  ...props
}) => {
  const {
    parentComponentConfig: {
      closeMenu,
      closeOnSelect
    }
  } = usePopover();
  const newProps = useThemeProps('MenuItem', props);
  let allProps = { ...newProps,
    ...(newProps.isDisabled ? newProps._disabled : {})
  };
  const {
    _text,
    ...touchProps
  } = allProps;
  return /*#__PURE__*/React.createElement(TouchableItem, _extends({}, touchProps, {
    style: style,
    onPress: e => {
      if (!props.isDisabled) {
        onPress && onPress(e);

        if (closeOnSelect) {
          closeMenu && closeMenu();
        }
      }
    }
  }), /*#__PURE__*/React.createElement(React.Fragment, null, React.Children.map(children, (child, index) => {
    if (typeof child === 'string') {
      return /*#__PURE__*/React.createElement(Text, _extends({}, _text, {
        key: "menu-item-".concat(index)
      }), child);
    } else {
      return child;
    }
  })));
});
//# sourceMappingURL=MenuItem.js.map