{"version":3,"sources":["MenuOptionGroup.tsx"],"names":["React","MenuGroup","MenuOptionContext","createContext","values","onChange","_val","type","MenuOptionGroup","memo","defaultValue","value","props","internalDefaultValue","Array","isArray","internalValues","setValues","useState","newValue","newValues","includes","splice","indexOf","push"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,aAA1B;AAGA,OAAO,MAAMC,iBAAiB,gBAAGF,KAAK,CAACG,aAAN,CAA6C;AAC5EC,EAAAA,MAAM,EAAE,EADoE;AAE5EC,EAAAA,QAAQ,EAAGC,IAAD,IAAU,CAAE,CAFsD;AAG5EC,EAAAA,IAAI,EAAE;AAHsE,CAA7C,CAA1B;AAMP,OAAO,MAAMC,eAAe,gBAAGR,KAAK,CAACS,IAAN,CAC7B,CAAC;AACCF,EAAAA,IADD;AAECG,EAAAA,YAFD;AAGCC,EAAAA,KAHD;AAICN,EAAAA,QAJD;AAKC,KAAGO;AALJ,CAAD,KAM6B;AAC3B,MAAIC,oBAAoB,GAAGH,YAAY,GACnCI,KAAK,CAACC,OAAN,CAAcL,YAAd,IACEA,YADF,GAEE,CAACA,YAAD,CAHiC,GAInC,EAJJ;AAMA,MAAI,CAACM,cAAD,EAAiBC,SAAjB,IAA8BjB,KAAK,CAACkB,QAAN,CAChCL,oBADgC,CAAlC;;AAGAR,EAAAA,QAAQ,GAAIc,QAAD,IAA+B;AACxC,QAAIZ,IAAI,KAAK,UAAb,EAAyB;AACvB,UAAIa,SAAS,GAAG,CAAC,GAAGJ,cAAJ,CAAhB;;AACA,UAAIA,cAAc,CAACK,QAAf,CAAwBF,QAAxB,CAAJ,EAAuC;AACrCC,QAAAA,SAAS,CAACE,MAAV,CAAiBF,SAAS,CAACG,OAAV,CAAkBJ,QAAlB,CAAjB,EAA8C,CAA9C;AACAF,QAAAA,SAAS,CAACG,SAAD,CAAT;AACD,OAHD,MAGO;AACLA,QAAAA,SAAS,CAACI,IAAV,CAAeL,QAAf;AACAF,QAAAA,SAAS,CAACG,SAAD,CAAT;AACD;AACF,KATD,MASO,IAAIb,IAAI,KAAK,OAAb,EAAsB;AAC3BU,MAAAA,SAAS,CAAC,CAACE,QAAD,CAAD,CAAT;AACD;AACF,GAbD;;AAcA,sBACE,oBAAC,iBAAD,CAAmB,QAAnB;AACE,IAAA,KAAK,EAAE;AACLf,MAAAA,MAAM,EAAE,CAACO,KAAD,GACJK,cADI,GAEJF,KAAK,CAACC,OAAN,CAAcJ,KAAd,IACAA,KADA,GAEA,CAACA,KAAD,CALC;AAMLN,MAAAA,QANK;AAOLE,MAAAA;AAPK;AADT,kBAWE,oBAAC,SAAD,EAAeK,KAAf,CAXF,CADF;AAeD,CA9C4B,CAAxB","sourcesContent":["import React from 'react';\nimport { MenuGroup } from './MenuGroup';\nimport type { IMenuOptionGroupProps, IMenuOptionContextProps } from './types';\n\nexport const MenuOptionContext = React.createContext<IMenuOptionContextProps>({\n  values: [],\n  onChange: (_val) => {},\n  type: 'checkbox',\n});\n\nexport const MenuOptionGroup = React.memo(\n  ({\n    type,\n    defaultValue,\n    value,\n    onChange,\n    ...props\n  }: IMenuOptionGroupProps) => {\n    let internalDefaultValue = defaultValue\n      ? Array.isArray(defaultValue)\n        ? defaultValue\n        : [defaultValue]\n      : [];\n\n    let [internalValues, setValues] = React.useState<Array<string | number>>(\n      internalDefaultValue\n    );\n    onChange = (newValue: string | number) => {\n      if (type === 'checkbox') {\n        let newValues = [...internalValues];\n        if (internalValues.includes(newValue)) {\n          newValues.splice(newValues.indexOf(newValue), 1);\n          setValues(newValues);\n        } else {\n          newValues.push(newValue);\n          setValues(newValues);\n        }\n      } else if (type === 'radio') {\n        setValues([newValue]);\n      }\n    };\n    return (\n      <MenuOptionContext.Provider\n        value={{\n          values: !value\n            ? internalValues\n            : Array.isArray(value)\n            ? value\n            : [value],\n          onChange,\n          type,\n        }}\n      >\n        <MenuGroup {...props} />\n      </MenuOptionContext.Provider>\n    );\n  }\n);\n"]}