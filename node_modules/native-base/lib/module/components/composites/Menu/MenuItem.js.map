{"version":3,"sources":["MenuItem.tsx"],"names":["React","Text","useThemeProps","TouchableItem","usePopover","MenuItem","memo","children","onPress","style","props","parentComponentConfig","closeMenu","closeOnSelect","newProps","allProps","isDisabled","_disabled","_text","touchProps","e","Children","map","child","index"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,SAASC,aAAT,QAA8B,gBAA9B;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AAEA,SAASC,UAAT,QAA2B,eAA3B;AAEA,OAAO,MAAMC,QAAQ,gBAAGL,KAAK,CAACM,IAAN,CACtB,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,OAAZ;AAAqBC,EAAAA,KAArB;AAA4B,KAAGC;AAA/B,CAAD,KAA4D;AAC1D,QAAM;AACJC,IAAAA,qBAAqB,EAAE;AAAEC,MAAAA,SAAF;AAAaC,MAAAA;AAAb;AADnB,MAEFT,UAAU,EAFd;AAIA,QAAMU,QAAQ,GAAGZ,aAAa,CAAC,UAAD,EAAaQ,KAAb,CAA9B;AACA,MAAIK,QAAQ,GAAG,EACb,GAAGD,QADU;AAEb,QAAIA,QAAQ,CAACE,UAAT,GAAsBF,QAAQ,CAACG,SAA/B,GAA2C,EAA/C;AAFa,GAAf;AAIA,QAAM;AAAEC,IAAAA,KAAF;AAAS,OAAGC;AAAZ,MAA2BJ,QAAjC;AACA,sBACE,oBAAC,aAAD,eACMI,UADN;AAEE,IAAA,KAAK,EAAEV,KAFT;AAGE,IAAA,OAAO,EAAGW,CAAD,IAAY;AACnB,UAAI,CAACV,KAAK,CAACM,UAAX,EAAuB;AACrBR,QAAAA,OAAO,IAAIA,OAAO,CAACY,CAAD,CAAlB;;AACA,YAAIP,aAAJ,EAAmB;AACjBD,UAAAA,SAAS,IAAIA,SAAS,EAAtB;AACD;AACF;AACF;AAVH,mBAYE,0CACGZ,KAAK,CAACqB,QAAN,CAAeC,GAAf,CAAmBf,QAAnB,EAA6B,CAACgB,KAAD,EAAQC,KAAR,KAAuB;AACnD,QAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;AAC7B,0BACE,oBAAC,IAAD,eAAUL,KAAV;AAAiB,QAAA,GAAG,sBAAeM,KAAf;AAApB,UACGD,KADH,CADF;AAKD,KAND,MAMO;AACL,aAAOA,KAAP;AACD;AACF,GAVA,CADH,CAZF,CADF;AA4BD,CAxCqB,CAAjB","sourcesContent":["import React from 'react';\nimport Text from '../../primitives/Text';\nimport { useThemeProps } from '../../../hooks';\nimport TouchableItem from '../../primitives/TouchableItem';\nimport type { IMenuItemProps } from './types';\nimport { usePopover } from '../../../core';\n\nexport const MenuItem = React.memo(\n  ({ children, onPress, style, ...props }: IMenuItemProps) => {\n    const {\n      parentComponentConfig: { closeMenu, closeOnSelect },\n    } = usePopover();\n\n    const newProps = useThemeProps('MenuItem', props);\n    let allProps = {\n      ...newProps,\n      ...(newProps.isDisabled ? newProps._disabled : {}),\n    };\n    const { _text, ...touchProps } = allProps;\n    return (\n      <TouchableItem\n        {...touchProps}\n        style={style}\n        onPress={(e: any) => {\n          if (!props.isDisabled) {\n            onPress && onPress(e);\n            if (closeOnSelect) {\n              closeMenu && closeMenu();\n            }\n          }\n        }}\n      >\n        <>\n          {React.Children.map(children, (child, index: any) => {\n            if (typeof child === 'string') {\n              return (\n                <Text {..._text} key={`menu-item-${index}`}>\n                  {child}\n                </Text>\n              );\n            } else {\n              return child;\n            }\n          })}\n        </>\n      </TouchableItem>\n    );\n  }\n);\n"]}