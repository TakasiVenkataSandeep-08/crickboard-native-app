function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import View from '../../primitives/View';
import { useThemeProps } from '../../../hooks';
import { usePopover } from '../../../core'; //@ts-ignore - Todo - fix types to typings in rn-aria in next version

import { FocusScope } from '@react-native-aria/focus';
export const Menu = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(({
  trigger,
  closeOnSelect = true,
  children,
  onOpen,
  onClose,
  ...props
}, ref) => {
  let triggerRef = React.useRef();
  const newProps = useThemeProps('Menu', props);
  let [isOpen, toggle] = React.useState(false);
  const {
    setPopover,
    closePopover
  } = usePopover();

  const closeMenu = () => {
    closePopover();
    toggle(false);
    onClose && onClose();
  };

  const openMenu = () => {
    setPopover( /*#__PURE__*/React.createElement(View, _extends({}, newProps, {
      ref: ref
    }), /*#__PURE__*/React.createElement(FocusScope, {
      restoreFocus: true,
      autoFocus: true
    }, children)), {
      triggerRef,
      animationDuration: 200,
      onClose: closeMenu,
      parentComponentConfig: {
        open: isOpen,
        closeMenu,
        closeOnSelect
      }
    });
    toggle(true);
    onOpen && onOpen();
  };

  return trigger({
    onPress: openMenu,
    ref: triggerRef
  }, {
    open: isOpen
  });
}));
//# sourceMappingURL=Menu.js.map