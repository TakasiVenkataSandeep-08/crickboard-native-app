{"version":3,"sources":["Slide.tsx"],"names":["React","Box","useThemeProps","Animated","Platform","canUseDom","Slide","children","props","ref","isDomUsable","in","animationState","delay","placement","pPlacement","duration","containerOpacity","setContainerOpacity","useState","size","setSize","provideSize","layoutSize","width","height","setTimeout","slideAnim","useRef","Value","current","slideIn","timing","toValue","useNativeDriver","OS","start","slideOut","holderStyle","top","right","left","bottom","animatioStyle","transform","translateY","translateX","e","nativeEvent","layout","memo","forwardRef"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Box from '../../primitives/Box';\nimport { useThemeProps } from '../../../hooks/useThemeProps';\nimport { Animated, Platform } from 'react-native';\nimport type { ISlideProps } from './types';\nimport { canUseDom } from '../../../utils';\n\nconst Slide = ({ children, ...props }: ISlideProps, ref: any) => {\n  const isDomUsable = canUseDom();\n  // TODO: Slide from right and left needs implmentation.\n  const {\n    in: animationState,\n    delay,\n    placement: pPlacement,\n    duration,\n  } = useThemeProps('Slide', props);\n  let placement = pPlacement === 'top' ? 'top' : 'bottom';\n  const [containerOpacity, setContainerOpacity] = React.useState(1);\n  const [size, setSize] = React.useState(placement === 'top' ? -1000 : 1000);\n  const provideSize = (layoutSize: any) => {\n    if (placement === 'right' || placement === 'left')\n      setSize(layoutSize.width);\n    else setSize(layoutSize.height);\n    setTimeout(() => {\n      setContainerOpacity(1);\n    }, duration);\n  };\n  const slideAnim = React.useRef(new Animated.Value(size)).current;\n  const slideIn = () => {\n    if (isDomUsable) {\n      Animated.timing(slideAnim, {\n        delay,\n        toValue: 0,\n        duration: duration,\n        useNativeDriver: Platform.OS !== 'web',\n      }).start();\n    }\n  };\n\n  const slideOut = () => {\n    if (isDomUsable) {\n      Animated.timing(slideAnim, {\n        toValue: placement === 'top' ? -size : size,\n        duration: duration,\n        useNativeDriver: Platform.OS !== 'web',\n      }).start();\n    }\n  };\n\n  const holderStyle: any = {\n    top: {\n      top: 0,\n      right: 0,\n      left: 0,\n    },\n    right: {\n      right: 0,\n      top: 0,\n      bottom: 0,\n    },\n    bottom: {\n      bottom: 0,\n      right: 0,\n      left: 0,\n    },\n    left: {\n      left: 0,\n      bottom: 0,\n      top: 0,\n    },\n  };\n  const animatioStyle: any = {\n    top: { transform: [{ translateY: slideAnim }] },\n    right: { transform: [{ translateX: slideAnim }] },\n    bottom: { transform: [{ translateY: slideAnim }] },\n    left: { transform: [{ translateX: slideAnim }] },\n  };\n\n  animationState && size ? slideIn() : slideOut();\n  return (\n    <Box\n      overflow=\"hidden\"\n      position=\"absolute\"\n      style={holderStyle[placement]}\n      opacity={containerOpacity}\n    >\n      <Animated.View style={animatioStyle[placement]}>\n        <Box\n          {...props}\n          onLayout={(e) => provideSize(e.nativeEvent.layout)}\n          ref={ref}\n        >\n          {children}\n        </Box>\n      </Animated.View>\n    </Box>\n  );\n};\n\nexport default React.memo(React.forwardRef(Slide));\n"]}