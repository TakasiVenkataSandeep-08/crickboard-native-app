function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import { Box, Icon } from '../../primitives';
import { AlertContext } from './Context';
import { omitUndefined } from '../../../theme/tools/utils';

const AlertIcon = ({
  children,
  ...props
}) => {
  const newProps = omitUndefined(props);
  const {
    status,
    iconColor
  } = React.useContext(AlertContext);

  const getIconName = () => {
    switch (status) {
      case 'error':
        return 'error';

      case 'warning':
        return 'warning';

      case 'success':
        return 'check-circle';

      default:
        return 'info';
    }
  }; // TODO: Refactor this and move alignSelf to Icon component.


  return /*#__PURE__*/React.createElement(Box, {
    alignSelf: "center"
  }, children || /*#__PURE__*/React.createElement(Icon, _extends({
    name: getIconName(),
    type: "MaterialIcons",
    size: 8,
    mr: 4,
    color: iconColor
  }, newProps)));
};

export default /*#__PURE__*/React.memo(AlertIcon);
//# sourceMappingURL=AlertIcon.js.map