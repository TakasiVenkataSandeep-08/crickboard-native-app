{"version":3,"sources":["Tooltip.tsx"],"names":["React","I18nManager","Modal","TouchableOpacity","View","getTooltipCoordinate","isIOS","ScreenHeight","ScreenWidth","Triangle","Tooltip","PureComponent","isVisible","yOffset","xOffset","elementWidth","elementHeight","onClose","props","getElementPosition","setState","prevState","actionType","children","toggleTooltip","undefined","toggleWrapperProps","state","height","width","withPointer","containerStyle","x","y","position","left","isRTL","right","top","display","alignItems","justifyContent","flex","borderRadius","paddingTop","paddingBottom","tooltipY","backgroundColor","pointerStyle","pastMiddleLine","styling","withTooltip","popover","highlightColor","wrapWithAction","tooltipStyle","getTooltipStyle","overflow","renderPointer","borderColor","borderWidth","renderedElement","measureInWindow","pageOffsetX","pageOffsetY","componentDidMount","timeout","setTimeout","componentWillUnmount","clearTimeout","render","withOverlay","onOpen","overlayColor","e","renderContent","closeOnBlur","opacity","bottom","closeOnPopoverPress","styles","container","defaultProps","zIndex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { I18nManager, Modal, TouchableOpacity } from 'react-native';\nimport { View } from '../../primitives';\nimport getTooltipCoordinate from './getTooltipCoordinate';\nimport { isIOS, ScreenHeight, ScreenWidth } from './helpers';\nimport Triangle from './Triangle';\n\ntype State = {\n  isVisible: boolean;\n  yOffset: number;\n  xOffset: number;\n  elementWidth: number;\n  elementHeight: number;\n};\n\nexport type Props = {\n  children?: JSX.Element | JSX.Element[];\n  withPointer?: boolean;\n  popover?: JSX.Element;\n  height?: number | string;\n  width?: number | string;\n  containerStyle?: any;\n  pointerColor?: string;\n  pointerStyle?: {};\n  onClose?: () => void;\n  onOpen?: () => void;\n  withOverlay?: boolean;\n  overlayColor?: string;\n  backgroundColor?: string;\n  highlightColor?: string;\n  toggleWrapperProps?: {};\n  closeOnPopoverPress?: boolean;\n  closeOnBlur?: boolean;\n  actionType?: 'press' | 'longPress' | 'none';\n  borderColor?: string;\n  borderWidth?: number;\n};\n\nclass Tooltip extends React.PureComponent<Props, State> {\n  state = {\n    isVisible: false,\n    yOffset: 0,\n    xOffset: 0,\n    elementWidth: 0,\n    elementHeight: 0,\n  };\n\n  renderedElement: any;\n  timeout: any;\n\n  static defaultProps: {\n    toggleWrapperProps: {};\n    withOverlay: true;\n    highlightColor: 'transparent';\n    withPointer: true;\n    actionType: 'press';\n    height: 40;\n    width: 150;\n    containerStyle: {};\n    pointerStyle: {};\n    backgroundColor: '#617080';\n    onClose: () => void;\n    onOpen: () => void;\n  };\n\n  toggleTooltip = () => {\n    const { onClose } = this.props;\n    this.getElementPosition();\n    this.setState((prevState) => {\n      if (prevState.isVisible && !isIOS) {\n        onClose && onClose();\n      }\n      return { isVisible: !prevState.isVisible };\n    });\n  };\n\n  wrapWithAction = (actionType: any, children: {} | null | undefined) => {\n    if (actionType === 'press' || actionType === 'longPress') {\n      return (\n        <TouchableOpacity\n          onPress={actionType === 'press' ? this.toggleTooltip : undefined}\n          onLongPress={\n            actionType === 'longPress' ? this.toggleTooltip : undefined\n          }\n          activeOpacity={1}\n          {...this.props.toggleWrapperProps}\n        >\n          {children}\n        </TouchableOpacity>\n      );\n    }\n    return children;\n  };\n\n  getTooltipStyle = () => {\n    const { yOffset, xOffset, elementHeight, elementWidth } = this.state;\n    const { height, width, withPointer, containerStyle } = this.props;\n\n    const { x, y } = getTooltipCoordinate(\n      xOffset,\n      yOffset,\n      elementWidth,\n      elementHeight,\n      ScreenWidth,\n      ScreenHeight,\n      width,\n      height,\n      withPointer\n    );\n\n    return {\n      position: 'absolute',\n      left: I18nManager.isRTL ? null : x,\n      right: I18nManager.isRTL ? x : null,\n      top: y,\n      width,\n      height,\n      // default styles\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      flex: 1,\n      borderRadius: 10,\n      paddingTop: 10,\n      paddingBottom: 10,\n      // borderWidth: 1,\n      // borderColor: '#CBD5E0',\n      ...containerStyle,\n    };\n  };\n\n  renderPointer = (tooltipY: any) => {\n    const { yOffset, xOffset, elementHeight, elementWidth } = this.state;\n    const { backgroundColor, pointerStyle } = this.props;\n    const pastMiddleLine = yOffset > tooltipY;\n    const styling: any = {\n      position: 'absolute',\n      top: pastMiddleLine ? yOffset - 13 : yOffset + elementHeight - 2,\n      left: I18nManager.isRTL ? null : xOffset + elementWidth / 2 - 7.5,\n      right: I18nManager.isRTL ? xOffset + elementWidth / 2 - 7.5 : null,\n    };\n    return (\n      <View style={styling}>\n        <Triangle\n          borderBottomColor={backgroundColor}\n          style={{\n            ...pointerStyle,\n          }}\n          isDown={pastMiddleLine}\n        />\n      </View>\n    );\n  };\n  renderContent = (withTooltip: any) => {\n    const { popover, withPointer, highlightColor, actionType } = this.props;\n\n    if (!withTooltip)\n      return this.wrapWithAction(actionType, this.props.children);\n\n    const { yOffset, xOffset, elementWidth, elementHeight } = this.state;\n    const tooltipStyle = this.getTooltipStyle();\n    const styling: any = {\n      position: 'absolute',\n      top: yOffset,\n      left: I18nManager.isRTL ? null : xOffset,\n      right: I18nManager.isRTL ? xOffset : null,\n      backgroundColor: highlightColor,\n      overflow: 'visible',\n      width: elementWidth,\n      height: elementHeight,\n    };\n    return (\n      <View>\n        <View style={styling}>{this.props.children}</View>\n        {withPointer && this.renderPointer(tooltipStyle.top)}\n        <View\n          bg={this.props.backgroundColor}\n          borderColor={this.props.borderColor}\n          borderWidth={this.props.borderWidth}\n          style={tooltipStyle}\n        >\n          {popover}\n        </View>\n      </View>\n    );\n  };\n\n  componentDidMount() {\n    // wait to compute onLayout values.\n    this.timeout = setTimeout(this.getElementPosition, 500);\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.timeout);\n  }\n\n  getElementPosition = () => {\n    this.renderedElement &&\n      this.renderedElement.measureInWindow(\n        (pageOffsetX: any, pageOffsetY: any, width: any, height: any) => {\n          this.setState({\n            xOffset: pageOffsetX,\n            yOffset: pageOffsetY,\n            elementWidth: width,\n            elementHeight: height,\n          });\n        }\n      );\n  };\n\n  render() {\n    const { isVisible } = this.state;\n    const { onClose, withOverlay, onOpen, overlayColor } = this.props;\n\n    return (\n      <View collapsable={false} ref={(e: any) => (this.renderedElement = e)}>\n        {this.renderContent(false)}\n        <Modal\n          animationType=\"fade\"\n          visible={isVisible}\n          transparent\n          onDismiss={onClose}\n          onShow={onOpen}\n          onRequestClose={onClose}\n        >\n          {this.props.closeOnBlur ? (\n            <TouchableOpacity\n              style={{\n                position: 'absolute',\n                left: 0,\n                top: 0,\n                opacity: 0.5,\n                right: 0,\n                bottom: 0,\n              }}\n              onPress={this.toggleTooltip}\n            />\n          ) : null}\n\n          {this.props.closeOnPopoverPress ? (\n            <TouchableOpacity\n              style={styles.container(withOverlay, overlayColor)}\n              onPress={this.toggleTooltip}\n              activeOpacity={1}\n            >\n              <View>{this.renderContent(true)}</View>\n            </TouchableOpacity>\n          ) : (\n            this.renderContent(true)\n          )}\n        </Modal>\n      </View>\n    );\n  }\n}\nTooltip.defaultProps = {\n  toggleWrapperProps: {},\n  withOverlay: true,\n  highlightColor: 'transparent',\n  withPointer: true,\n  actionType: 'press',\n  height: 40,\n  width: 150,\n  containerStyle: {},\n  pointerStyle: {},\n  backgroundColor: '#617080',\n  onClose: () => {},\n  onOpen: () => {},\n};\nconst styles = {\n  container: (withOverlay: any, overlayColor: any) => ({\n    backgroundColor: withOverlay\n      ? overlayColor\n        ? overlayColor\n        : 'rgba(250, 250, 250, 0.70)'\n      : 'transparent',\n    flex: 1,\n    zIndex: -1,\n  }),\n};\n\nexport default Tooltip;\n"]}