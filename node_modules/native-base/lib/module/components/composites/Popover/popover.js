import React from 'react';
import { useThemeProps } from '../../../hooks';
import View from '../../primitives/View';
export const PopoverContext = /*#__PURE__*/React.createContext({
  PopoverTrigger: null,
  setPopoverTrigger: _child => {},
  PopoverRef: null,
  backgroundColor: '',
  borderColor: '',
  borderWidth: null,
  initialFocusRef: null,
  finalFocusRef: null,
  isVisible: false,
  setIsVisible: _bool => {},
  onOpen: () => {},
  onClose: () => {},
  closeOnBlur: true,
  newProps: {
    popoverCloseButtonProps: {},
    popoverFooterProps: {},
    popoverBodyProps: {},
    popoverContentProps: {},
    popoverHeaderProps: {}
  }
});

const Popover = ({
  children,
  initialFocusRef,
  finalFocusRef,
  onOpen,
  onClose,
  closeOnBlur,
  id,
  backgroundColor,
  bg,
  borderWidth,
  borderColor,
  ...props
}) => {
  const [trigger, setTrigger] = React.useState();
  const [isVisible, setIsVisible] = React.useState(false);
  const popOverRef = React.useRef(null);
  const newProps = useThemeProps('Popover', props);
  const value = {
    PopoverTrigger: trigger,
    setPopoverTrigger: setTrigger,
    PopoverRef: popOverRef,
    initialFocusRef: initialFocusRef,
    finalFocusRef: finalFocusRef,
    isVisible: isVisible,
    setIsVisible: setIsVisible,
    onOpen: onOpen,
    onClose: onClose,
    newProps: newProps,
    closeOnBlur: closeOnBlur,
    backgroundColor: bg || backgroundColor || { ...newProps.popoverProps
    }.backgroundColor,
    borderColor: borderColor || { ...newProps.popoverProps
    }.borderColor,
    borderWidth: borderWidth || { ...newProps.popoverProps
    }.borderWidth
  };
  return /*#__PURE__*/React.createElement(PopoverContext.Provider, {
    value: value
  }, /*#__PURE__*/React.createElement(View, {
    nativeID: id
  }, children));
};

export default /*#__PURE__*/React.memo(Popover);
//# sourceMappingURL=popover.js.map