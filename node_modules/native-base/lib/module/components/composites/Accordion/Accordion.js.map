{"version":3,"sources":["Accordion.tsx"],"names":["React","remove","Box","useThemeProps","getIndexedChildren","AccordionContext","Accordion","children","index","pIndex","defaultIndex","allowMultiple","allowToggle","onChange","props","ref","newProps","setIndex","useState","changeHandler","isOpening","activeIndex","indexCopy","map","i","push","splice","indexOf","n","memo","forwardRef"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,OAAOC,GAAP,MAAgB,sBAAhB;AAEA,SAASC,aAAT,QAA8B,gBAA9B;AACA,OAAOC,kBAAP,MAA+B,mCAA/B;AACA,SAASC,gBAAT,QAAiC,WAAjC;;AAEA,MAAMC,SAAS,GAAG,CAChB;AACEC,EAAAA,QADF;AAEEC,EAAAA,KAAK,EAAEC,MAFT;AAGEC,EAAAA,YAHF;AAIEC,EAAAA,aAJF;AAKEC,EAAAA,WALF;AAMEC,EAAAA,QANF;AAOE,KAAGC;AAPL,CADgB,EAUhBC,GAVgB,KAWb;AACH,QAAMC,QAAQ,GAAGb,aAAa,CAAC,WAAD,EAAcW,KAAd,CAA9B;AAEA,QAAM,CAACN,KAAD,EAAQS,QAAR,IAAoBjB,KAAK,CAACkB,QAAN,CAAeT,MAAM,IAAIC,YAAV,IAA0B,EAAzC,CAA1B;;AACA,QAAMS,aAAa,GAAG,CAACC,SAAD,EAAqBC,WAArB,KAA6C;AACjE,QAAIC,SAAS,GAAGd,KAAK,CAACe,GAAN,CAAWC,CAAD,IAAeA,CAAzB,CAAhB;;AACA,QAAIZ,WAAJ,EAAiB;AACf,UAAIQ,SAAJ,EAAe;AACbE,QAAAA,SAAS,CAACG,IAAV,CAAeJ,WAAf;AACAV,QAAAA,aAAa,GAAGM,QAAQ,CAACK,SAAD,CAAX,GAAyBL,QAAQ,CAAC,CAACI,WAAD,CAAD,CAA9C;AACD,OAHD,MAGO;AACLJ,QAAAA,QAAQ,CAACT,KAAK,CAACkB,MAAN,CAAalB,KAAK,CAACmB,OAAN,CAAcN,WAAd,CAAb,EAAyC,CAAzC,CAAD,CAAR;AACD;AACF,KAPD,MAOO;AACL,UAAID,SAAJ,EAAe;AACbE,QAAAA,SAAS,CAACG,IAAV,CAAeJ,WAAf;AACAV,QAAAA,aAAa,GAAGM,QAAQ,CAACK,SAAD,CAAX,GAAyBL,QAAQ,CAAC,CAACI,WAAD,CAAD,CAA9C;AACD,OAHD,MAGO;AACLpB,QAAAA,MAAM,CAACqB,SAAD,EAAaM,CAAD,IAAOA,CAAC,KAAKP,WAAzB,CAAN;AACAJ,QAAAA,QAAQ,CAACK,SAAD,CAAR;AACD;AACF;;AACDT,IAAAA,QAAQ,IAAIA,QAAQ,CAACS,SAAD,CAApB;AACD,GAnBD;;AAoBA,sBACE,oBAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAE;AAAEd,MAAAA,KAAK,EAAEA,KAAT;AAAgBW,MAAAA;AAAhB;AAAlC,kBACE,oBAAC,GAAD,eAASH,QAAT;AAAmB,IAAA,GAAG,EAAED;AAAxB,MACGX,kBAAkB,CAACG,QAAD,CADrB,CADF,CADF;AAOD,CA1CD;;AA4CA,4BAAeP,KAAK,CAAC6B,IAAN,eAAW7B,KAAK,CAAC8B,UAAN,CAAiBxB,SAAjB,CAAX,CAAf","sourcesContent":["import React from 'react';\nimport remove from 'lodash/remove';\nimport Box from '../../primitives/Box';\nimport type { IAccordionProps } from './types';\nimport { useThemeProps } from '../../../hooks';\nimport getIndexedChildren from '../../../utils/getIndexedChildren';\nimport { AccordionContext } from './Context';\n\nconst Accordion = (\n  {\n    children,\n    index: pIndex,\n    defaultIndex,\n    allowMultiple,\n    allowToggle,\n    onChange,\n    ...props\n  }: IAccordionProps,\n  ref: any\n) => {\n  const newProps = useThemeProps('Accordion', props);\n\n  const [index, setIndex] = React.useState(pIndex || defaultIndex || []);\n  const changeHandler = (isOpening: boolean, activeIndex: number) => {\n    let indexCopy = index.map((i: number) => i);\n    if (allowToggle) {\n      if (isOpening) {\n        indexCopy.push(activeIndex);\n        allowMultiple ? setIndex(indexCopy) : setIndex([activeIndex]);\n      } else {\n        setIndex(index.splice(index.indexOf(activeIndex), 1));\n      }\n    } else {\n      if (isOpening) {\n        indexCopy.push(activeIndex);\n        allowMultiple ? setIndex(indexCopy) : setIndex([activeIndex]);\n      } else {\n        remove(indexCopy, (n) => n === activeIndex);\n        setIndex(indexCopy);\n      }\n    }\n    onChange && onChange(indexCopy);\n  };\n  return (\n    <AccordionContext.Provider value={{ index: index, changeHandler }}>\n      <Box {...newProps} ref={ref}>\n        {getIndexedChildren(children)}\n      </Box>\n    </AccordionContext.Provider>\n  );\n};\n\nexport default React.memo(React.forwardRef(Accordion));\n"]}