function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import Box from '../../primitives/Box';
import { FormControlContext } from './FormControl';

const FormErrorMessage = ({
  children,
  _disabled,
  ...props
}, ref) => {
  const {
    isDisabled,
    isInvalid
  } = React.useContext(FormControlContext);
  return isInvalid ? /*#__PURE__*/React.createElement(Box, _extends({
    _text: {
      fontSize: 'xs',
      color: 'red.400'
    }
  }, props, isDisabled && _disabled, {
    ref: ref
  }), children) : null;
};

export default /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(FormErrorMessage));
//# sourceMappingURL=FormErrorMessage.js.map