function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import Box from '../../primitives/Box';
import { useColorModeValue } from '../../../core/color-mode/hooks';
import { FormControlContext } from './FormControl';

const FormHelperText = ({
  children,
  _disabled,
  _invalid,
  color,
  ...props
}, ref) => {
  const {
    isInvalid,
    isDisabled
  } = React.useContext(FormControlContext);
  const mutedColor = useColorModeValue('gray.400', 'gray.500');
  return /*#__PURE__*/React.createElement(Box, _extends({
    _text: {
      fontSize: 'xs',
      color: color !== null && color !== void 0 ? color : mutedColor
    }
  }, props, {
    ref: ref
  }, isInvalid && _invalid, isDisabled && _disabled), children);
};

export default /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(FormHelperText));
//# sourceMappingURL=FormHelperText.js.map