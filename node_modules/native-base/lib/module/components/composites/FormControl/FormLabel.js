function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import Box from '../../primitives/Box';
import Text from '../../primitives/Text';
import { useToken } from '../../../hooks';
import { FormControlContext } from './FormControl';

const FormLabel = ({
  children,
  _disabled,
  _invalid,
  ...props
}, ref) => {
  const {
    isInvalid,
    isRequired,
    isDisabled
  } = React.useContext(FormControlContext);
  const textColor = useToken('colors', 'red.300');

  const requiredAsterisk = () => /*#__PURE__*/React.createElement(Text, {
    color: textColor
  }, "*");

  return /*#__PURE__*/React.createElement(Box, _extends({
    flexDirection: "row",
    justifyContent: "flex-start",
    _text: {
      fontSize: 'md'
    }
  }, props, {
    ref: ref
  }, isInvalid && _invalid, isDisabled && _disabled), children, isRequired && requiredAsterisk());
};

export default /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(FormLabel));
//# sourceMappingURL=FormLabel.js.map