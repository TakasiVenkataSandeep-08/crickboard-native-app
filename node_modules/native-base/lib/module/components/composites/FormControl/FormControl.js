function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import Box from '../../primitives/Box';
export const FormControlContext = /*#__PURE__*/React.createContext({});

const FormControl = ({
  children,
  isInvalid,
  isRequired,
  isDisabled,
  isReadOnly,
  ...props
}, ref) => {
  return /*#__PURE__*/React.createElement(FormControlContext.Provider, {
    value: {
      isInvalid,
      isRequired,
      isDisabled,
      isReadOnly
    }
  }, /*#__PURE__*/React.createElement(Box, _extends({
    width: "100%"
  }, props, {
    ref: ref
  }), children));
};

export default /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(FormControl));
//# sourceMappingURL=FormControl.js.map