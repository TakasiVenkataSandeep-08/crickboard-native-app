function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import { useThemeProps } from '../../../hooks';
import { default as View } from './../../primitives/View';

const Divider = ({
  style,
  orientation,
  ...props
}, ref) => {
  var _newProps$bg;

  let orientationProps = orientation === 'vertical' ? {
    width: 0,
    height: '100%'
  } : {
    width: '100%',
    height: 0
  };
  let newProps = useThemeProps('Divider', props);
  return /*#__PURE__*/React.createElement(View, _extends({}, orientationProps, {
    borderColor: (_newProps$bg = newProps.bg) !== null && _newProps$bg !== void 0 ? _newProps$bg : newProps.backgroundColor
  }, newProps, {
    style: style,
    ref: ref
  }));
};

export default /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(Divider));
//# sourceMappingURL=index.js.map