function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import { useThemeProps } from '../../../hooks';
import Flex from '../../primitives/Flex';
import { getBreadcrumbSeparator } from './BreadcrumbSeparator';

const Breadcrumb = ({
  style,
  children,
  separator,
  spacing,
  _text,
  ...props
}, ref) => {
  const textProps = { ..._text
  };
  let newProps = useThemeProps('Breadcrumb', props);
  return /*#__PURE__*/React.createElement(Flex, _extends({}, newProps, {
    ref: ref,
    style: style
  }), children && !children.length ? children : getBreadcrumbSeparator(children, separator, textProps, spacing));
};

export default /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(Breadcrumb));
//# sourceMappingURL=Breadcrumb.js.map