function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import CloseButton from '../../composites/CloseButton';
import { ModalContext } from './Context';
import { useThemeProps } from '../../../hooks';

const ModalCloseButton = props => {
  const newProps = useThemeProps('ModalCloseButton', props);
  const {
    toggleVisible,
    toggleOnClose
  } = React.useContext(ModalContext);
  return /*#__PURE__*/React.createElement(CloseButton, _extends({}, newProps, {
    // accessibilityLabel="Close dialog"
    onPress: () => {
      toggleVisible(false);
      toggleOnClose(false);
    }
  }));
};

export default /*#__PURE__*/React.memo(ModalCloseButton);
//# sourceMappingURL=ModalCloseButton.js.map