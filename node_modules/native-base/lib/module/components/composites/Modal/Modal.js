function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useEffect } from 'react';
import { KeyboardAvoidingView, Modal as RNModal, Platform } from 'react-native';
import styled from 'styled-components/native';
import { border, color, flexbox, layout, position, space } from 'styled-system';
import { useOverlay } from '../../../core/Overlay';
import { useThemeProps } from '../../../hooks'; //@ts-ignore - Todo - fix types to typings in rn-aria in next version

import { FocusScope } from '@react-native-aria/focus';
import { customBackground, customBorder, customExtra, customLayout, customOutline, customPosition, customShadow } from '../../../utils/customProps';
import { Box, View } from '../../primitives';
import { default as ModalOverlay } from './ModalOverlay';
import { ModalContext } from './Context';

const ModalWeb = ({
  initialFocusRef,
  finalFocusRef,
  children
}) => {
  useEffect(() => {
    var _initialFocusRef$curr;

    initialFocusRef === null || initialFocusRef === void 0 ? void 0 : (_initialFocusRef$curr = initialFocusRef.current) === null || _initialFocusRef$curr === void 0 ? void 0 : _initialFocusRef$curr.focus();
    const finalRef = finalFocusRef === null || finalFocusRef === void 0 ? void 0 : finalFocusRef.current;
    return () => {
      finalRef === null || finalRef === void 0 ? void 0 : finalRef.focus();
    };
  }, [initialFocusRef, finalFocusRef]);
  return children;
};

const StyledModal = styled(RNModal)(color, space, layout, flexbox, border, position, customPosition, customBorder, customBackground, customOutline, customShadow, customExtra, customLayout);

const Modal = ({
  children,
  isOpen,
  onClose,
  initialFocusRef,
  finalFocusRef,
  justifyContent,
  alignItems,
  id,
  motionPreset,
  avoidKeyboard,
  overlayColor,
  overlayVisible,
  ...props
}, ref) => {
  const {
    closeOverlay,
    setOverlay
  } = useOverlay();
  const [isVisible, setIsVisible] = React.useState(true);

  const closeOverlayInMobile = () => {
    setIsVisible(false);
    onClose(false);
  };

  const {
    contentSize,
    ...newProps
  } = useThemeProps('Modal', props);
  const value = {
    visible: isVisible,
    toggleVisible: setIsVisible,
    toggleOnClose: onClose ? onClose : () => {},
    contentSize: contentSize
  };
  const modalChildren = /*#__PURE__*/React.createElement(Box, _extends({}, newProps, {
    justifyContent: justifyContent !== null && justifyContent !== void 0 ? justifyContent : 'center',
    alignItems: alignItems !== null && alignItems !== void 0 ? alignItems : 'center'
  }), newProps.closeOnOverlayClick === false ? /*#__PURE__*/React.createElement(Box, null) : /*#__PURE__*/React.createElement(ModalOverlay, null), children);
  React.useEffect(() => {
    isOpen && Platform.OS === 'web' ? setOverlay( /*#__PURE__*/React.createElement(ModalContext.Provider, {
      value: value
    }, /*#__PURE__*/React.createElement(FocusScope, {
      contain: true,
      restoreFocus: !(finalFocusRef && finalFocusRef.current),
      autoFocus: !(initialFocusRef && initialFocusRef.current)
    }, /*#__PURE__*/React.createElement(Box, {
      ref: ref,
      nativeID: id,
      h: "100%"
    }, /*#__PURE__*/React.createElement(ModalWeb, {
      initialFocusRef: initialFocusRef,
      finalFocusRef: finalFocusRef
    }, modalChildren)))), {
      onClose: onClose,
      closeOnPress: newProps.closeOnOverlayClick === false ? false : true,
      backgroundColor: overlayColor ? overlayColor : undefined,
      disableOverlay: overlayVisible === false ? true : false,
      motionPreset: motionPreset !== null && motionPreset !== void 0 ? motionPreset : 'fade',
      position: justifyContent === 'flex-start' ? 'top' : justifyContent === 'flex-end' ? 'bottom' : 'center'
    }) : setOverlay( /*#__PURE__*/React.createElement(Box, null), {
      onClose: closeOverlayInMobile,
      closeOnPress: newProps.closeOnOverlayClick === false ? false : true,
      backgroundColor: overlayColor ? overlayColor : undefined,
      disableOverlay: overlayVisible === false ? true : false
    });
    !isOpen && closeOverlay();
    setIsVisible(isOpen);
  },
  /*eslint-disable */
  [isOpen]);
  return Platform.OS !== 'web' ? /*#__PURE__*/React.createElement(ModalContext.Provider, {
    value: value
  }, /*#__PURE__*/React.createElement(View, {
    nativeID: id
  }, /*#__PURE__*/React.createElement(StyledModal, _extends({
    visible: isVisible,
    onRequestClose: () => {
      value.toggleVisible(false);
      value.toggleOnClose(false);
    },
    onShow: () => {
      var _initialFocusRef$curr2;

      return initialFocusRef === null || initialFocusRef === void 0 ? void 0 : (_initialFocusRef$curr2 = initialFocusRef.current) === null || _initialFocusRef$curr2 === void 0 ? void 0 : _initialFocusRef$curr2.focus();
    },
    onDismiss: () => {
      var _finalFocusRef$curren;

      return finalFocusRef === null || finalFocusRef === void 0 ? void 0 : (_finalFocusRef$curren = finalFocusRef.current) === null || _finalFocusRef$curren === void 0 ? void 0 : _finalFocusRef$curren.focus();
    },
    animationType: motionPreset || 'fade',
    transparent: true
  }, newProps, {
    ref: ref
  }), avoidKeyboard ? /*#__PURE__*/React.createElement(KeyboardAvoidingView, {
    behavior: Platform.OS === 'ios' ? 'padding' : 'height'
  }, modalChildren) : modalChildren))) : null;
};

export default /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(Modal));
//# sourceMappingURL=Modal.js.map