function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import styled from 'styled-components/native';
import { default as View } from '../View';
import { getSpacedChildren } from '../../../utils';
const StyledStack = styled(View)({});

const Stack = (props, ref) => {
  const {
    space,
    children,
    divider,
    reversed,
    direction,
    ...remainingProps
  } = props;
  return /*#__PURE__*/React.createElement(StyledStack, _extends({
    flexDirection: direction
  }, remainingProps, {
    ref: ref
  }), getSpacedChildren(children, space, direction === 'row' ? 'X' : 'Y', reversed ? 'reverse' : 'normal', divider));
}; // Exporting this to use it inside HStack and VStack only,


export { Stack as StackMain };
export default /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(Stack));
//# sourceMappingURL=Stack.js.map