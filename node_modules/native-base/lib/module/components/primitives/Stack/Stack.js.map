{"version":3,"sources":["Stack.tsx"],"names":["React","styled","default","View","getSpacedChildren","StyledStack","Stack","props","ref","space","children","divider","reversed","direction","remainingProps","StackMain","memo","forwardRef"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAAqBC,OAAO,IAAIC,IAAhC,QAA4C,SAA5C;AACA,SAASC,iBAAT,QAAkC,gBAAlC;AAIA,MAAMC,WAAW,GAAGJ,MAAM,CAACE,IAAD,CAAN,CAA0B,EAA1B,CAApB;;AAOA,MAAMG,KAAK,GAAG,CACZC,KADY,EAEZC,GAFY,KAGT;AACH,QAAM;AACJC,IAAAA,KADI;AAEJC,IAAAA,QAFI;AAGJC,IAAAA,OAHI;AAIJC,IAAAA,QAJI;AAKJC,IAAAA,SALI;AAMJ,OAAGC;AANC,MAOFP,KAPJ;AAQA,sBACE,oBAAC,WAAD;AAAa,IAAA,aAAa,EAAEM;AAA5B,KAA2CC,cAA3C;AAA2D,IAAA,GAAG,EAAEN;AAAhE,MACGJ,iBAAiB,CAChBM,QADgB,EAEhBD,KAFgB,EAGhBI,SAAS,KAAK,KAAd,GAAsB,GAAtB,GAA4B,GAHZ,EAIhBD,QAAQ,GAAG,SAAH,GAAe,QAJP,EAKhBD,OALgB,CADpB,CADF;AAWD,CAvBD,C,CAyBA;;;AACA,SAASL,KAAK,IAAIS,SAAlB;AACA,4BAAef,KAAK,CAACgB,IAAN,eAAWhB,KAAK,CAACiB,UAAN,CAAiBX,KAAjB,CAAX,CAAf","sourcesContent":["import React from 'react';\nimport styled from 'styled-components/native';\nimport { IViewProps, default as View } from '../View';\nimport { getSpacedChildren } from '../../../utils';\n\ntype SpaceType = 'gutter' | '2xs' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl';\n\nconst StyledStack = styled(View)<IStackProps>({});\nexport type IStackProps = IViewProps & {\n  children: JSX.Element[] | JSX.Element;\n  divider?: JSX.Element;\n  space?: number | SpaceType;\n  reversed?: boolean;\n};\nconst Stack = (\n  props: IStackProps & { direction?: 'column' | 'row' },\n  ref?: any\n) => {\n  const {\n    space,\n    children,\n    divider,\n    reversed,\n    direction,\n    ...remainingProps\n  } = props;\n  return (\n    <StyledStack flexDirection={direction} {...remainingProps} ref={ref}>\n      {getSpacedChildren(\n        children,\n        space,\n        direction === 'row' ? 'X' : 'Y',\n        reversed ? 'reverse' : 'normal',\n        divider\n      )}\n    </StyledStack>\n  );\n};\n\n// Exporting this to use it inside HStack and VStack only,\nexport { Stack as StackMain };\nexport default React.memo(React.forwardRef(Stack));\n"]}