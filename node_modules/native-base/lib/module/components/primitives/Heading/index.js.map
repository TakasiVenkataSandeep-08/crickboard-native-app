{"version":3,"sources":["index.tsx"],"names":["React","Text","styled","border","color","flexbox","layout","space","typography","position","customBorder","customBackground","customOutline","customLayout","customExtra","customShadow","customTypography","customPosition","useThemeProps","StyledHeading","Heading","isTruncated","props","ref","newProps","memo","forwardRef"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,cAArB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SACEC,MADF,EAEEC,KAFF,EAGEC,OAHF,EAIEC,MAJF,EAKEC,KALF,EAMEC,UANF,EAOEC,QAPF,QAQO,eARP;AASA,SACEC,YADF,EAEEC,gBAFF,EAGEC,aAHF,EAIEC,YAJF,EAKEC,WALF,EAMEC,YANF,EAOEC,gBAPF,EAQEC,cARF,QASO,4BATP;AAUA,SAASC,aAAT,QAA8B,gBAA9B;AAGA;AACA,MAAMC,aAAa,GAAGjB,MAAM,CAACD,IAAD,CAAN,CACpBG,KADoB,EAEpBG,KAFoB,EAGpBD,MAHoB,EAIpBD,OAJoB,EAKpBF,MALoB,EAMpBK,UANoB,EAOpBC,QAPoB,EAQpBQ,cARoB,EASpBP,YAToB,EAUpBC,gBAVoB,EAWpBC,aAXoB,EAYpBG,YAZoB,EAapBD,WAboB,EAcpBD,YAdoB,EAepBG,gBAfoB,CAAtB;;AAkBA,MAAMI,OAAO,GAAG,CAAC;AAAEC,EAAAA,WAAF;AAAe,KAAGC;AAAlB,CAAD,EAA2CC,GAA3C,KAAwD;AACtE,QAAMC,QAAQ,GAAGN,aAAa,CAAC,SAAD,EAAYI,KAAZ,CAA9B;AACA,sBACE,oBAAC,aAAD;AACE,IAAA,aAAa,EAAED,WAAW,GAAG,CAAH,GAAO;AADnC,KAEMG,QAFN;AAGE,IAAA,GAAG,EAAED;AAHP,KADF;AAOD,CATD;;AAWA,4BAAevB,KAAK,CAACyB,IAAN,eAAWzB,KAAK,CAAC0B,UAAN,CAAiBN,OAAjB,CAAX,CAAf","sourcesContent":["import React from 'react';\nimport { Text } from 'react-native';\nimport styled from 'styled-components/native';\nimport {\n  border,\n  color,\n  flexbox,\n  layout,\n  space,\n  typography,\n  position,\n} from 'styled-system';\nimport {\n  customBorder,\n  customBackground,\n  customOutline,\n  customLayout,\n  customExtra,\n  customShadow,\n  customTypography,\n  customPosition,\n} from '../../../utils/customProps';\nimport { useThemeProps } from '../../../hooks';\nimport type { IHeadingProps } from './types';\n\n// Can remove all this and extend it from normal Text\nconst StyledHeading = styled(Text)<IHeadingProps>(\n  color,\n  space,\n  layout,\n  flexbox,\n  border,\n  typography,\n  position,\n  customPosition,\n  customBorder,\n  customBackground,\n  customOutline,\n  customShadow,\n  customExtra,\n  customLayout,\n  customTypography\n);\n\nconst Heading = ({ isTruncated, ...props }: IHeadingProps, ref: any) => {\n  const newProps = useThemeProps('Heading', props);\n  return (\n    <StyledHeading\n      numberOfLines={isTruncated ? 1 : 999999}\n      {...newProps}\n      ref={ref}\n    />\n  );\n};\n\nexport default React.memo(React.forwardRef(Heading));\nexport type { IHeadingProps };\n"]}