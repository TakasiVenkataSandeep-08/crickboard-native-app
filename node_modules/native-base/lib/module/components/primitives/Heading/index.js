function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import { Text } from 'react-native';
import styled from 'styled-components/native';
import { border, color, flexbox, layout, space, typography, position } from 'styled-system';
import { customBorder, customBackground, customOutline, customLayout, customExtra, customShadow, customTypography, customPosition } from '../../../utils/customProps';
import { useThemeProps } from '../../../hooks';
// Can remove all this and extend it from normal Text
const StyledHeading = styled(Text)(color, space, layout, flexbox, border, typography, position, customPosition, customBorder, customBackground, customOutline, customShadow, customExtra, customLayout, customTypography);

const Heading = ({
  isTruncated,
  ...props
}, ref) => {
  const newProps = useThemeProps('Heading', props);
  return /*#__PURE__*/React.createElement(StyledHeading, _extends({
    numberOfLines: isTruncated ? 1 : 999999
  }, newProps, {
    ref: ref
  }));
};

export default /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(Heading));
//# sourceMappingURL=index.js.map