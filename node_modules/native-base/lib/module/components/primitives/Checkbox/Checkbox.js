function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useContext } from 'react';
import { TouchableOpacity, Platform } from 'react-native';
import { mergeRefs } from './../../../utils';
import { useThemeProps } from '../../../hooks';
import { Center } from '../../composites/Center';
import { FormControlContext } from '../../composites/FormControl';
import Box from '../Box';
import Icon from '../Icon';
import { useToggleState } from '@react-stately/toggle';
import { VisuallyHidden } from '@react-aria/visually-hidden';
import { CheckboxGroupContext } from './CheckboxGroup';
import { useHover } from '@react-native-aria/interactions';
import { useCheckbox, useCheckboxGroupItem } from '@react-native-aria/checkbox';
import { useFocusRing } from '@react-native-aria/focus';

const Checkbox = ({
  icon,
  ...props
}, ref) => {
  const formControlContext = React.useContext(FormControlContext);
  const checkboxGroupContext = React.useContext(CheckboxGroupContext);
  const {
    activeColor,
    borderColor,
    iconColor,
    size,
    ...newProps
  } = useThemeProps('Checkbox', { ...checkboxGroupContext,
    ...formControlContext,
    ...props
  });

  let _ref = React.useRef();

  const mergedRef = mergeRefs([ref, _ref]);
  let state = useToggleState({ ...props,
    defaultSelected: props.defaultIsChecked,
    isSelected: props.isChecked
  });
  let groupState = useContext(CheckboxGroupContext);
  const {
    isHovered
  } = useHover({}, _ref); // Swap hooks depending on whether this checkbox is inside a CheckboxGroup.
  // This is a bit unorthodox. Typically, hooks cannot be called in a conditional,
  // but since the checkbox won't move in and out of a group, it should be safe.

  let {
    inputProps
  } = groupState ? // eslint-disable-next-line react-hooks/rules-of-hooks
  useCheckboxGroupItem({ ...newProps,
    value: newProps.value
  }, groupState.state, //@ts-ignore
  mergedRef) : // eslint-disable-next-line react-hooks/rules-of-hooks
  useCheckbox(newProps, state, //@ts-ignore
  mergedRef);
  const isChecked = inputProps.checked;
  const isDisabled = inputProps.disabled;
  const sizedIcon = icon ? () => /*#__PURE__*/React.cloneElement(icon, {
    size,
    color: icon.props.color ? icon.props.color : iconColor
  }, icon.props.children) : null;
  const outlineColor = isHovered && !isDisabled ? activeColor : isChecked ? isDisabled ? borderColor : activeColor : borderColor;
  const component = /*#__PURE__*/React.createElement(Box, _extends({
    flexDirection: "row",
    alignItems: "center"
  }, newProps, {
    opacity: isDisabled ? 0.4 : 1
  }, Platform.OS === 'web' ? {
    disabled: isDisabled,
    cursor: isDisabled ? 'not-allowed' : 'auto'
  } : {}), /*#__PURE__*/React.createElement(Center, {
    backgroundColor: isChecked ? isDisabled ? borderColor : activeColor : 'transparent',
    borderColor: outlineColor,
    borderWidth: 1,
    borderRadius: 4,
    p: 1
  }, icon && sizedIcon && isChecked ? sizedIcon() : /*#__PURE__*/React.createElement(Icon, {
    name: "check-bold",
    type: "MaterialCommunityIcons",
    size: size,
    color: iconColor,
    opacity: isChecked ? 1 : 0
  })), props.children);
  const {
    focusProps,
    isFocusVisible
  } = useFocusRing();
  return /*#__PURE__*/React.createElement(React.Fragment, null, Platform.OS === 'web' ? /*#__PURE__*/React.createElement(Box // @ts-ignore - RN web supports accessibilityRole="label"
  , {
    accessibilityRole: "label",
    ref: mergedRef,
    outlineWidth: isFocusVisible ? 1 : 0,
    outlineColor: activeColor,
    outlineStyle: 'solid'
  }, /*#__PURE__*/React.createElement(VisuallyHidden, null, /*#__PURE__*/React.createElement("input", _extends({}, inputProps, focusProps, {
    ref: mergedRef
  }))), component) : /*#__PURE__*/React.createElement(TouchableOpacity, _extends({}, inputProps, {
    ref: mergedRef
  }), component));
};

export default /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(Checkbox));
//# sourceMappingURL=Checkbox.js.map