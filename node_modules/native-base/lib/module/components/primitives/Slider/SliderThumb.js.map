{"version":3,"sources":["SliderThumb.tsx"],"names":["React","StyleSheet","Animated","Platform","SliderContext","Box","Icon","useThemeProps","SliderThumb","children","props","newProps","sliderOffset","panResponder","colorScheme","thumbSize","orientation","isDisabled","useContext","sliderThumbPosition","customStyle","create","position","display","justifyContent","alignItems","borderRadius","padding","verticalStyle","bottom","horizontalStyle","left","sizedIcon","cloneElement","size","color","panHandlers","OS"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,QAArB,EAA+BC,QAA/B,QAA+C,cAA/C;AACA,SAASC,aAAT,QAA8B,WAA9B;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,SAASC,aAAT,QAA8B,gBAA9B;;AAGA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAY,KAAGC;AAAf,CAAD,KAA0C;AAC5D,QAAM,EAAE,GAAGC;AAAL,MAAkBJ,aAAa,CAAC,aAAD,EAAgBG,KAAhB,CAArC;AACA,QAAM;AACJE,IAAAA,YAAY,GAAG,CADX;AAEJC,IAAAA,YAFI;AAGJC,IAAAA,WAHI;AAIJC,IAAAA,SAAS,GAAG,CAJR;AAKJC,IAAAA,WALI;AAMJC,IAAAA;AANI,MAOmBjB,KAAK,CAACkB,UAAN,CAAiBd,aAAjB,CAPzB;AASA,QAAMe,mBAAmB,GAAGP,YAAY,GAAG,CAAf,GAAmBG,SAAS,GAAG,CAA3D;AAEA,QAAMK,WAAW,GAAGnB,UAAU,CAACoB,MAAX,CAAkB;AACpCb,IAAAA,WAAW,EAAE;AACXc,MAAAA,QAAQ,EAAE,UADC;AAEXC,MAAAA,OAAO,EAAE,MAFE;AAGXC,MAAAA,cAAc,EAAE,QAHL;AAIXC,MAAAA,UAAU,EAAE,QAJD;AAKXC,MAAAA,YAAY,EAAE,GALH;AAMXC,MAAAA,OAAO,EAAE,CANE,CAMC;;AAND,KADuB;AASpCC,IAAAA,aAAa,EAAE;AACbC,MAAAA,MAAM,EAAEV;AADK,KATqB;AAYpCW,IAAAA,eAAe,EAAE;AACfC,MAAAA,IAAI,EAAEZ;AADS;AAZmB,GAAlB,CAApB;;AAiBA,QAAMa,SAAS,GAAG,mBAChBhC,KAAK,CAACiC,YAAN,CACExB,QADF,EAEE;AACEyB,IAAAA,IAAI,YAAKnB,SAAL,OADN;AAEEoB,IAAAA,KAAK,EAAE1B,QAAQ,CAACC,KAAT,CAAeyB,KAAf,GAAuB1B,QAAQ,CAACC,KAAT,CAAeyB,KAAtC,GAA8CrB;AAFvD,GAFF,EAMEL,QAAQ,CAACC,KAAT,CAAeD,QANjB,CADF;;AAUA,sBACE,oBAAC,QAAD,CAAU,IAAV;AACE,IAAA,KAAK,EAAE,CACLW,WAAW,CAACZ,WADP,EAELQ,WAAW,KAAK,UAAhB,GACII,WAAW,CAACQ,aADhB,GAEIR,WAAW,CAACU,eAJX;AADT,KAOMjB,YAAY,CAACuB,WAPnB,gBASE,oBAAC,GAAD;AACE,IAAA,MAAM,EACJjC,QAAQ,CAACkC,EAAT,KAAgB,KAAhB,GACIpB,UAAU,GACR,aADQ,GAER,SAHN,GAII,IANR;AAQE,IAAA,QAAQ,EAAC,UARX;AASE,IAAA,YAAY,EAAC,MATf;AAUE,IAAA,eAAe,EAAC,UAVlB;AAWE,IAAA,CAAC,EAAE,CAXL;AAYE,IAAA,OAAO,EAAC,MAZV;AAaE,IAAA,cAAc,EAAC,QAbjB;AAcE,IAAA,UAAU,EAAC,QAdb;AAeE,IAAA,UAAU,EAAEd,QAAQ,CAACkC,EAAT,KAAgB,KAAhB,GAAwB,MAAxB,GAAiC;AAf/C,KAgBM1B,QAhBN,GAkBGF,QAAQ,GACPuB,SAAS,EADF,gBAGP,oBAAC,IAAD;AACE,IAAA,IAAI,EAAC,eADP;AAEE,IAAA,IAAI,EAAC,wBAFP;AAGE,IAAA,KAAK,EAAElB,WAHT;AAIE,IAAA,IAAI,YAAKC,SAAL,OAJN;AAKE,IAAA,OAAO,EAAE;AALX,IArBJ,CATF,CADF;AA0CD,CAlFD;;AAoFA,eAAeP,WAAf","sourcesContent":["import React from 'react';\nimport { StyleSheet, Animated, Platform } from 'react-native';\nimport { SliderContext } from './Context';\nimport Box from '../Box';\nimport Icon from '../Icon';\nimport { useThemeProps } from '../../../hooks';\nimport type { ISliderProps, ISliderContextProps } from './types';\n\nconst SliderThumb = ({ children, ...props }: ISliderProps) => {\n  const { ...newProps } = useThemeProps('SliderThumb', props);\n  const {\n    sliderOffset = 0,\n    panResponder,\n    colorScheme,\n    thumbSize = 0,\n    orientation,\n    isDisabled,\n  }: ISliderContextProps = React.useContext(SliderContext);\n\n  const sliderThumbPosition = sliderOffset - 8 - thumbSize / 2;\n\n  const customStyle = StyleSheet.create({\n    SliderThumb: {\n      position: 'absolute',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      borderRadius: 999,\n      padding: 4, // increased touch area for better touch detection.\n    },\n    verticalStyle: {\n      bottom: sliderThumbPosition,\n    },\n    horizontalStyle: {\n      left: sliderThumbPosition,\n    },\n  });\n\n  const sizedIcon = () =>\n    React.cloneElement(\n      children,\n      {\n        size: `${thumbSize}px`,\n        color: children.props.color ? children.props.color : colorScheme,\n      },\n      children.props.children\n    );\n\n  return (\n    <Animated.View\n      style={[\n        customStyle.SliderThumb,\n        orientation === 'vertical'\n          ? customStyle.verticalStyle\n          : customStyle.horizontalStyle,\n      ]}\n      {...panResponder.panHandlers}\n    >\n      <Box\n        cursor={\n          Platform.OS === 'web'\n            ? isDisabled\n              ? 'not-allowed'\n              : 'pointer'\n            : null\n        }\n        position=\"relative\"\n        borderRadius=\"full\"\n        backgroundColor=\"light.50\"\n        p={1}\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        userSelect={Platform.OS === 'web' ? 'none' : null}\n        {...newProps}\n      >\n        {children ? (\n          sizedIcon()\n        ) : (\n          <Icon\n            name=\"circle-medium\"\n            type=\"MaterialCommunityIcons\"\n            color={colorScheme}\n            size={`${thumbSize}px`}\n            opacity={0}\n          />\n        )}\n      </Box>\n    </Animated.View>\n  );\n};\n\nexport default SliderThumb;\n"]}