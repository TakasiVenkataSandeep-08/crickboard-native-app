function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import { SliderContext } from './Context';
import { StyleSheet } from 'react-native';
import Box from '../Box';

const SliderFilledTrack = ({
  style,
  ...props
}) => {
  const {
    isReversed,
    colorScheme,
    barSize = 0,
    sliderOffset = 0,
    orientation
  } = React.useContext(SliderContext);
  const sliderTrackPosition = isReversed ? sliderOffset : sliderOffset - barSize; // NOTE: Required for WEB compatibility

  const customStyle = StyleSheet.create({
    verticalStyle: {
      top: -sliderTrackPosition
    },
    horizontalStyle: {
      left: sliderTrackPosition
    }
  });
  return /*#__PURE__*/React.createElement(Box, _extends({
    position: "absolute",
    left: orientation === 'vertical' ? 0 : sliderTrackPosition,
    top: orientation === 'vertical' ? -sliderTrackPosition : 0,
    backgroundColor: colorScheme,
    height: "100%",
    width: "100%"
  }, props, {
    style: [style, orientation === 'vertical' ? customStyle.verticalStyle : customStyle.horizontalStyle]
  }));
};

export default SliderFilledTrack;
//# sourceMappingURL=SliderFilledTrack.js.map