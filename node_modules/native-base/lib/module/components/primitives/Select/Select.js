function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import Text from '../Text';
import { usePopover } from '../../../core';
import Button from '../Button';
import { ScrollView } from 'react-native';
import { useThemeProps } from '../../../hooks';
import { useHover } from '@react-native-aria/interactions';
import { Picker as RNPicker } from '@react-native-picker/picker';
import styled from 'styled-components/native';
import { border, flex, space, color, flexbox, layout, typography } from 'styled-system';
import { customBorder, customBackground, customOutline, customLayout, customExtra, customShadow, customTypography } from '../../../utils/customProps';
import { Platform } from 'react-native';
import { useToken } from '../../../hooks/useToken';
import { FormControlContext } from '../../composites/FormControl';
const StyledNativePicker = styled(RNPicker)(flex, color, space, layout, flexbox, border, typography, customBorder, customBackground, customOutline, customShadow, customExtra, customTypography, customLayout);

const Select = ({
  onValueChange,
  selectedValue,
  children,
  dropdownIcon,
  dropdownOpenIcon,
  dropdownCloseIcon,
  ...props
}, ref) => {
  const formControlContext = React.useContext(FormControlContext);
  const {
    variant,
    _item,
    _ios,
    _web,
    _android,
    _placeholder,
    placeholder,
    selectedItemBg,
    _selectedItem,
    _hover,
    isInvalid,
    _isInvalid,
    isDisabled,
    _isDisabled,
    width,
    style,
    color,
    androidMode,
    androidIconColor,
    androidPrompt,
    ...newProps
  } = useThemeProps('Select', { ...formControlContext,
    ...props
  });
  let triggerRef = React.useRef();
  const {
    isHovered
  } = useHover({}, ref !== null && ref !== void 0 ? ref : triggerRef);
  let [isOpen, toggle] = React.useState(false);
  const updatedChildren = React.Children.map(children, child => {
    return /*#__PURE__*/React.cloneElement(child, {
      variant: variant
    }, child.props.children);
  });
  let itemsList = React.Children.map(updatedChildren, child => {
    return {
      label: child.props.label,
      value: child.props.value
    };
  });
  const {
    setPopover,
    closePopover
  } = usePopover();

  const closeMenu = () => {
    closePopover();
    toggle(false);
  };

  const openMenu = () => {
    if (!isDisabled) {
      setPopover( /*#__PURE__*/React.createElement(ScrollView, null, children), {
        triggerRef,
        animationDuration: 200,
        onClose: closeMenu,
        placeOverTriggerElement: false,
        parentComponentConfig: {
          open: isOpen,
          closeMenu,
          closeOnSelect: true,
          selectedValue,
          selectedItemBg,
          _selectedItem,
          onValueChange,
          itemsList,
          _item,
          width,
          variant: 'styled'
        }
      });
      toggle(true);
    }
  };

  const selectedItemArray = itemsList.filter(item => item.value === selectedValue);
  const selectedItem = selectedItemArray && selectedItemArray.length ? selectedItemArray[0] : null;
  let icon = !dropdownOpenIcon && !dropdownCloseIcon && dropdownIcon ? dropdownIcon : isOpen ? dropdownOpenIcon ? dropdownOpenIcon : null : dropdownCloseIcon ? dropdownCloseIcon : null;
  const placeholderProps = selectedItem ? {} : _placeholder;
  const StyledSelect = /*#__PURE__*/React.createElement(Button, _extends({
    onPress: openMenu,
    width: width,
    ref: ref !== null && ref !== void 0 ? ref : triggerRef
  }, newProps, {
    justifyContent: "space-between"
  }, isDisabled && _isDisabled, isInvalid && _isInvalid, isHovered && _hover, Platform.OS === 'web' ? {
    disabled: isDisabled,
    cursor: isDisabled ? 'not-allowed' : 'auto'
  } : {}, {
    style: style
  }), /*#__PURE__*/React.createElement(Text, _extends({
    opacity: selectedItem ? undefined : 0.5
  }, placeholderProps), selectedItem ? selectedItem.label : placeholder), icon);
  const NativeSelect = /*#__PURE__*/React.createElement(StyledNativePicker // Not getting ref on web
  , _extends({
    ref: ref !== null && ref !== void 0 ? ref : triggerRef,
    enabled: !isDisabled
  }, newProps, {
    color: color,
    onValueChange: onValueChange,
    selectedValue: selectedValue,
    mode: androidMode,
    prompt: androidPrompt,
    dropdownIconColor: useToken('colors', androidIconColor),
    itemStyle: {
      color: useToken('colors', color),
      ..._item
    }
  }, Platform.OS === 'ios' && _ios, Platform.OS === 'android' && _android, Platform.OS === 'web' && _web, isDisabled && _isDisabled, isInvalid && _isInvalid, isHovered && _hover), updatedChildren);
  return variant === 'styled' ? StyledSelect : NativeSelect;
};

export default /*#__PURE__*/React.forwardRef(Select);
//# sourceMappingURL=Select.js.map