function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import { Text as NativeText } from 'react-native';
import styled from 'styled-components/native';
import { color, position, space, typography, layout, flexbox, border } from 'styled-system';
import { useThemeProps } from '../../../hooks/useThemeProps';
import { customBorder, customBackground, customOutline, customLayout, customExtra, customShadow, customTypography, customPosition } from '../../../utils/customProps';
const StyledText = styled(NativeText)(color, space, position, layout, flexbox, border, typography, position, customPosition, customBorder, customBackground, customOutline, customShadow, customExtra, customLayout, customTypography);

const Text = ({
  children,
  style,
  isTruncated,
  noOfLines,
  bold,
  italic,
  sub,
  highlight,
  underline,
  strikeThrough,
  ...props
}, ref) => {
  const newProps = useThemeProps('Text', props);
  return /*#__PURE__*/React.createElement(StyledText, _extends({}, newProps, {
    numberOfLines: noOfLines ? noOfLines : isTruncated ? 1 : 999,
    fontWeight: bold ? 'bold' : newProps.fontWeight,
    fontStyle: italic ? 'italic' : newProps.fontStyle,
    bg: highlight ? 'yellow.200' : newProps.bg,
    textDecorationLine: underline ? 'underline' : strikeThrough ? 'line-through' : newProps.textDecorationLine,
    fontSize: sub ? 10 : newProps.fontSize,
    style: style,
    ref: ref
  }), children);
};

export default /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(Text));
//# sourceMappingURL=index.js.map