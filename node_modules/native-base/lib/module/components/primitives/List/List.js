function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import { VStack } from '../Stack';
import { useThemeProps } from '../../../hooks';

const List = ({
  children,
  spacing,
  ...props
}, ref) => {
  const {
    _text,
    ...newProps
  } = useThemeProps('List', props); // add props to children

  children = React.Children.map(children, (child, ind) => {
    return /*#__PURE__*/React.cloneElement(child, {
      index: ind,
      py: spacing,
      _text: _text,
      ...child.props
    }, child.props.children);
  });
  return /*#__PURE__*/React.createElement(VStack, _extends({
    ref: ref
  }, newProps), children);
};

export default /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(List));
//# sourceMappingURL=List.js.map