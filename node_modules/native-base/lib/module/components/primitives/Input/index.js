function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import { TextInput, Animated, Platform } from 'react-native';
import styled from 'styled-components/native';
import { border, flex, space, color, flexbox, layout, typography } from 'styled-system';
import { customBorder, customBackground, customOutline, customLayout, customExtra, customShadow, customTypography } from '../../../utils/customProps';
import Box from '../Box';
import Text from '../Text';
import Flex from '../Flex';
import { InputRightAddon, InputGroup, InputLeftAddon } from './InputGroup';
import { useThemeProps, useToken } from '../../../hooks';
import { themeTools } from '../../../theme';
import { useHover } from '@react-native-aria/interactions';
import { FormControlContext } from '../../composites/FormControl';
const StyledInput = styled(TextInput)(flex, color, space, layout, flexbox, border, typography, customBorder, customBackground, customOutline, customShadow, customExtra, customTypography, customLayout);

const Input = ({
  style,
  placeholder,
  errorMessage,
  _errorMessage,
  // isRequired,
  isFullWidth,
  onFocus,
  onBlur,
  ariaLabel,
  accessibilityLabel,
  InputLeftElement,
  InputRightElement,
  type,
  w,
  width,
  h,
  height,
  m,
  mr,
  ml,
  mt,
  mb,
  label,
  _label,
  placeholderTextColor,
  ...props
}, ref) => {
  const formControlContext = React.useContext(FormControlContext);
  const layoutProps = {
    w,
    width,
    m,
    mr,
    ml,
    mt,
    mb
  };
  const [isFocused, setIsFocused] = React.useState(false);

  const handleFocus = (focusState, callback) => {
    setIsFocused(focusState);
    callback();
  };

  let placeholderColor = useToken('colors', placeholderTextColor !== null && placeholderTextColor !== void 0 ? placeholderTextColor : 'gray.400');

  if (typeof placeholderColor !== 'string') {
    placeholderColor = placeholderTextColor;
  }

  const {
    isInvalid,
    isDisabled,
    isReadOnly,
    borderColor: borderColorFromProps,
    fontSize,
    borderWidth,
    focusBorderColor,
    errorBorderColor,
    hoverBorderColor,
    borderBottomWidth,
    ...newProps
  } = useThemeProps('Input', { ...formControlContext,
    ...props
  });
  const computedProps = {
    display: 'flex',
    flexDirection: 'row',
    h,
    height
  };
  let [, rem] = themeTools.extractInObject(newProps, ['p', 'px', 'py', 'pt', 'pb', 'pl', 'pr']);
  const slideAnim = React.useRef(new Animated.Value(0)).current;

  const slideIn = () => {
    Animated.timing(slideAnim, {
      toValue: 0,
      duration: 200,
      useNativeDriver: Platform.OS !== 'web'
    }).start();
  };

  const slideOut = () => {
    Animated.timing(slideAnim, {
      // NOTE: Below 3 value are (padding + half of font + buffer)
      toValue: -(12 + Math.floor(fontSize / 2) + 2),
      duration: 200,
      useNativeDriver: Platform.OS !== 'web'
    }).start();
  };

  const _ref = React.useRef(null);

  const {
    isHovered
  } = useHover({}, _ref);
  let updatedBorderColor = borderColorFromProps;
  if (isHovered) updatedBorderColor = hoverBorderColor;else if (isFocused) updatedBorderColor = focusBorderColor;else if (isInvalid) updatedBorderColor = errorBorderColor;
  const focusStyle = {
    shadow: 3,
    shadowColor: '#2563EB'
  };
  return /*#__PURE__*/React.createElement(Box, _extends({
    w: isFullWidth ? '100%' : 'auto'
  }, layoutProps), /*#__PURE__*/React.createElement(Box, _extends({
    ref: _ref,
    borderColor: updatedBorderColor,
    borderWidth: borderWidth,
    borderBottomWidth: borderBottomWidth
  }, rem, isDisabled && newProps._isDisabledProps, computedProps, isFocused && Platform.OS === 'web' && focusStyle, {
    style: style
  }), InputLeftElement ? /*#__PURE__*/React.createElement(Flex, {
    justify: "center",
    align: "center",
    left: 0
  }, InputLeftElement) : null, isFocused && label && /*#__PURE__*/React.createElement(Flex, {
    position: "absolute"
  }, /*#__PURE__*/React.createElement(Animated.View, {
    style: {
      transform: [{
        translateY: slideAnim,
        translateX: 4
      }]
    }
  }, /*#__PURE__*/React.createElement(Flex, _extends({}, newProps, {
    bg: "transparent"
  }), /*#__PURE__*/React.createElement(Box, {
    bg: "transparent",
    color: updatedBorderColor,
    fontSize: fontSize,
    _text: _label
  }, label, /*#__PURE__*/React.createElement(Box, {
    w: "120%",
    p: "1px",
    bg: "gray.50",
    position: "absolute",
    right: "-10%",
    bottom: "".concat(Math.floor(fontSize / 2) + (Platform.OS === 'ios' ? 1 : 0), "px"),
    zIndex: -1
  }))))), /*#__PURE__*/React.createElement(StyledInput, _extends({}, newProps, {
    fontSize: fontSize,
    backgroundColor: "transparent",
    flex: 1,
    secureTextEntry: type === 'password',
    accessible: true,
    accessibilityLabel: ariaLabel || accessibilityLabel,
    onKeyPress: e => {
      e.persist();
    },
    onFocus: () => {
      slideOut();
      handleFocus(true, onFocus ? onFocus : () => {});
    },
    onBlur: e => {
      // TODO: animation not happening because of component rerender
      e.nativeEvent.text && slideIn();
      handleFocus(false, onBlur ? onBlur : () => {});
    },
    placeholder: isFocused && label ? '' : placeholder,
    placeholderTextColor: placeholderColor,
    editable: isDisabled || isReadOnly ? false : true // borderRadius={50} //Remove variant props from StyledInput
    ,
    borderWidth: undefined
  }, Platform.OS === 'web' ? {
    disabled: isDisabled,
    cursor: isDisabled ? 'not-allowed' : 'auto'
  } : {}, {
    style: [Platform.OS === 'web' && {
      // @ts-ignore
      outline: 'none'
    }],
    ref: ref
  })), InputRightElement ? /*#__PURE__*/React.createElement(Flex, {
    justify: "center",
    align: "center",
    right: 0
  }, InputRightElement) : null), isInvalid && errorMessage ? /*#__PURE__*/React.createElement(Text, _extends({
    ml: 2,
    color: "danger.600"
  }, _errorMessage), errorMessage) : null);
}; //-------------------------------- InputGroup and other Child components -------------------------------


export { InputRightAddon, InputGroup, InputLeftAddon };
export default /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(Input));
//# sourceMappingURL=index.js.map