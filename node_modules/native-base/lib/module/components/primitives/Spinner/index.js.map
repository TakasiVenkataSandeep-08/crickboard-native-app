{"version":3,"sources":["index.tsx"],"names":["React","ActivityIndicator","Animated","Easing","StyleSheet","styled","color","space","position","border","useToken","useThemeProps","useSpinner","customLayout","customPosition","Default","Dotted","MultiColorDotted","Stroked","SquareDotted","StyleAnimatedView","View","StyledSpinner","Spinner","renderProp","props","ref","newProps","spinnerColor","spinnerProps","iconSize","sm","lg","degree","Value","loop","timing","toValue","duration","easing","linear","useNativeDriver","start","styles","create","animateStyle","transform","rotateZ","interpolate","inputRange","outputRange","variant","SpinnerVariant","size","memo","forwardRef"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { ActivityIndicator, Animated, Easing, StyleSheet } from 'react-native';\nimport type { ActivityIndicator as ActivityIndicatorType } from 'react-native';\nimport styled from 'styled-components/native';\nimport { color, space, position, border } from 'styled-system';\nimport { useToken, useThemeProps } from '../../../hooks';\nimport type { ISpinnerProps } from './types';\nimport { useSpinner } from './useSpinner';\nimport type { IBoxProps } from '../Box';\nimport { customLayout, customPosition } from '../../../utils/customProps';\nimport {\n  Default,\n  Dotted,\n  MultiColorDotted,\n  Stroked,\n  SquareDotted,\n} from './variants';\n\nconst StyleAnimatedView = styled(Animated.View)<IBoxProps>(\n  color,\n  border,\n  position,\n  customPosition,\n  customLayout\n);\n\nconst StyledSpinner = styled(ActivityIndicator)<ISpinnerProps>(\n  color,\n  space,\n  position\n);\nconst Spinner: any = ({ renderProp, ...props }: ISpinnerProps, ref: any) => {\n  const newProps = useThemeProps('Spinner', props);\n  const spinnerColor = useToken('colors', newProps.color);\n  const { spinnerProps } = useSpinner(props);\n  const iconSize: any = { sm: 10, lg: 20 };\n\n  const degree: any = new Animated.Value(0);\n  Animated.loop(\n    Animated.timing(degree, {\n      toValue: 1,\n      duration: newProps.duration ?? 1900,\n      easing: Easing.linear,\n      useNativeDriver: false,\n    })\n  ).start();\n\n  const styles = StyleSheet.create({\n    animateStyle: {\n      transform: [\n        {\n          rotateZ: degree.interpolate({\n            inputRange: [0, 1],\n            outputRange: ['0deg', '360deg'],\n          }),\n        },\n      ],\n    },\n  });\n  if (!newProps.variant) {\n    return (\n      <StyledSpinner\n        {...spinnerProps}\n        {...newProps}\n        color={spinnerColor}\n        ref={ref}\n      />\n    );\n  } else {\n    if (newProps.variant === 'custom' && renderProp) {\n      return (\n        <StyleAnimatedView style={styles.animateStyle}>\n          {renderProp}\n        </StyleAnimatedView>\n      );\n    } else {\n      let SpinnerVariant = null;\n      switch (newProps.variant) {\n        case 'dotted':\n          SpinnerVariant = (\n            <Dotted\n              color={spinnerColor}\n              size={props.size ? iconSize[props.size] : 12}\n            />\n          );\n          break;\n        case 'multiColorDotted':\n          SpinnerVariant = (\n            <MultiColorDotted\n              color={spinnerColor}\n              size={props.size ? iconSize[props.size] : 12}\n            />\n          );\n          break;\n        case 'stroked':\n          SpinnerVariant = (\n            <Stroked\n              color={spinnerColor}\n              size={props.size ? iconSize[props.size] : 12}\n            />\n          );\n          break;\n        case 'squareDotted':\n          SpinnerVariant = (\n            <SquareDotted\n              color={spinnerColor}\n              size={props.size ? iconSize[props.size] : 12}\n            />\n          );\n          break;\n        default:\n          SpinnerVariant = (\n            <Default\n              color={spinnerColor}\n              size={props.size ? iconSize[props.size] : 12}\n            />\n          );\n      }\n      return (\n        <StyleAnimatedView style={styles.animateStyle}>\n          {SpinnerVariant}\n        </StyleAnimatedView>\n      );\n    }\n  }\n};\n\nexport default React.memo(\n  React.forwardRef<ActivityIndicatorType, ISpinnerProps>(Spinner)\n);\nexport type { ISpinnerProps };\n"]}