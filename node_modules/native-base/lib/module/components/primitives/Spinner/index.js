function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import { ActivityIndicator, Animated, Easing, StyleSheet } from 'react-native';
import styled from 'styled-components/native';
import { color, space, position, border } from 'styled-system';
import { useToken, useThemeProps } from '../../../hooks';
import { useSpinner } from './useSpinner';
import { customLayout, customPosition } from '../../../utils/customProps';
import { Default, Dotted, MultiColorDotted, Stroked, SquareDotted } from './variants';
const StyleAnimatedView = styled(Animated.View)(color, border, position, customPosition, customLayout);
const StyledSpinner = styled(ActivityIndicator)(color, space, position);

const Spinner = ({
  renderProp,
  ...props
}, ref) => {
  var _newProps$duration;

  const newProps = useThemeProps('Spinner', props);
  const spinnerColor = useToken('colors', newProps.color);
  const {
    spinnerProps
  } = useSpinner(props);
  const iconSize = {
    sm: 10,
    lg: 20
  };
  const degree = new Animated.Value(0);
  Animated.loop(Animated.timing(degree, {
    toValue: 1,
    duration: (_newProps$duration = newProps.duration) !== null && _newProps$duration !== void 0 ? _newProps$duration : 1900,
    easing: Easing.linear,
    useNativeDriver: false
  })).start();
  const styles = StyleSheet.create({
    animateStyle: {
      transform: [{
        rotateZ: degree.interpolate({
          inputRange: [0, 1],
          outputRange: ['0deg', '360deg']
        })
      }]
    }
  });

  if (!newProps.variant) {
    return /*#__PURE__*/React.createElement(StyledSpinner, _extends({}, spinnerProps, newProps, {
      color: spinnerColor,
      ref: ref
    }));
  } else {
    if (newProps.variant === 'custom' && renderProp) {
      return /*#__PURE__*/React.createElement(StyleAnimatedView, {
        style: styles.animateStyle
      }, renderProp);
    } else {
      let SpinnerVariant = null;

      switch (newProps.variant) {
        case 'dotted':
          SpinnerVariant = /*#__PURE__*/React.createElement(Dotted, {
            color: spinnerColor,
            size: props.size ? iconSize[props.size] : 12
          });
          break;

        case 'multiColorDotted':
          SpinnerVariant = /*#__PURE__*/React.createElement(MultiColorDotted, {
            color: spinnerColor,
            size: props.size ? iconSize[props.size] : 12
          });
          break;

        case 'stroked':
          SpinnerVariant = /*#__PURE__*/React.createElement(Stroked, {
            color: spinnerColor,
            size: props.size ? iconSize[props.size] : 12
          });
          break;

        case 'squareDotted':
          SpinnerVariant = /*#__PURE__*/React.createElement(SquareDotted, {
            color: spinnerColor,
            size: props.size ? iconSize[props.size] : 12
          });
          break;

        default:
          SpinnerVariant = /*#__PURE__*/React.createElement(Default, {
            color: spinnerColor,
            size: props.size ? iconSize[props.size] : 12
          });
      }

      return /*#__PURE__*/React.createElement(StyleAnimatedView, {
        style: styles.animateStyle
      }, SpinnerVariant);
    }
  }
};

export default /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(Spinner));
//# sourceMappingURL=index.js.map