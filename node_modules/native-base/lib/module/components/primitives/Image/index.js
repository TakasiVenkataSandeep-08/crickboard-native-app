function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useState } from 'react';
import { Image as RNImage } from 'react-native';
import styled from 'styled-components/native';
import { border, color, flexbox, layout, space, position } from 'styled-system';
import { customBorder, customBackground, customOutline, customLayout, customExtra, customShadow, customPosition } from '../../../utils/customProps';
import Text from '../Text';
import { useThemeProps } from '../../../hooks';
const StyledImage = styled(RNImage)(color, space, layout, flexbox, border, position, customPosition, customBorder, customBackground, customOutline, customShadow, customExtra, customLayout);

const Image = ({
  style,
  alt,
  fallbackSource,
  source,
  ignoreFallback,
  _alt,
  ...props
}, ref) => {
  let [renderedSource, setSource] = useState(source);
  let [alternate, setAlternate] = useState(false);
  React.useEffect(() => {
    setAlternate(false);
    setSource(source);
  }, [source]);

  let onImageLoadError = event => {
    console.warn(event.nativeEvent.error);

    if (!ignoreFallback && fallbackSource && fallbackSource !== renderedSource) {
      setSource(fallbackSource);
    } else {
      setAlternate(true);
    }
  };

  const newProps = useThemeProps('Image', props);

  if (!alt) {
    console.warn('Please pass alt prop to Image component');
  }

  if (alternate) {
    return /*#__PURE__*/React.createElement(Text, _alt, alt);
  }

  return /*#__PURE__*/React.createElement(StyledImage, _extends({
    style: style,
    source: renderedSource,
    maxWidth: "100%" // height='100%'
    // width="auto"
    ,
    size: '100%',
    accessibilityLabel: alt,
    accessibilityRole: "image",
    accessible: true,
    alt: alt
  }, newProps, {
    onError: props.onError ? props.onError : onImageLoadError,
    ref: ref
  }));
};

export default /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(Image));
//# sourceMappingURL=index.js.map