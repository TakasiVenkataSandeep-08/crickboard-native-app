{"version":3,"sources":["index.tsx"],"names":["React","useState","Image","RNImage","styled","border","color","flexbox","layout","space","position","customBorder","customBackground","customOutline","customLayout","customExtra","customShadow","customPosition","Text","useThemeProps","StyledImage","style","alt","fallbackSource","source","ignoreFallback","_alt","props","ref","renderedSource","setSource","alternate","setAlternate","useEffect","onImageLoadError","event","console","warn","nativeEvent","error","newProps","onError","memo","forwardRef"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,KAAK,IAAIC,OAAlB,QAAiC,cAAjC;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,OAAxB,EAAiCC,MAAjC,EAAyCC,KAAzC,EAAgDC,QAAhD,QAAgE,eAAhE;AACA,SACEC,YADF,EAEEC,gBAFF,EAGEC,aAHF,EAIEC,YAJF,EAKEC,WALF,EAMEC,YANF,EAOEC,cAPF,QAQO,4BARP;AASA,OAAOC,IAAP,MAAiB,SAAjB;AACA,SAASC,aAAT,QAA8B,gBAA9B;AAGA,MAAMC,WAAW,GAAGhB,MAAM,CAACD,OAAD,CAAN,CAClBG,KADkB,EAElBG,KAFkB,EAGlBD,MAHkB,EAIlBD,OAJkB,EAKlBF,MALkB,EAMlBK,QANkB,EAOlBO,cAPkB,EAQlBN,YARkB,EASlBC,gBATkB,EAUlBC,aAVkB,EAWlBG,YAXkB,EAYlBD,WAZkB,EAalBD,YAbkB,CAApB;;AAgBA,MAAMZ,KAAK,GAAG,CACZ;AACEmB,EAAAA,KADF;AAEEC,EAAAA,GAFF;AAGEC,EAAAA,cAHF;AAIEC,EAAAA,MAJF;AAKEC,EAAAA,cALF;AAMEC,EAAAA,IANF;AAOE,KAAGC;AAPL,CADY,EAUZC,GAVY,KAWT;AACH,MAAI,CAACC,cAAD,EAAiBC,SAAjB,IAA8B7B,QAAQ,CAACuB,MAAD,CAA1C;AACA,MAAI,CAACO,SAAD,EAAYC,YAAZ,IAA4B/B,QAAQ,CAAC,KAAD,CAAxC;AAEAD,EAAAA,KAAK,CAACiC,SAAN,CAAgB,MAAM;AACpBD,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACAF,IAAAA,SAAS,CAACN,MAAD,CAAT;AACD,GAHD,EAGG,CAACA,MAAD,CAHH;;AAKA,MAAIU,gBAAgB,GAAIC,KAAD,IAAgB;AACrCC,IAAAA,OAAO,CAACC,IAAR,CAAaF,KAAK,CAACG,WAAN,CAAkBC,KAA/B;;AACA,QACE,CAACd,cAAD,IACAF,cADA,IAEAA,cAAc,KAAKM,cAHrB,EAIE;AACAC,MAAAA,SAAS,CAACP,cAAD,CAAT;AACD,KAND,MAMO;AACLS,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;AACF,GAXD;;AAYA,QAAMQ,QAAQ,GAAGrB,aAAa,CAAC,OAAD,EAAUQ,KAAV,CAA9B;;AAEA,MAAI,CAACL,GAAL,EAAU;AACRc,IAAAA,OAAO,CAACC,IAAR,CAAa,yCAAb;AACD;;AAED,MAAIN,SAAJ,EAAe;AACb,wBAAO,oBAAC,IAAD,EAAUL,IAAV,EAAiBJ,GAAjB,CAAP;AACD;;AACD,sBACE,oBAAC,WAAD;AACE,IAAA,KAAK,EAAED,KADT;AAEE,IAAA,MAAM,EAAEQ,cAFV;AAGE,IAAA,QAAQ,EAAC,MAHX,CAIE;AACA;AALF;AAME,IAAA,IAAI,EAAE,MANR;AAOE,IAAA,kBAAkB,EAAEP,GAPtB;AAQE,IAAA,iBAAiB,EAAC,OARpB;AASE,IAAA,UAAU,MATZ;AAUE,IAAA,GAAG,EAAEA;AAVP,KAWMkB,QAXN;AAYE,IAAA,OAAO,EAAEb,KAAK,CAACc,OAAN,GAAgBd,KAAK,CAACc,OAAtB,GAAgCP,gBAZ3C;AAaE,IAAA,GAAG,EAAEN;AAbP,KADF;AAiBD,CA1DD;;AA4DA,4BAAe5B,KAAK,CAAC0C,IAAN,eAAW1C,KAAK,CAAC2C,UAAN,CAAiBzC,KAAjB,CAAX,CAAf","sourcesContent":["import React, { useState } from 'react';\nimport { Image as RNImage } from 'react-native';\nimport styled from 'styled-components/native';\nimport { border, color, flexbox, layout, space, position } from 'styled-system';\nimport {\n  customBorder,\n  customBackground,\n  customOutline,\n  customLayout,\n  customExtra,\n  customShadow,\n  customPosition,\n} from '../../../utils/customProps';\nimport Text from '../Text';\nimport { useThemeProps } from '../../../hooks';\nimport type { IImageProps } from './types';\n\nconst StyledImage = styled(RNImage)<IImageProps>(\n  color,\n  space,\n  layout,\n  flexbox,\n  border,\n  position,\n  customPosition,\n  customBorder,\n  customBackground,\n  customOutline,\n  customShadow,\n  customExtra,\n  customLayout\n);\n\nconst Image = (\n  {\n    style,\n    alt,\n    fallbackSource,\n    source,\n    ignoreFallback,\n    _alt,\n    ...props\n  }: IImageProps,\n  ref: any\n) => {\n  let [renderedSource, setSource] = useState(source);\n  let [alternate, setAlternate] = useState(false);\n\n  React.useEffect(() => {\n    setAlternate(false);\n    setSource(source);\n  }, [source]);\n\n  let onImageLoadError = (event: any) => {\n    console.warn(event.nativeEvent.error);\n    if (\n      !ignoreFallback &&\n      fallbackSource &&\n      fallbackSource !== renderedSource\n    ) {\n      setSource(fallbackSource);\n    } else {\n      setAlternate(true);\n    }\n  };\n  const newProps = useThemeProps('Image', props);\n\n  if (!alt) {\n    console.warn('Please pass alt prop to Image component');\n  }\n\n  if (alternate) {\n    return <Text {..._alt}>{alt}</Text>;\n  }\n  return (\n    <StyledImage\n      style={style}\n      source={renderedSource}\n      maxWidth=\"100%\"\n      // height='100%'\n      // width=\"auto\"\n      size={'100%'}\n      accessibilityLabel={alt}\n      accessibilityRole=\"image\"\n      accessible\n      alt={alt}\n      {...newProps}\n      onError={props.onError ? props.onError : onImageLoadError}\n      ref={ref}\n    />\n  );\n};\n\nexport default React.memo(React.forwardRef(Image));\nexport type { IImageProps };\n"]}