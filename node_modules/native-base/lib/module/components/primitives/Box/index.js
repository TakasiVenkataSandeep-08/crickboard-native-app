function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import { View } from 'react-native';
import styled from 'styled-components/native';
import { border, color, flexbox, layout, position, space, typography } from 'styled-system';
import { useThemeProps } from '../../../hooks/useThemeProps';
import Text from './../Text';
import { customBackground, customBorder, customExtra, customLayout, customOutline, customPosition, customShadow, customTypography } from '../../../utils/customProps';
const StyledBox = styled(View)(color, space, layout, flexbox, border, position, typography, customPosition, customBorder, customBackground, customOutline, customShadow, customExtra, customTypography, customLayout);

const Box = ({
  children,
  _text,
  ...props
}, ref) => {
  const boxProps = useThemeProps('Box', props);
  return /*#__PURE__*/React.createElement(StyledBox, _extends({
    ref: ref
  }, boxProps), React.Children.map(children, child => typeof child === 'string' ? /*#__PURE__*/React.createElement(Text, _text, child) : child));
};

export default /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(Box));
//# sourceMappingURL=index.js.map