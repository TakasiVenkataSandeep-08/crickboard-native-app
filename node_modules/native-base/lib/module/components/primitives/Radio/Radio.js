function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import { TouchableOpacity, Platform } from 'react-native';
import Icon from '../Icon';
import Box from '../Box';
import { useThemeProps } from '../../../hooks';
import { mergeRefs } from './../../../utils';
import { useHover } from '@react-native-aria/interactions';
import { useRadio } from '@react-native-aria/radio';
import { VisuallyHidden } from '@react-aria/visually-hidden';
import { RadioContext } from './RadioGroup';
import { useFocusRing } from '@react-native-aria/focus';

const Radio = ({
  icon,
  children,
  ...props
}, ref) => {
  let contextState = React.useContext(RadioContext);
  const {
    activeColor,
    borderColor,
    size,
    // isInvalid,
    ...newProps
  } = useThemeProps('Radio', { ...contextState,
    ...props
  });
  const inputRef = React.useRef(null);
  let {
    inputProps
  } = useRadio(props, contextState.state, inputRef); // only calling below function when icon exist.

  const sizedIcon = () => {
    var _icon$props$color;

    return (
      /*#__PURE__*/
      //@ts-ignore
      React.cloneElement(icon, {
        size,
        color: //@ts-ignore
        ((_icon$props$color = icon.props.color) !== null && _icon$props$color !== void 0 ? _icon$props$color : isSelected) ? inputProps.disabled ? borderColor : activeColor : borderColor
      })
    );
  };

  let isSelected = contextState.state.selectedValue === props.value;

  const _ref = React.useRef(null);

  const {
    isHovered
  } = useHover({}, _ref);
  const mergedRefs = mergeRefs([_ref, ref]);
  const outlineColor = isHovered && !inputProps.disabled ? activeColor : isSelected ? inputProps.disabled ? borderColor : activeColor : borderColor;
  let component = /*#__PURE__*/React.createElement(Box, _extends({
    flexDirection: "row",
    justifyContent: "center",
    alignItems: "center"
  }, newProps, {
    opacity: inputProps.disabled ? 0.4 : 1
  }, Platform.OS === 'web' ? {
    disabled: inputProps.disabled,
    cursor: inputProps.disabled ? 'not-allowed' : 'auto'
  } : {}), /*#__PURE__*/React.createElement(Box, {
    borderColor: outlineColor,
    backgroundColor: inputProps.disabled ? 'muted.200' : 'transparent',
    borderWidth: 1,
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    borderRadius: 999,
    p: '2px'
  }, icon && isSelected ? sizedIcon() : /*#__PURE__*/React.createElement(Icon, {
    name: "circle",
    type: "MaterialCommunityIcons",
    size: size,
    color: isSelected ? inputProps.disabled ? borderColor : activeColor : 'transparent',
    opacity: isSelected ? 1 : 0
  })), children);
  const {
    focusProps,
    isFocusVisible
  } = useFocusRing();
  return /*#__PURE__*/React.createElement(React.Fragment, null, Platform.OS === 'web' ? /*#__PURE__*/React.createElement(Box // @ts-ignore - RN web supports accessibilityRole="label"
  , {
    accessibilityRole: "label",
    ref: _ref,
    outlineWidth: isFocusVisible ? 1 : 0,
    outlineColor: activeColor,
    outlineStyle: 'solid'
  }, /*#__PURE__*/React.createElement(VisuallyHidden, null, /*#__PURE__*/React.createElement("input", _extends({}, inputProps, {
    ref: ref
  }, focusProps))), component) : /*#__PURE__*/React.createElement(TouchableOpacity, _extends({
    activeOpacity: 1,
    ref: mergedRefs
  }, inputProps), component));
};

export default /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(Radio));
//# sourceMappingURL=Radio.js.map