{"version":3,"sources":["Radio.tsx"],"names":["React","TouchableOpacity","Platform","Icon","Box","useThemeProps","mergeRefs","useHover","useRadio","VisuallyHidden","RadioContext","useFocusRing","Radio","icon","children","props","ref","contextState","useContext","activeColor","borderColor","size","newProps","inputRef","useRef","inputProps","state","sizedIcon","cloneElement","color","isSelected","disabled","selectedValue","value","_ref","isHovered","mergedRefs","outlineColor","component","OS","cursor","focusProps","isFocusVisible","memo","forwardRef"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  TouchableOpacity,\n  Platform,\n  TouchableOpacityProps,\n} from 'react-native';\nimport Icon from '../Icon';\nimport Box from '../Box';\nimport { useThemeProps } from '../../../hooks';\nimport type { IRadioProps } from './types';\nimport { mergeRefs } from './../../../utils';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useRadio } from '@react-native-aria/radio';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { RadioContext } from './RadioGroup';\nimport { useFocusRing } from '@react-native-aria/focus';\n\nconst Radio = ({ icon, children, ...props }: IRadioProps, ref: any) => {\n  let contextState = React.useContext(RadioContext);\n  const {\n    activeColor,\n    borderColor,\n    size,\n    // isInvalid,\n    ...newProps\n  } = useThemeProps('Radio', {\n    ...contextState,\n    ...props,\n  });\n\n  const inputRef = React.useRef(null);\n  let { inputProps } = useRadio(props, contextState.state, inputRef);\n\n  // only calling below function when icon exist.\n  const sizedIcon = () =>\n    //@ts-ignore\n    React.cloneElement(icon, {\n      size,\n      color:\n        //@ts-ignore\n        icon.props.color ?? isSelected\n          ? inputProps.disabled\n            ? borderColor\n            : activeColor\n          : borderColor,\n    });\n\n  let isSelected = contextState.state.selectedValue === props.value;\n\n  const _ref = React.useRef(null);\n  const { isHovered } = useHover({}, _ref);\n  const mergedRefs = mergeRefs([_ref, ref]);\n\n  const outlineColor =\n    isHovered && !inputProps.disabled\n      ? activeColor\n      : isSelected\n      ? inputProps.disabled\n        ? borderColor\n        : activeColor\n      : borderColor;\n\n  let component = (\n    <Box\n      flexDirection=\"row\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      {...newProps}\n      opacity={inputProps.disabled ? 0.4 : 1}\n      {...(Platform.OS === 'web'\n        ? {\n            disabled: inputProps.disabled,\n            cursor: inputProps.disabled ? 'not-allowed' : 'auto',\n          }\n        : {})}\n    >\n      <Box\n        borderColor={outlineColor}\n        backgroundColor={inputProps.disabled ? 'muted.200' : 'transparent'}\n        borderWidth={1}\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        borderRadius={999}\n        p={'2px'}\n      >\n        {icon && isSelected ? (\n          sizedIcon()\n        ) : (\n          <Icon\n            name=\"circle\"\n            type=\"MaterialCommunityIcons\"\n            size={size}\n            color={\n              isSelected\n                ? inputProps.disabled\n                  ? borderColor\n                  : activeColor\n                : 'transparent'\n            }\n            opacity={isSelected ? 1 : 0}\n          />\n        )}\n      </Box>\n      {children}\n    </Box>\n  );\n\n  const { focusProps, isFocusVisible } = useFocusRing();\n\n  return (\n    <>\n      {Platform.OS === 'web' ? (\n        <Box\n          // @ts-ignore - RN web supports accessibilityRole=\"label\"\n          accessibilityRole=\"label\"\n          ref={_ref}\n          outlineWidth={isFocusVisible ? 1 : 0}\n          outlineColor={activeColor}\n          outlineStyle={'solid'}\n        >\n          <VisuallyHidden>\n            <input {...inputProps} ref={ref} {...focusProps} />\n          </VisuallyHidden>\n\n          {component}\n        </Box>\n      ) : (\n        <TouchableOpacity\n          activeOpacity={1}\n          ref={mergedRefs}\n          {...(inputProps as TouchableOpacityProps)}\n        >\n          {component}\n        </TouchableOpacity>\n      )}\n    </>\n  );\n};\n\nexport default React.memo(React.forwardRef(Radio));\n"]}