function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import { TouchableOpacity, Platform } from 'react-native';
import styled from 'styled-components/native';
import { border, color, flexbox, layout, position, space } from 'styled-system';
import { useThemeProps } from '../../../hooks';
import { themeTools } from '../../../theme';
import { customBackground, customBorder, customExtra, customLayout, customOutline, customPosition, customShadow } from '../../../utils/customProps';
import Text from '../../primitives/Text';
import { default as Box } from '../Box';
import Flex from '../Flex';
import Spinner from '../Spinner';
import { useButton } from '@react-native-aria/button';
const StyledButton = styled(TouchableOpacity)(color, space, layout, flexbox, border, position, customPosition, customBorder, customBackground, customOutline, customShadow, customExtra, customLayout);

const Button = ({
  style,
  children,
  highlight,
  isLoading,
  isLoadingText,
  size,
  startIcon,
  endIcon,
  spinner,
  ...props
}, ref) => {
  const {
    _text,
    ...newProps
  } = useThemeProps('Button', { ...props,
    size
  });
  let [layoutProps, viewProps] = themeTools.extractInObject(newProps, ['m', 'margin', 'mt', 'marginTop', 'mr', 'marginRight', 'mb', 'marginBottom', 'ml', 'marginLeft', 'mx', 'marginX', 'my', 'marginY', 'left', 'top', 'bottom', 'right', 'position', 'minH', 'minHeight', 'minWidth', 'minW', 'height', 'width']);
  const [commonProps] = themeTools.extractInObject(layoutProps, ['minH', 'minHeight', 'minWidth', 'minW', 'height', 'width']);
  let [accessibilityProps, innerButtonProps] = themeTools.extractInObject(viewProps, ['accessible', 'accessibilityRole', 'accessibilityState', 'accessibilityLabel', 'accessibilityHint', 'isDisabled', 'onPress']);
  accessibilityProps.isDisabled = accessibilityProps.isDisabled || isLoading;
  const innerButton = /*#__PURE__*/React.createElement(Box, _extends({}, innerButtonProps, commonProps), startIcon ? /*#__PURE__*/React.createElement(Box, {
    mr: Math.floor(innerButtonProps.px / 2) || 2
  }, startIcon) : null, isLoading ? /*#__PURE__*/React.createElement(Flex, {
    direction: "row"
  }, spinner ? spinner : /*#__PURE__*/React.createElement(Spinner, {
    color: _text === null || _text === void 0 ? void 0 : _text.color,
    size: "sm"
  }), /*#__PURE__*/React.createElement(Text, _text, isLoadingText ? ' ' + isLoadingText : '')) : React.Children.count(children) > 1 || typeof children !== 'string' ? children : /*#__PURE__*/React.createElement(Text, _text, children), endIcon ? /*#__PURE__*/React.createElement(Box, {
    ml: Math.floor(innerButtonProps.px / 2) || 2
  }, endIcon) : null);
  const ariaProps = useButton({ ...accessibilityProps,
    children
  }, ref);
  return /*#__PURE__*/React.createElement(StyledButton, _extends({
    activeOpacity: highlight ? highlight : 0.8,
    ref: ref,
    style: style
  }, accessibilityProps, ariaProps, layoutProps, {
    opacity: isLoading ? 0.8 : accessibilityProps.isDisabled ? 0.5 : 1
  }, Platform.OS === 'web' ? {
    disabled: accessibilityProps.isDisabled,
    cursor: accessibilityProps.isDisabled ? 'not-allowed' : 'auto'
  } : {}), innerButton);
};

export { ButtonGroup } from './ButtonGroup';
export default /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(Button));
//# sourceMappingURL=index.js.map