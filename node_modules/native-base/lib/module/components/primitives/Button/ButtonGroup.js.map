{"version":3,"sources":["ButtonGroup.tsx"],"names":["React","styled","border","color","flexbox","layout","position","space","customBackground","customBorder","customExtra","customLayout","customOutline","customPosition","customShadow","StyledButtonGroup","View","flexDirection","flexWrap","ButtonGroup","memo","children","spacing","props","Children","map","child","index","cloneElement","ml","undefined"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,OAAxB,EAAiCC,MAAjC,EAAyCC,QAAzC,EAAmDC,KAAnD,QAAgE,eAAhE;AACA,SACEC,gBADF,EAEEC,YAFF,EAGEC,WAHF,EAIEC,YAJF,EAKEC,aALF,EAMEC,cANF,EAOEC,YAPF,QAQO,4BARP;AAWA,MAAMC,iBAAiB,GAAGd,MAAM,CAACe,IAAP,CACxBb,KADwB,EAExBI,KAFwB,EAGxBF,MAHwB,EAIxBD,OAJwB,EAKxBF,MALwB,EAMxBI,QANwB,EAOxBO,cAPwB,EAQxBJ,YARwB,EASxBD,gBATwB,EAUxBI,aAVwB,EAWxBE,YAXwB,EAYxBJ,WAZwB,EAaxBC,YAbwB,EAcxB;AAAEM,EAAAA,aAAa,EAAE,KAAjB;AAAwBC,EAAAA,QAAQ,EAAE;AAAlC,CAdwB,CAA1B;AAiBA,OAAO,MAAMC,WAAW,gBAAGnB,KAAK,CAACoB,IAAN,CACzB,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,OAAZ;AAAqB,KAAGC;AAAxB,CAAD,KAAwD;AACtD,sBACE,oBAAC,iBAAD,QACGvB,KAAK,CAACwB,QAAN,CAAeC,GAAf,CAAmBJ,QAAnB,EAA6B,CAACK,KAAD,EAAqBC,KAArB,KAAuC;AACnE,wBAAO3B,KAAK,CAAC4B,YAAN,CAAmBF,KAAnB,EAA0B;AAC/BG,MAAAA,EAAE,EAAEF,KAAK,KAAK,CAAV,GAAcL,OAAd,GAAwBQ,SADG;AAE/B,SAAGP;AAF4B,KAA1B,CAAP;AAID,GALA,CADH,CADF;AAUD,CAZwB,CAApB","sourcesContent":["import React from 'react';\nimport styled from 'styled-components/native';\nimport { border, color, flexbox, layout, position, space } from 'styled-system';\nimport {\n  customBackground,\n  customBorder,\n  customExtra,\n  customLayout,\n  customOutline,\n  customPosition,\n  customShadow,\n} from '../../../utils/customProps';\nimport type { IButtonGroupProps } from './types';\n\nconst StyledButtonGroup = styled.View<IButtonGroupProps>(\n  color,\n  space,\n  layout,\n  flexbox,\n  border,\n  position,\n  customPosition,\n  customBorder,\n  customBackground,\n  customOutline,\n  customShadow,\n  customExtra,\n  customLayout,\n  { flexDirection: 'row', flexWrap: 'wrap' }\n);\n\nexport const ButtonGroup = React.memo(\n  ({ children, spacing, ...props }: IButtonGroupProps) => {\n    return (\n      <StyledButtonGroup>\n        {React.Children.map(children, (child: JSX.Element, index: number) => {\n          return React.cloneElement(child, {\n            ml: index !== 0 ? spacing : undefined,\n            ...props,\n          });\n        })}\n      </StyledButtonGroup>\n    );\n  }\n);\n"]}