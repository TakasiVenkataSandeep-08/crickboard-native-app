{"version":3,"sources":["index.tsx"],"names":["React","useToggleState","StyleSheet","Switch","RNSwitch","styled","isNil","useToken","useThemeProps","border","color","flexbox","layout","space","position","customBorder","customBackground","customOutline","customLayout","customExtra","customShadow","customPosition","StyledNBSwitch","style","onToggle","isDisabled","isInvalid","isChecked","defaultIsChecked","accessibilityLabel","accessibilityHint","props","ref","state","defaultSelected","onTrackColor","_onTrackColor","offTrackColor","_offTrackColor","onThumbColor","_onThumbColor","offThumbColor","_offThumbColor","newProps","borderColorInvalid","checked","isSelected","inValidPropFactors","borderWidth","borderRadius","borderColor","computedStyle","flatten","transform","undefined","false","true","toggle","memo","forwardRef"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,UAAT,EAAgCC,MAAM,IAAIC,QAA1C,QAA0D,cAA1D;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,SAASC,QAAT,EAAmBC,aAAnB,QAAwC,gBAAxC;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,OAAxB,EAAiCC,MAAjC,EAAyCC,KAAzC,EAAgDC,QAAhD,QAAgE,eAAhE;AACA,SACEC,YADF,EAEEC,gBAFF,EAGEC,aAHF,EAIEC,YAJF,EAKEC,WALF,EAMEC,YANF,EAOEC,cAPF,QAQO,4BARP;AAWA,MAAMC,cAAc,GAAGjB,MAAM,CAACD,QAAD,CAAN,CACrBM,KADqB,EAErBG,KAFqB,EAGrBD,MAHqB,EAIrBD,OAJqB,EAKrBF,MALqB,EAMrBK,QANqB,EAOrBO,cAPqB,EAQrBN,YARqB,EASrBC,gBATqB,EAUrBC,aAVqB,EAWrBG,YAXqB,EAYrBD,WAZqB,EAarBD,YAbqB,CAAvB;;AAgBA,MAAMf,MAAM,GAAG,CACb;AACEoB,EAAAA,KADF;AAEEC,EAAAA,QAFF;AAGEC,EAAAA,UAHF;AAIEC,EAAAA,SAJF;AAKEC,EAAAA,SALF;AAMEC,EAAAA,gBANF;AAOEC,EAAAA,kBAPF;AAQEC,EAAAA,iBARF;AASE,KAAGC;AATL,CADa,EAYbC,GAZa,KAaV;AAAA;;AACH,QAAMC,KAAK,GAAGhC,cAAc,CAAC;AAC3BiC,IAAAA,eAAe,EAAE,CAAC5B,KAAK,CAACsB,gBAAD,CAAN,GAA2BA,gBAA3B,GAA8C;AADpC,GAAD,CAA5B;AAGA,QAAM;AACJO,IAAAA,YAAY,EAAEC,aADV;AAEJC,IAAAA,aAAa,EAAEC,cAFX;AAGJC,IAAAA,YAAY,EAAEC,aAHV;AAIJC,IAAAA,aAAa,EAAEC,cAJX;AAKJ,OAAGC;AALC,MAMFnC,aAAa,CAAC,QAAD,EAAWuB,KAAX,CANjB;AAOA,QAAMa,kBAAkB,GAAGrC,QAAQ,CAAC,QAAD,EAAW,YAAX,CAAnC;AACA,QAAMsC,OAAO,GAAG,CAACvC,KAAK,CAACqB,SAAD,CAAN,GAAoBA,SAApB,GAAgCM,KAAK,CAACa,UAAtD;AACA,QAAMX,YAAY,GAAG5B,QAAQ,CAAC,QAAD,EAAW6B,aAAX,CAA7B;AACA,QAAMC,aAAa,GAAG9B,QAAQ,CAAC,QAAD,EAAW+B,cAAX,CAA9B;AACA,QAAMC,YAAY,GAAGhC,QAAQ,CAAC,QAAD,EAAWiC,aAAX,CAA7B;AACA,QAAMC,aAAa,GAAGlC,QAAQ,CAAC,QAAD,EAAWmC,cAAX,CAA9B;AACA,QAAMK,kBAAkB,GAAG;AACzBC,IAAAA,WAAW,EAAE,CADY;AAEzBC,IAAAA,YAAY,EAAE,EAFW;AAGzBC,IAAAA,WAAW,EAAEN;AAHY,GAA3B;AAMA,MAAIO,aAAwB,GAAGjD,UAAU,CAACkD,OAAX,CAAmB,CAChD7B,KADgD,EAEhD;AAAE8B,IAAAA,SAAS,yBAAEV,QAAQ,CAACU,SAAX,qEAAwBC;AAAnC,GAFgD,EAGhD5B,SAAS,GAAGqB,kBAAH,GAAwB,EAHe,CAAnB,CAA/B;AAMA,sBACE,oBAAC,cAAD;AACE,IAAA,kBAAkB,EAAElB,kBADtB;AAEE,IAAA,iBAAiB,EAAEC,iBAFrB;AAGE,IAAA,UAAU,EAAE;AAAEyB,MAAAA,KAAK,EAAElB,aAAT;AAAwBmB,MAAAA,IAAI,EAAErB;AAA9B,KAHd;AAIE,IAAA,UAAU,EAAEU,OAAO,GAAGN,YAAH,GAAkBE,aAJvC;AAKE,IAAA,mBAAmB,EAAEJ;AALvB,KAMMM,QANN;AAOE,IAAA,QAAQ,EAAElB,UAPZ;AAQE,IAAA,aAAa,EAAED,QAAQ,GAAGA,QAAH,GAAcS,KAAK,CAACwB,MAR7C;AASE,IAAA,KAAK,EAAEZ,OATT;AAUE,IAAA,KAAK,EAAEM,aAVT;AAWE,IAAA,GAAG,EAAEnB,GAXP;AAYE,IAAA,OAAO,EAAEP,UAAU,GAAG,GAAH,GAAS;AAZ9B,KADF;AAgBD,CA1DD;;AA4DA,4BAAezB,KAAK,CAAC0D,IAAN,eAAW1D,KAAK,CAAC2D,UAAN,CAAiBxD,MAAjB,CAAX,CAAf","sourcesContent":["import React from 'react';\nimport { useToggleState } from '@react-stately/toggle';\nimport { StyleSheet, ViewStyle, Switch as RNSwitch } from 'react-native';\nimport styled from 'styled-components/native';\nimport isNil from 'lodash/isNil';\nimport { useToken, useThemeProps } from '../../../hooks';\nimport { border, color, flexbox, layout, space, position } from 'styled-system';\nimport {\n  customBorder,\n  customBackground,\n  customOutline,\n  customLayout,\n  customExtra,\n  customShadow,\n  customPosition,\n} from '../../../utils/customProps';\nimport type { ISwitchProps } from './types';\n\nconst StyledNBSwitch = styled(RNSwitch)<ISwitchProps>(\n  color,\n  space,\n  layout,\n  flexbox,\n  border,\n  position,\n  customPosition,\n  customBorder,\n  customBackground,\n  customOutline,\n  customShadow,\n  customExtra,\n  customLayout\n);\n\nconst Switch = (\n  {\n    style,\n    onToggle,\n    isDisabled,\n    isInvalid,\n    isChecked,\n    defaultIsChecked,\n    accessibilityLabel,\n    accessibilityHint,\n    ...props\n  }: ISwitchProps,\n  ref: any\n) => {\n  const state = useToggleState({\n    defaultSelected: !isNil(defaultIsChecked) ? defaultIsChecked : false,\n  });\n  const {\n    onTrackColor: _onTrackColor,\n    offTrackColor: _offTrackColor,\n    onThumbColor: _onThumbColor,\n    offThumbColor: _offThumbColor,\n    ...newProps\n  } = useThemeProps('Switch', props);\n  const borderColorInvalid = useToken('colors', 'danger.600');\n  const checked = !isNil(isChecked) ? isChecked : state.isSelected;\n  const onTrackColor = useToken('colors', _onTrackColor);\n  const offTrackColor = useToken('colors', _offTrackColor);\n  const onThumbColor = useToken('colors', _onThumbColor);\n  const offThumbColor = useToken('colors', _offThumbColor);\n  const inValidPropFactors = {\n    borderWidth: 1,\n    borderRadius: 16,\n    borderColor: borderColorInvalid,\n  };\n\n  let computedStyle: ViewStyle = StyleSheet.flatten([\n    style,\n    { transform: newProps.transform ?? undefined },\n    isInvalid ? inValidPropFactors : {},\n  ]);\n\n  return (\n    <StyledNBSwitch\n      accessibilityLabel={accessibilityLabel}\n      accessibilityHint={accessibilityHint}\n      trackColor={{ false: offTrackColor, true: onTrackColor }}\n      thumbColor={checked ? onThumbColor : offThumbColor}\n      ios_backgroundColor={offTrackColor}\n      {...newProps}\n      disabled={isDisabled}\n      onValueChange={onToggle ? onToggle : state.toggle}\n      value={checked}\n      style={computedStyle}\n      ref={ref}\n      opacity={isDisabled ? 0.4 : 1}\n    />\n  );\n};\n\nexport default React.memo(React.forwardRef(Switch));\nexport type { ISwitchProps };\n"]}