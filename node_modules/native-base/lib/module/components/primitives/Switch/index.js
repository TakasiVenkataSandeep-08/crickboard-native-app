function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import { useToggleState } from '@react-stately/toggle';
import { StyleSheet, Switch as RNSwitch } from 'react-native';
import styled from 'styled-components/native';
import isNil from 'lodash/isNil';
import { useToken, useThemeProps } from '../../../hooks';
import { border, color, flexbox, layout, space, position } from 'styled-system';
import { customBorder, customBackground, customOutline, customLayout, customExtra, customShadow, customPosition } from '../../../utils/customProps';
const StyledNBSwitch = styled(RNSwitch)(color, space, layout, flexbox, border, position, customPosition, customBorder, customBackground, customOutline, customShadow, customExtra, customLayout);

const Switch = ({
  style,
  onToggle,
  isDisabled,
  isInvalid,
  isChecked,
  defaultIsChecked,
  accessibilityLabel,
  accessibilityHint,
  ...props
}, ref) => {
  var _newProps$transform;

  const state = useToggleState({
    defaultSelected: !isNil(defaultIsChecked) ? defaultIsChecked : false
  });
  const {
    onTrackColor: _onTrackColor,
    offTrackColor: _offTrackColor,
    onThumbColor: _onThumbColor,
    offThumbColor: _offThumbColor,
    ...newProps
  } = useThemeProps('Switch', props);
  const borderColorInvalid = useToken('colors', 'danger.600');
  const checked = !isNil(isChecked) ? isChecked : state.isSelected;
  const onTrackColor = useToken('colors', _onTrackColor);
  const offTrackColor = useToken('colors', _offTrackColor);
  const onThumbColor = useToken('colors', _onThumbColor);
  const offThumbColor = useToken('colors', _offThumbColor);
  const inValidPropFactors = {
    borderWidth: 1,
    borderRadius: 16,
    borderColor: borderColorInvalid
  };
  let computedStyle = StyleSheet.flatten([style, {
    transform: (_newProps$transform = newProps.transform) !== null && _newProps$transform !== void 0 ? _newProps$transform : undefined
  }, isInvalid ? inValidPropFactors : {}]);
  return /*#__PURE__*/React.createElement(StyledNBSwitch, _extends({
    accessibilityLabel: accessibilityLabel,
    accessibilityHint: accessibilityHint,
    trackColor: {
      false: offTrackColor,
      true: onTrackColor
    },
    thumbColor: checked ? onThumbColor : offThumbColor,
    ios_backgroundColor: offTrackColor
  }, newProps, {
    disabled: isDisabled,
    onValueChange: onToggle ? onToggle : state.toggle,
    value: checked,
    style: computedStyle,
    ref: ref,
    opacity: isDisabled ? 0.4 : 1
  }));
};

export default /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(Switch));
//# sourceMappingURL=index.js.map