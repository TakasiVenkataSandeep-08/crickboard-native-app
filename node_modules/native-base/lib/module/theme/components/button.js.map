{"version":3,"sources":["button.ts"],"names":["mode","baseStyle","borderRadius","display","flexDirection","justifyContent","alignItems","variantGhost","props","colorScheme","c","_text","color","bg","variantOutline","borderColor","border","accessibleColorMap","yellow","cyan","variantSolid","variantLink","padding","height","textDecorationLine","variantUnstyled","m","p","variants","ghost","outline","solid","link","unstyled","sizes","lg","minH","minW","fontSize","px","py","md","sm","xs","defaultProps","variant","size","fontWeight"],"mappings":"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","sourcesContent":["import { Dict, mode } from './../tools';\n\nconst baseStyle = {\n  borderRadius: 'lg',\n  display: 'flex',\n  flexDirection: 'row',\n  justifyContent: 'center',\n  alignItems: 'center',\n};\nfunction variantGhost(props: Dict) {\n  const { colorScheme: c } = props;\n  if (c === 'gray') {\n    return {\n      _text: {\n        color: mode(`gray.500`, `white`)(props),\n      },\n    };\n  }\n\n  return {\n    _text: {\n      color: mode(`${c}.500`, `${c}.200`)(props),\n    },\n    bg: 'transparent',\n  };\n}\n\nfunction variantOutline(props: Dict) {\n  const { colorScheme: c } = props;\n  const borderColor = mode(`gray.200`, `gray.500`)(props);\n  return {\n    border: '1px solid',\n    borderColor:\n      c === 'gray' ? borderColor : mode(`${c}.500`, `${c}.200`)(props),\n    ...variantGhost(props),\n  };\n}\n\ntype AccessibleColor = {\n  bg?: string;\n  color?: string;\n};\n\n/** Accessible color overrides for less accessible colors. */\nconst accessibleColorMap: { [key: string]: AccessibleColor } = {\n  yellow: {\n    bg: 'yellow.400',\n  },\n  cyan: {\n    bg: 'cyan.400',\n  },\n};\n\nfunction variantSolid(props: Dict) {\n  const { colorScheme: c } = props;\n  if (c === 'gray')\n    return {\n      bg: mode(`gray.100`, `gray.800`)(props),\n    };\n  const { bg = `${c}.500` } = accessibleColorMap[c] || {};\n  return {\n    bg: mode(bg, `${c}.400`)(props),\n  };\n}\n\nfunction variantLink() {\n  return {\n    padding: 0,\n    height: 'auto',\n    _text: {\n      textDecorationLine: 'underline',\n    },\n  };\n}\n\nfunction variantUnstyled() {\n  return {\n    m: 0,\n    p: 0,\n  };\n}\n\nconst variants = {\n  ghost: variantGhost,\n  outline: variantOutline,\n  solid: variantSolid,\n  link: variantLink,\n  unstyled: variantUnstyled,\n};\n\nconst sizes = {\n  lg: {\n    minH: 12,\n    minW: 12,\n    _text: {\n      fontSize: 'lg',\n    },\n    px: 6,\n    py: 4,\n  },\n  md: {\n    minH: 10,\n    minW: 10,\n    _text: {\n      fontSize: 'md',\n    },\n    px: 5,\n    py: 3,\n  },\n  sm: {\n    minH: 8,\n    minW: 8,\n    _text: {\n      fontSize: 'sm',\n    },\n    px: 4,\n    py: 2,\n  },\n  xs: {\n    minH: 6,\n    minW: 6,\n    _text: {\n      fontSize: 'xs',\n    },\n    px: 2,\n  },\n};\n\nconst defaultProps = {\n  variant: 'solid',\n  size: 'md',\n  colorScheme: 'gray',\n  _text: {\n    fontWeight: 'semibold',\n  },\n};\n\nexport default {\n  baseStyle,\n  variants,\n  sizes,\n  defaultProps,\n};\n"]}