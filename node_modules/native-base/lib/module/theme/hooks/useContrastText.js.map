{"version":3,"sources":["useContrastText.ts"],"names":["Color","useToken","useContrastText","bg","color","contrastThreshold","trueDarkText","trueLightText","trueBg","trueColor","trueContrastColor","contrastColorToken","darkTextConstrast","getContrastRatio","lightTextConstrast","process","env","NODE_ENV","contrast","console","warn","join","foreground","background","lumA","getLuminance","lumB","Math","max","min"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,YAAlB;AACA,SAASC,QAAT,QAAyB,wBAAzB;AAEA,OAAO,SAASC,eAAT,CAAyBC,EAAzB,EAAqCC,KAArC,EAAqD;AAC1D,MAAI,CACFC,iBADE,EAEFC,YAFE,EAGFC,aAHE,EAIFC,MAJE,EAKFC,SALE,IAMAR,QAAQ,CAAC,QAAD,EAAW,CACrB,mBADqB,EAErB,UAFqB,EAGrB,WAHqB,EAIrBE,EAJqB,EAKrBC,KALqB,aAKrBA,KALqB,cAKrBA,KALqB,GAKZ,EALY,CAAX,CANZ;;AAcA,MAAI,OAAOI,MAAP,KAAkB,QAAtB,EAAgC;AAC9BA,IAAAA,MAAM,GAAGL,EAAT;AACD;;AACD,MAAIO,iBAAJ;AACA,MAAIC,kBAAJ;AACA,MAAIC,iBAAiB,GAAGC,gBAAgB,CAACL,MAAD,EAASF,YAAT,CAAxC;AACA,MAAIQ,kBAAkB,GAAGD,gBAAgB,CAACL,MAAD,EAASD,aAAT,CAAzC;;AAEA,MACEK,iBAAiB,IAAIP,iBAArB,IACAO,iBAAiB,GAAGE,kBAFtB,EAGE;AACAJ,IAAAA,iBAAiB,GAAGJ,YAApB;AACAK,IAAAA,kBAAkB,GAAG,UAArB;AACD,GAND,MAMO;AACLD,IAAAA,iBAAiB,GAAGH,aAApB;AACAI,IAAAA,kBAAkB,GAAG,WAArB;AACD;;AAED,MAAII,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,UAAMC,QAAQ,GAAGL,gBAAgB,CAC/BL,MAD+B,EAE/BC,SAAS,GAAGA,SAAH,GAAeC,iBAFO,CAAjC;;AAIA,QAAIQ,QAAQ,GAAG,CAAf,EAAkB;AAChBC,MAAAA,OAAO,CAACC,IAAR,CACE,6CACuCF,QADvC,oBAEId,KAAK,GAAGA,KAAH,GAAWO,kBAFpB,iBAGSR,EAHT,GAIE,0EAJF,EAKE,gFALF,EAMEkB,IANF,CAMO,IANP,CADF;AASD;AACF;;AACD,SAAOV,kBAAP;AACD;;AAED,SAASE,gBAAT,CAA0BS,UAA1B,EAA8CC,UAA9C,EAAkE;AAChE,QAAMC,IAAI,GAAGxB,KAAK,CAACsB,UAAD,CAAL,CAAkBG,YAAlB,EAAb;AACA,QAAMC,IAAI,GAAG1B,KAAK,CAACuB,UAAD,CAAL,CAAkBE,YAAlB,EAAb;AACA,SAAO,CAACE,IAAI,CAACC,GAAL,CAASJ,IAAT,EAAeE,IAAf,IAAuB,IAAxB,KAAiCC,IAAI,CAACE,GAAL,CAASL,IAAT,EAAeE,IAAf,IAAuB,IAAxD,CAAP;AACD","sourcesContent":["import Color from 'tinycolor2';\nimport { useToken } from './../../hooks/useToken';\n\nexport function useContrastText(bg: string, color?: string) {\n  let [\n    contrastThreshold,\n    trueDarkText,\n    trueLightText,\n    trueBg,\n    trueColor,\n  ] = useToken('colors', [\n    'contrastThreshold',\n    'darkText',\n    'lightText',\n    bg,\n    color ?? '',\n  ]);\n\n  if (typeof trueBg !== 'string') {\n    trueBg = bg;\n  }\n  let trueContrastColor;\n  let contrastColorToken;\n  let darkTextConstrast = getContrastRatio(trueBg, trueDarkText);\n  let lightTextConstrast = getContrastRatio(trueBg, trueLightText);\n\n  if (\n    darkTextConstrast >= contrastThreshold ||\n    darkTextConstrast > lightTextConstrast\n  ) {\n    trueContrastColor = trueDarkText;\n    contrastColorToken = 'darkText';\n  } else {\n    trueContrastColor = trueLightText;\n    contrastColorToken = 'lightText';\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    const contrast = getContrastRatio(\n      trueBg,\n      trueColor ? trueColor : trueContrastColor\n    );\n    if (contrast < 3) {\n      console.warn(\n        [\n          `NativeBase: The contrast ratio of ${contrast}:1 for ${\n            color ? color : contrastColorToken\n          } on ${bg}`,\n          'falls below the WCAG recommended absolute minimum contrast ratio of 3:1.',\n          'https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast',\n        ].join('\\n')\n      );\n    }\n  }\n  return contrastColorToken;\n}\n\nfunction getContrastRatio(foreground: string, background: string) {\n  const lumA = Color(foreground).getLuminance();\n  const lumB = Color(background).getLuminance();\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n"]}