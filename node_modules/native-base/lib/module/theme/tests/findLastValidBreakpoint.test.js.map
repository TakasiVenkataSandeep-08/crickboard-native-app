{"version":3,"sources":["findLastValidBreakpoint.test.tsx"],"names":["findLastValidBreakpoint","describe","test","expect","toBe","base","sm","lg"],"mappings":"AAAA,SAASA,uBAAT,QAAwC,2BAAxC;AACAC,QAAQ,CAAC,MAAD,EAAS,MAAM;AACrBC,EAAAA,IAAI,CAAC,mBAAD,EAAsB,MAAM;AAC9BC,IAAAA,MAAM,CAACH,uBAAuB,CAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,EAAS,CAAT,CAAxB,CAAN,CAA2CI,IAA3C,CAAgD,CAAhD;AACD,GAFG,CAAJ;AAGAF,EAAAA,IAAI,CAAC,oBAAD,EAAuB,MAAM;AAC/BC,IAAAA,MAAM,CAACH,uBAAuB,CAAC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAD,EAAY,CAAZ,CAAxB,CAAN,CAA8CI,IAA9C,CAAmD,CAAnD;AACD,GAFG,CAAJ;AAGAF,EAAAA,IAAI,CAAC,kBAAD,EAAqB,MAAM;AAC7BC,IAAAA,MAAM,CAACH,uBAAuB,CAAC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAD,EAAY,CAAZ,CAAxB,CAAN,CAA8CI,IAA9C,CAAmD,CAAnD;AACD,GAFG,CAAJ;AAGAF,EAAAA,IAAI,CAAC,oBAAD,EAAuB,MAAM;AAC/BC,IAAAA,MAAM,CAACH,uBAAuB,CAAC;AAAEK,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,EAAE,EAAE,CAAf;AAAkBC,MAAAA,EAAE,EAAE;AAAtB,KAAD,EAA4B,CAA5B,CAAxB,CAAN,CAA8DH,IAA9D,CAAmE,CAAnE;AACD,GAFG,CAAJ;AAGAF,EAAAA,IAAI,CAAC,uBAAD,EAA0B,MAAM;AAClCC,IAAAA,MAAM,CAACH,uBAAuB,CAAC;AAAEK,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,EAAE,EAAE,CAAf;AAAkBC,MAAAA,EAAE,EAAE;AAAtB,KAAD,EAA4B,CAA5B,CAAxB,CAAN,CAA8DH,IAA9D,CAAmE,CAAnE;AACD,GAFG,CAAJ;AAGAF,EAAAA,IAAI,CAAC,uBAAD,EAA0B,MAAM;AAClCC,IAAAA,MAAM,CAACH,uBAAuB,CAAC;AAAEK,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,EAAE,EAAE,CAAf;AAAkBC,MAAAA,EAAE,EAAE;AAAtB,KAAD,EAA4B,CAA5B,CAAxB,CAAN,CAA8DH,IAA9D,CAAmE,CAAnE;AACD,GAFG,CAAJ;AAGAF,EAAAA,IAAI,CAAC,mBAAD,EAAsB,MAAM;AAC9BC,IAAAA,MAAM,CAACH,uBAAuB,CAAC;AAAEK,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,EAAE,EAAE,CAAf;AAAkBC,MAAAA,EAAE,EAAE;AAAtB,KAAD,EAA4B,CAA5B,CAAxB,CAAN,CAA8DH,IAA9D,CAAmE,CAAnE;AACD,GAFG,CAAJ;AAGD,CAtBO,CAAR","sourcesContent":["import { findLastValidBreakpoint } from './../../theme/tools/utils';\ndescribe('mode', () => {\n  test('First array value', () => {\n    expect(findLastValidBreakpoint([1, 2], 0)).toBe(1);\n  });\n  test('Middle array value', () => {\n    expect(findLastValidBreakpoint([1, 2, 3], 1)).toBe(2);\n  });\n  test('Last array value', () => {\n    expect(findLastValidBreakpoint([1, 2, 3], 2)).toBe(3);\n  });\n  test('First Object value', () => {\n    expect(findLastValidBreakpoint({ base: 1, sm: 2, lg: 3 }, 0)).toBe(1);\n  });\n  test('Middle object value 1', () => {\n    expect(findLastValidBreakpoint({ base: 1, sm: 2, lg: 3 }, 1)).toBe(2);\n  });\n  test('Middle object value 2', () => {\n    expect(findLastValidBreakpoint({ base: 1, sm: 2, lg: 3 }, 2)).toBe(2);\n  });\n  test('Last object value', () => {\n    expect(findLastValidBreakpoint({ base: 1, sm: 2, lg: 3 }, 3)).toBe(3);\n  });\n});\n"]}