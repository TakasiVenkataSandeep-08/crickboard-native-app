{"version":3,"sources":["utils.ts"],"names":["get","isNil","mergeWith","cloneDeep","themePropertyMap","getClosestBreakpoint","findLastValidBreakpoint","hasValidBreakpointFormat","extractInObject","useContrastText","extractProps","props","theme","colorModeProps","componentTheme","currentBreakpoint","newProps","property","propValues","extractPropertyFromFunction","nestedProp","shadowProps","resolveValueWithBreakpoint","filterDefaultProps","defaultProps","resultProps","Object","keys","funcProps","isNested","some","key","mergeUnderscoreProps","_props","filter","propName","startsWith","forEach","bg","backgroundColor","textColor","color","values","calculateProps","windowWidth","breakpoints","componentBaseStyle","baseStyle","objValue","srcValue","variant","variants","colorScheme","variantProps","extractedProps"],"mappings":"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","sourcesContent":["import get from 'lodash/get';\nimport isNil from 'lodash/isNil';\nimport mergeWith from 'lodash/mergeWith';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { themePropertyMap } from './../../theme/base';\nimport {\n  getClosestBreakpoint,\n  findLastValidBreakpoint,\n  hasValidBreakpointFormat,\n  extractInObject,\n} from './../../theme/tools';\nimport { useContrastText } from './../../theme/hooks';\n\n/*\n Extract props from theme props and omit those from props\n*/\nfunction extractProps(\n  props: any,\n  theme: any,\n  colorModeProps: any,\n  componentTheme: any,\n  currentBreakpoint: number\n) {\n  let newProps: any = {};\n  for (let property in props) {\n    // If the property exists in theme map then get its value\n    if (themePropertyMap[property]) {\n      let propValues = extractPropertyFromFunction(\n        property,\n        props,\n        theme,\n        componentTheme\n      );\n      if (typeof propValues === 'string' || typeof propValues === 'number') {\n        newProps[property] = propValues;\n      } else if (!isNil(propValues)) {\n        for (let nestedProp in propValues) {\n          newProps[nestedProp] = get(\n            theme,\n            `${themePropertyMap[nestedProp]}.${propValues[nestedProp]}`,\n            propValues[nestedProp]\n          );\n        }\n      } else if (property === 'shadow') {\n        let shadowProps = theme[themePropertyMap[property]](colorModeProps)[\n          props[property]\n        ];\n        if (!isNil(shadowProps)) {\n          newProps = { ...newProps, ...shadowProps };\n        }\n      } else {\n        newProps[property] = resolveValueWithBreakpoint(\n          props[property],\n          currentBreakpoint,\n          property\n        );\n      }\n    } else {\n      newProps[property] = resolveValueWithBreakpoint(\n        props[property],\n        currentBreakpoint,\n        property\n      );\n    }\n  }\n  return cloneDeep(newProps);\n}\n\n/*\nRemove props from defaultProps that are already present in props\n*/\nfunction filterDefaultProps(props: any, defaultProps: any) {\n  let [, resultProps] = extractInObject(defaultProps, Object.keys(props));\n  return resultProps;\n}\n\n/*\nIf property is functional in componentTheme, get its returned object\n*/\nconst extractPropertyFromFunction = (\n  property: string,\n  props: any,\n  theme: any,\n  componentTheme: any\n) => {\n  let propValues;\n  if (\n    componentTheme &&\n    typeof componentTheme[themePropertyMap[property]] === 'function'\n  ) {\n    let funcProps = componentTheme[themePropertyMap[property]]({\n      theme,\n      ...props,\n    });\n    // Check if returned object from componentTheme is a nested object\n    let isNested = Object.keys(funcProps).some(function (key) {\n      return funcProps[key] && typeof funcProps[key] === 'object';\n    });\n    propValues = isNested\n      ? { ...get(funcProps, `${props[property]}`) }\n      : { ...funcProps };\n  } else {\n    propValues = get(\n      componentTheme,\n      `${themePropertyMap[property]}.${props[property]}`\n    );\n  }\n  return propValues;\n};\n\n/*\nMerge _props and apply contrastText color if not passed by theme or user\n*/\nfunction mergeUnderscoreProps(newProps: any, props: any) {\n  const _props = Object.keys(newProps).filter((propName) =>\n    propName.startsWith('_')\n  );\n  _props.forEach((propName: string) => {\n    // Adding color based on bg contrast if no color is given\n    const bg = newProps.bg ?? newProps.backgroundColor;\n    const textColor = bg\n      ? {\n          color: useContrastText(\n            bg,\n            newProps[propName]?.color ?? props[propName]?.color\n          ),\n        }\n      : {};\n    // Overriding calculated props with user added props\n    newProps[propName] = {\n      ...textColor,\n      ...newProps[propName],\n      ...props[propName],\n    };\n  });\n  return newProps;\n}\n\n/*\nChecks the property and resolves it if it has breakpoints\n*/\nconst resolveValueWithBreakpoint = (\n  values: any,\n  currentBreakpoint: number,\n  property: any\n) => {\n  if (hasValidBreakpointFormat(values, property)) {\n    return findLastValidBreakpoint(values, currentBreakpoint);\n  } else {\n    return values;\n  }\n};\n\nexport function calculateProps(\n  theme: any,\n  colorModeProps: any,\n  componentTheme: any,\n  props: any,\n  windowWidth: any\n) {\n  let currentBreakpoint = getClosestBreakpoint(theme.breakpoints, windowWidth);\n  if (!props) {\n    props = {};\n  }\n\n  let newProps: any;\n  if (componentTheme) {\n    // Extracting props from defaultProps\n    newProps = extractProps(\n      filterDefaultProps(props, componentTheme.defaultProps),\n      theme,\n      colorModeProps,\n      componentTheme,\n      currentBreakpoint\n    );\n    // Extracting props from base style\n    let componentBaseStyle =\n      typeof componentTheme.baseStyle !== 'function'\n        ? componentTheme.baseStyle\n        : componentTheme.baseStyle({\n            theme,\n            ...newProps,\n            ...props,\n            ...colorModeProps,\n          });\n    newProps = mergeWith(\n      newProps,\n      componentBaseStyle,\n      // @ts-ignore\n      (objValue, srcValue, key) => {\n        if (!isNil(objValue)) {\n          delete newProps[key];\n        }\n      }\n    );\n    const variant =\n      props.variant || get(componentTheme, 'defaultProps.variant');\n    // Extracting props from variant\n    if (\n      variant &&\n      componentTheme.variants &&\n      componentTheme.variants[variant]\n    ) {\n      const colorScheme =\n        props.colorScheme || get(componentTheme, 'defaultProps.colorScheme');\n      let variantProps = componentTheme.variants[variant]({\n        ...props,\n        ...newProps,\n        colorScheme,\n        theme,\n        ...colorModeProps,\n      });\n      // added this to handle order of props\n      newProps = mergeWith(\n        newProps,\n        variantProps,\n        // @ts-ignore\n        (objValue, srcValue, key) => {\n          if (!isNil(objValue)) {\n            delete newProps[key];\n          }\n        }\n      );\n      delete newProps.variant;\n      delete newProps.colorScheme;\n    }\n  }\n  // Extracting props from normal props\n  let extractedProps = extractProps(\n    props,\n    theme,\n    colorModeProps,\n    componentTheme,\n    currentBreakpoint\n  );\n  // added this to handle order of props\n  // @ts-ignore\n  newProps = mergeWith(newProps, extractedProps, (objValue, srcValue, key) => {\n    if (!isNil(objValue)) {\n      delete newProps[key];\n    }\n  });\n  newProps = mergeUnderscoreProps(newProps, props);\n  return newProps;\n}\n"]}