{"version":3,"sources":["calculatePaddingProps.test.tsx"],"names":["calculatePaddingProps","describe","test","expect","safeArea","top","left","right","bottom","toEqual","pt","pb","pl","pr","safeAreaTop","safeAreaBottom","py","safeAreaLeft","safeAreaRight","safeAreaX","px","safeAreaY","p"],"mappings":"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","sourcesContent":["import { calculatePaddingProps } from './../useSafeArea/utils';\n\ndescribe('calculatePaddingProps(useSafeArea)', () => {\n  test('Generic inset(boolean)', () => {\n    expect(\n      calculatePaddingProps(\n        { safeArea: true },\n        {},\n        { top: 0, left: 0, right: 0, bottom: 0 },\n        {}\n      )\n    ).toEqual({});\n  });\n  test('Generic inset(number)', () => {\n    expect(\n      calculatePaddingProps(\n        { safeArea: 2 },\n        {},\n        { top: 0, left: 0, right: 0, bottom: 0 },\n        { 2: '2' }\n      )\n    ).toEqual({ pt: '2px', pb: '2px', pl: '2px', pr: '2px' });\n  });\n  test('Top inset(boolean)', () => {\n    expect(\n      calculatePaddingProps(\n        { safeAreaTop: true },\n        {},\n        { top: 10, left: 0, right: 0, bottom: 0 },\n        {}\n      )\n    ).toEqual({ pt: '10px' });\n  });\n  test('Top inset(number)', () => {\n    expect(\n      calculatePaddingProps(\n        { safeAreaTop: 2 },\n        {},\n        { top: 0, left: 0, right: 0, bottom: 0 },\n        { 2: '2' }\n      )\n    ).toEqual({ pt: '2px' });\n  });\n  test('Top inset(boolean) with padding', () => {\n    expect(\n      calculatePaddingProps(\n        { safeAreaTop: true },\n        { pt: 10 },\n        { top: 10, left: 0, right: 0, bottom: 0 },\n        { 10: '10' }\n      )\n    ).toEqual({ pt: '20px' });\n  });\n  test('Top inset(number) with padding', () => {\n    expect(\n      calculatePaddingProps(\n        { safeAreaTop: 2 },\n        { pt: 10 },\n        { top: 10, left: 0, right: 0, bottom: 0 },\n        { 2: '2', 10: '10' }\n      )\n    ).toEqual({ pt: '12px' });\n  });\n  test('Bottom inset(boolean)', () => {\n    expect(\n      calculatePaddingProps(\n        { safeAreaBottom: true },\n        {},\n        { top: 10, left: 0, right: 0, bottom: 20 },\n        {}\n      )\n    ).toEqual({ pb: '20px' });\n  });\n  test('Bottom inset(number)', () => {\n    expect(\n      calculatePaddingProps(\n        { safeAreaBottom: 2 },\n        {},\n        { top: 10, left: 0, right: 0, bottom: 20 },\n        { 2: '2' }\n      )\n    ).toEqual({ pb: '2px' });\n  });\n  test('Bottom inset(boolean) with padding', () => {\n    expect(\n      calculatePaddingProps(\n        { safeAreaBottom: true },\n        { py: 10 },\n        { top: 10, left: 0, right: 0, bottom: 20 },\n        { 2: '2', 10: '20' }\n      )\n    ).toEqual({ pb: '40px' });\n  });\n  test('Bottom inset(number) with padding', () => {\n    expect(\n      calculatePaddingProps(\n        { safeAreaBottom: 2 },\n        { py: 10 },\n        { top: 10, left: 0, right: 0, bottom: 20 },\n        { 2: '2', 10: '20' }\n      )\n    ).toEqual({ pb: '22px' });\n  });\n  test('Left inset(boolean)', () => {\n    expect(\n      calculatePaddingProps(\n        { safeAreaLeft: true },\n        {},\n        { top: 10, left: 20, right: 0, bottom: 20 },\n        {}\n      )\n    ).toEqual({ pl: '20px' });\n  });\n  test('Left inset(number)', () => {\n    expect(\n      calculatePaddingProps(\n        { safeAreaLeft: 2 },\n        {},\n        { top: 10, left: 20, right: 0, bottom: 20 },\n        { 2: '2', 10: '20' }\n      )\n    ).toEqual({ pl: '2px' });\n  });\n  test('Left inset(boolean) with padding', () => {\n    expect(\n      calculatePaddingProps(\n        { safeAreaLeft: true },\n        { py: 10, pl: 20 },\n        { top: 10, left: 20, right: 0, bottom: 20 },\n        { 20: '20' }\n      )\n    ).toEqual({ pl: '40px' });\n  });\n  test('Left inset(number) with padding', () => {\n    expect(\n      calculatePaddingProps(\n        { safeAreaLeft: 2 },\n        { py: 10, pl: 20 },\n        { top: 10, left: 20, right: 0, bottom: 20 },\n        { 2: '2', 20: '20' }\n      )\n    ).toEqual({ pl: '22px' });\n  });\n  test('Right inset(boolean)', () => {\n    expect(\n      calculatePaddingProps(\n        { safeAreaRight: true },\n        {},\n        { top: 10, left: 20, right: 20, bottom: 20 },\n        {}\n      )\n    ).toEqual({ pr: '20px' });\n  });\n  test('Right inset(number)', () => {\n    expect(\n      calculatePaddingProps(\n        { safeAreaRight: 2 },\n        {},\n        { top: 10, left: 20, right: 20, bottom: 20 },\n        { 2: '2' }\n      )\n    ).toEqual({ pr: '2px' });\n  });\n  test('Right inset(boolean) with padding', () => {\n    expect(\n      calculatePaddingProps(\n        { safeAreaRight: true },\n        { pr: 20 },\n        { top: 10, left: 20, right: 20, bottom: 20 },\n        { 20: '20' }\n      )\n    ).toEqual({ pr: '40px' });\n  });\n  test('Right inset(number) with padding', () => {\n    expect(\n      calculatePaddingProps(\n        { safeAreaRight: 2 },\n        { pr: 20 },\n        { top: 10, left: 20, right: 20, bottom: 20 },\n        { 2: '2', 20: '20' }\n      )\n    ).toEqual({ pr: '22px' });\n  });\n  test('X inset(boolean)', () => {\n    expect(\n      calculatePaddingProps(\n        { safeAreaX: true },\n        {},\n        { top: 10, left: 20, right: 20, bottom: 20 },\n        {}\n      )\n    ).toEqual({ pl: '20px', pr: '20px' });\n  });\n  test('X inset(number)', () => {\n    expect(\n      calculatePaddingProps(\n        { safeAreaX: 2 },\n        {},\n        { top: 10, left: 20, right: 20, bottom: 20 },\n        { 2: '2' }\n      )\n    ).toEqual({ pl: '2px', pr: '2px' });\n  });\n  test('X insets(boolean) with padding', () => {\n    expect(\n      calculatePaddingProps(\n        { safeAreaX: true },\n        { px: 20 },\n        { top: 10, left: 20, right: 20, bottom: 20 },\n        { 20: '20' }\n      )\n    ).toEqual({ pl: '40px', pr: '40px' });\n  });\n  test('X insets(number) with padding', () => {\n    expect(\n      calculatePaddingProps(\n        { safeAreaX: 2 },\n        { px: 20 },\n        { top: 10, left: 20, right: 20, bottom: 20 },\n        { 2: '2', 20: '20' }\n      )\n    ).toEqual({ pl: '22px', pr: '22px' });\n  });\n  test('Y inset(boolean)', () => {\n    expect(\n      calculatePaddingProps(\n        { safeAreaY: true },\n        {},\n        { top: 10, left: 20, right: 20, bottom: 20 },\n        {}\n      )\n    ).toEqual({ pt: '10px', pb: '20px' });\n  });\n  test('Y inset(number)', () => {\n    expect(\n      calculatePaddingProps(\n        { safeAreaY: 2 },\n        {},\n        { top: 10, left: 20, right: 20, bottom: 20 },\n        { 2: '2' }\n      )\n    ).toEqual({ pt: '2px', pb: '2px' });\n  });\n  test('Y insets(boolean) with padding', () => {\n    expect(\n      calculatePaddingProps(\n        { safeAreaY: true },\n        { p: 10 },\n        { top: 10, left: 20, right: 20, bottom: 20 },\n        { 10: '10' }\n      )\n    ).toEqual({ pt: '20px', pb: '30px' });\n  });\n  test('Y insets(number) with padding', () => {\n    expect(\n      calculatePaddingProps(\n        { safeAreaY: 2 },\n        { p: 10 },\n        { top: 10, left: 20, right: 20, bottom: 20 },\n        { 2: '2', 10: '10' }\n      )\n    ).toEqual({ pt: '12px', pb: '12px' });\n  });\n  test('All insets(boolean)', () => {\n    expect(\n      calculatePaddingProps(\n        { safeArea: true },\n        {},\n        { top: 10, left: 20, right: 20, bottom: 20 },\n        {}\n      )\n    ).toEqual({ pt: '10px', pb: '20px', pl: '20px', pr: '20px' });\n  });\n  test('All insets(number)', () => {\n    expect(\n      calculatePaddingProps(\n        { safeArea: 2 },\n        {},\n        { top: 10, left: 20, right: 20, bottom: 20 },\n        { 2: '2' }\n      )\n    ).toEqual({ pt: '2px', pb: '2px', pl: '2px', pr: '2px' });\n  });\n  test('All insets(boolean) with padding', () => {\n    expect(\n      calculatePaddingProps(\n        { safeArea: true },\n        { pt: 10 },\n        { top: 10, left: 20, right: 20, bottom: 20 },\n        { 10: '10' }\n      )\n    ).toEqual({ pt: '20px', pb: '20px', pl: '20px', pr: '20px' });\n  });\n  test('All insets(number) with padding', () => {\n    expect(\n      calculatePaddingProps(\n        { safeArea: 2 },\n        { pt: 10 },\n        { top: 10, left: 20, right: 20, bottom: 20 },\n        { 2: '2', 10: '10' }\n      )\n    ).toEqual({ pt: '12px', pb: '2px', pl: '2px', pr: '2px' });\n  });\n});\n"]}