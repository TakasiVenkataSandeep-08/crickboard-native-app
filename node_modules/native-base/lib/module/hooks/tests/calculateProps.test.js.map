{"version":3,"sources":["calculateProps.test.tsx"],"names":["React","calculateProps","NativeBaseProvider","theme","renderHook","describe","wrapper","children","frame","x","y","width","height","insets","top","left","right","bottom","colorModeProps","colorMode","toggleColorMode","setColorMode","test","result","expect","current","toEqual","componentTheme","components","Badge","_text","color","fontSize","fontWeight","textTransform","px","py","borderRadius","bg","borderWidth","borderColor"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { calculateProps } from '../useThemeProps/utils';\nimport { NativeBaseProvider } from '../../core/NativeBaseProvider';\nimport { theme } from '../../theme';\nimport { renderHook } from '@testing-library/react-hooks';\n\ndescribe('useCalculateProps', () => {\n  const wrapper = ({ children }: any) => (\n    <NativeBaseProvider\n      initialWindowMetrics={{\n        frame: { x: 0, y: 0, width: 0, height: 0 },\n        insets: { top: 0, left: 0, right: 0, bottom: 0 },\n      }}\n    >\n      {children}\n    </NativeBaseProvider>\n  );\n  const colorModeProps = {\n    colorMode: 'light',\n    toggleColorMode: () => {},\n    setColorMode: () => {},\n  };\n  test('No component theme + no props', () => {\n    const { result } = renderHook(\n      () => calculateProps(theme, colorModeProps, {}, {}, 750),\n      { wrapper }\n    );\n    expect(result.current).toEqual({});\n  });\n\n  test('Only component theme(Badge) + no props', () => {\n    const componentTheme = (theme as any).components.Badge;\n    const { result } = renderHook(\n      () => calculateProps(theme, colorModeProps, componentTheme, {}, 750),\n      { wrapper }\n    );\n    expect(result.current).toEqual({\n      _text: {\n        color: 'gray.700',\n        fontSize: 'xs',\n        fontWeight: 'bold',\n        textTransform: 'uppercase',\n      },\n      px: 1,\n      py: 1,\n      borderRadius: 'lg',\n      bg: 'gray.100',\n      borderWidth: 1,\n      borderColor: 'transparent',\n    });\n  });\n\n  test('Component theme(Badge) + some props', () => {\n    const componentTheme = (theme as any).components.Badge;\n    const { result } = renderHook(\n      () =>\n        calculateProps(theme, colorModeProps, componentTheme, { py: 3 }, 750),\n      { wrapper }\n    );\n    expect(result.current).toEqual({\n      _text: {\n        color: 'gray.700',\n        fontSize: 'xs',\n        fontWeight: 'bold',\n        textTransform: 'uppercase',\n      },\n      px: 1,\n      py: 3,\n      borderRadius: 'lg',\n      bg: 'gray.100',\n      borderWidth: 1,\n      borderColor: 'transparent',\n    });\n  });\n});\n"]}