{"version":3,"sources":["useToggleButton.web.ts"],"names":["useToggleButton","props","state","ref","isSelected","isPressed","buttonProps","onPress","toggle","accessibilityPressed"],"mappings":";;;;;;;AAcA;;AACA;;AAfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACO,SAASA,eAAT,CACLC,KADK,EAELC,KAFK,EAGLC,GAHK,EAIA;AACL;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAiBF,KAAvB;AACA,QAAM;AAAEG,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAA6B,0BACjC,EACE,GAAGL,KADL;AAEEM,IAAAA,OAAO,EAAE,kBAAML,KAAK,CAACM,MAAZ,EAAoBP,KAAK,CAACM,OAA1B;AAFX,GADiC,EAKjCJ,GALiC,CAAnC;AAQA,SAAO;AACLE,IAAAA,SADK;AAELC,IAAAA,WAAW,EAAE,uBAAWA,WAAX,EAAwB;AACnC;AACA,sBAAgBF,UAFmB;AAInC;AACAK,MAAAA,oBAAoB,EAAEL;AALa,KAAxB;AAFR,GAAP;AAUD","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport { ElementType, RefObject } from 'react';\nimport { AriaToggleButtonProps } from '@react-types/button';\nimport { useButton } from './useButton';\nimport { chain } from '@react-aria/utils';\nimport { mergeProps } from '@react-aria/utils';\nimport { ToggleState } from '@react-stately/toggle';\n\n/**\n * Provides the behavior and accessibility implementation for a toggle button component.\n * ToggleButtons allow users to toggle a selection on or off, for example switching between two states or modes.\n */\nexport function useToggleButton(\n  props: AriaToggleButtonProps<ElementType>,\n  state: ToggleState,\n  ref: RefObject<any>\n): any {\n  /* eslint-enable no-redeclare */\n  const { isSelected } = state;\n  const { isPressed, buttonProps } = useButton(\n    {\n      ...props,\n      onPress: chain(state.toggle, props.onPress),\n    },\n    ref\n  );\n\n  return {\n    isPressed,\n    buttonProps: mergeProps(buttonProps, {\n      // For v0.14+\n      'aria-pressed': isSelected,\n      \n      // For v0.15+\n      accessibilityPressed: isSelected,\n    }),\n  };\n}\n"]}